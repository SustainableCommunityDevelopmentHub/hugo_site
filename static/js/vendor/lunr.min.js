/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	var json = __webpack_require__(1),
	    corpus = __webpack_require__(2),
	    lunr = __webpack_require__(3),
	    wrapper = __webpack_require__(4)

	var idx = lunr.Index.load(json)

	var documents = corpus.reduce(function (memo, doc) {
	  memo[doc.id] = doc
	  return memo
	}, {})

	window.corpus = corpus
	window.idx = idx
	window.lunr = lunr

	window.search = function (q) {
	  console.time('search: ' + q)
	  var results = idx.search(q)
	  console.timeEnd('search: ' + q)
	  return results
	}

	var buildSearchResult = function (doc) {
	  var li = document.createElement('li'),
	      article = document.createElement('article'),
	      header = document.createElement('header'),
	      section = document.createElement('section'),
	      h2 = document.createElement('h2'),
	      p = document.createElement('p')

	  h2.dataset.field = 'name'
	  h2.textContent = doc.name

	  p.dataset.field = 'body'
	  p.textContent = doc.body

	  li.appendChild(article)
	  article.appendChild(header)
	  article.appendChild(section)
	  header.appendChild(h2)
	  section.appendChild(p)

	  return li
	}

	var displayQueryError = function (queryText, error) {
	  var message = document.createElement('p'),
	      container = document.querySelector('.query-error')

	  message.classList.add('message')
	  message.textContent = error.message

	  container.appendChild(message)
	}

	var clearQueryError = function () {
	  var container = document.querySelector('.query-error')

	  while (container.firstChild) {
	    container.removeChild(container.firstChild)
	  }
	}

	var searchForm = document.querySelector('#search-form'),
	    searchField = searchForm.querySelector('input')

	searchForm.addEventListener('reset', function (event) {
	  clearQueryError()

	  var ol = document.querySelector('ol')

	  while (ol.firstChild) {
	    ol.removeChild(ol.firstChild)
	  }

	  Object.keys(documents).forEach(function (id) {
	    var doc = documents[id],
	        li = buildSearchResult(doc)

	    ol.appendChild(li)
	  })
	})

	searchForm.addEventListener('submit', function (event) {
	  event.preventDefault()
	  clearQueryError()

	  var query = searchField.value,
	      results = undefined,
	      ol = document.querySelector('ol')

	  try {
	    results = idx.search(query)
	  } catch(e) {
	    if (e instanceof lunr.QueryParseError) {
	      displayQueryError(query, e)
	      return
	    } else {
	      throw e
	    }
	  }

	  while (ol.firstChild) {
	    ol.removeChild(ol.firstChild)
	  }

	  results.forEach(function (result) {
	    var doc = documents[result.ref],
	        li = buildSearchResult(doc)

	    Object.keys(result.matchData.metadata).forEach(function (term) {
	      Object.keys(result.matchData.metadata[term]).forEach(function (fieldName) {
	        var field = li.querySelector('[data-field=' + fieldName + ']'),
	            positions = result.matchData.metadata[term][fieldName].position

	        wrapper(field, positions)
	      })
	    })

	    ol.appendChild(li)
	  })
	})


/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = {"version":"2.3.0","fields":["name","body"],"fieldVectors":[["name/alan_bean",[0,1.061,1,1.649]],["body/alan_bean",[0,1.242,1,3.164,2,0.497,3,0.812,4,1.242,5,0.067,6,1.007,7,0.25,8,1.242,9,1.007,10,0.497,11,1.059,12,0.644,13,1.059,14,0.067,15,1.007,16,0.229,17,2.565,18,0.073,19,0.25,20,0.144,21,0.812,22,0.046,23,0.812,24,0.067,25,1.536,26,0.812,27,1.93,28,1.536,29,0.723,30,1.007,31,2.528,32,0.067,33,2.528,34,0.841,35,1.007,36,0.326,37,0.812,38,1.536,39,0.644,40,2.528,41,0.046,42,2.528,43,3.3,44,1.536,45,1.242,46,1.242,47,2.528,48,2.528,49,2.528,50,1.242,51,0.479,52,1.536,53,1.536,54,1.536,55,0.326,56,0.187,57,1.536,58,2.005,59,2.528,60,1.242,61,1.007,62,2.528,63,1.536,64,2.528,65,1.93,66,2.528,67,0.644,68,2.528,69,1.93,70,0.497,71,0.644,72,1.93,73,1.536,74,1.93,75,1.93,76,1.93,77,2.528,78,2.528,79,2.528,80,1.536,81,1.93,82,1.93,83,2.528,84,1.007,85,2.528,86,2.528,87,2.528,88,2.528,89,1.536,90,1.007,91,1.242,92,1.242,93,0.367,94,2.528,95,1.242,96,2.528,97,2.528,98,1.007,99,1.93,100,0.644,101,2.528,102,0.187,103,2.528,104,0.479,105,2.528,106,1.007,107,1.93,108,0.644,109,0.812]],["name/alan_shepard",[0,1.061,110,1.312]],["body/alan_shepard",[2,0.418,3,0.681,5,0.061,6,0.846,7,0.29,9,0.846,14,0.053,15,1.169,16,0.167,18,0.078,19,0.333,20,0.206,22,0.039,23,0.681,24,0.061,26,0.681,29,0.418,32,0.073,34,0.747,36,0.377,37,0.681,39,0.747,41,0.069,46,1.043,51,0.488,55,0.333,56,0.167,90,0.846,93,0.308,95,1.043,102,0.167,104,0.308,108,0.541,109,0.681,110,2.044,111,2.123,112,1.621,113,2.123,114,0.846,115,2.123,116,2.123,117,1.29,118,1.29,119,1.29,120,0.333,121,1.29,122,2.123,123,2.123,124,0.846,125,0.541,126,2.123,127,0.846,128,2.123,129,2.123,130,2.123,131,1.621,132,1.29,133,2.123,134,2.24,135,1.29,136,2.123,137,1.621,138,2.123,139,2.123,140,2.123,141,1.783,142,1.621,143,1.621,144,1.29,145,2.934,146,1.621,147,1.043,148,1.043,149,0.577,150,0.846,151,0.426,152,1.621,153,2.123,154,1.621,155,1.29,156,1.29,157,2.123,158,2.123,159,1.621,160,2.123,161,2.123,162,1.29,163,2.123,164,0.846,165,2.123,166,2.123,167,0.662,168,0.846,169,1.621,170,0.857,171,2.123,172,0.577,173,2.123,174,0.846,175,1.621,176,1.621,177,2.123,178,2.123,179,1.621,180,2.123,181,0.418,182,1.169,183,1.621,184,1.043,185,2.123,186,2.123,187,1.621,188,1.621,189,2.123,190,2.123,191,2.123,192,2.123,193,2.123,194,1.043,195,1.169,196,1.621,197,1.621,198,1.621,199,0.846,200,1.043,201,2.123,202,1.621,203,1.621,204,1.29,205,2.123,206,1.783,207,0.681,208,1.621,209,1.621,210,1.621,211,1.621,212,1.621,213,1.29,214,0.541,215,1.621,216,0.681,217,1.29,218,0.681,219,0.681,220,1.169,221,0.681,222,0.857,223,1.621,224,1.043,225,1.621,226,0.747,227,0.942,228,0.681,229,0.857,230,1.043,231,0.846,232,0.846,233,0.541,234,1.621,235,0.846,236,1.621,237,0.846,238,1.043,239,1.29,240,1.043,241,0.541,242,1.621,243,1.621,244,1.621,245,1.29,246,1.29,247,0.541,248,1.621,249,1.621]],["name/buzz_aldrin",[250,2.159,251,1.649]],["body/buzz_aldrin",[2,0.565,3,0.921,4,1.41,5,0.052,6,1.143,7,0.354,8,1.41,9,1.143,10,0.565,12,0.912,14,0.052,16,0.163,18,0.074,19,0.284,20,0.203,21,0.921,22,0.052,24,0.052,25,1.744,26,1.149,32,0.052,36,0.284,41,0.052,55,0.354,56,0.163,61,1.553,67,0.731,70,0.565,100,0.731,102,0.232,104,0.566,107,2.191,108,0.993,120,0.354,121,1.744,124,1.143,125,0.731,149,0.565,156,1.744,188,2.191,199,1.143,241,0.731,251,3.207,252,1.758,253,0.565,254,1.744,255,2.87,256,2.191,257,2.191,258,1.41,259,2.191,260,1.744,261,0.731,262,2.87,263,1.744,264,1.744,265,0.921,266,2.87,267,1.744,268,1.41,269,1.41,270,1.41,271,0.731,272,1.744,273,1.143,274,2.191,275,2.87,276,2.191,277,2.87]],["name/charles_duke",[278,2.159,279,1.312]],["body/charles_duke",[2,0.437,5,0.055,7,0.22,10,0.728,11,0.972,13,0.713,14,0.076,16,0.126,18,0.078,19,0.395,20,0.21,22,0.04,24,0.063,29,0.596,30,0.885,32,0.063,36,0.383,37,0.713,39,0.566,41,0.07,51,0.323,55,0.22,56,0.196,58,1.35,70,0.437,71,0.566,75,1.697,84,0.885,93,0.323,100,0.771,102,0.22,104,0.5,108,0.566,114,1.206,120,0.3,149,0.678,150,0.885,151,0.323,164,0.885,170,0.566,172,0.596,181,0.437,184,1.092,195,0.885,200,1.092,207,0.713,213,1.35,214,0.771,216,0.713,218,0.972,219,0.972,221,0.713,222,0.566,226,0.566,227,0.713,228,0.713,229,0.566,232,0.885,235,0.885,247,0.566,252,1.092,253,0.437,261,0.566,265,1.242,269,1.092,270,1.092,271,0.566,272,1.35,273,0.885,279,2.352,280,1.092,281,1.35,282,0.885,283,2.223,284,2.312,285,1.697,286,1.092,287,1.697,288,1.35,289,1.697,290,1.488,291,1.697,292,2.312,293,2.223,294,1.092,295,1.35,296,1.092,297,1.697,298,1.697,299,2.223,300,1.697,301,1.35,302,2.223,303,2.223,304,2.223,305,2.223,306,2.223,307,0.713,308,1.092,309,1.35,310,2.223,311,2.223,312,1.697,313,2.223,314,1.092,315,1.84,316,2.223,317,2.223,318,2.223,319,2.223,320,2.223,321,2.223,322,2.223,323,1.697,324,2.223,325,2.223,326,2.223,327,1.488,328,1.092,329,1.092,330,0.885,331,1.092,332,1.35,333,2.223,334,2.223,335,2.223,336,1.092,337,0.885,338,0.885,339,1.697,340,1.35,341,1.092,342,1.35,343,1.092,344,0.885,345,0.885,346,0.885,347,0.885,348,0.885,349,1.35,350,2.223,351,1.697,352,2.223,353,2.223]],["name/david_scott",[354,1.649,355,1.312]],["body/david_scott",[2,0.327,3,0.941,4,0.816,5,0.03,6,0.662,7,0.164,8,0.816,9,0.662,10,0.327,11,0.533,12,0.423,14,0.073,15,0.981,16,0.167,18,0.077,19,0.407,20,0.206,21,0.533,22,0.045,23,0.533,24,0.045,26,0.533,30,0.662,32,0.063,34,0.627,35,0.662,36,0.381,37,0.533,39,0.423,41,0.068,44,1.01,45,0.816,46,0.816,50,0.816,51,0.471,52,1.01,55,0.342,56,0.219,60,0.816,61,0.662,67,0.627,70,0.327,71,0.423,89,1.01,90,0.662,93,0.426,98,0.662,100,0.423,102,0.167,104,0.426,106,0.662,108,0.747,109,0.79,120,0.29,124,0.662,125,0.747,127,0.662,137,1.268,141,1.01,147,0.816,148,1.209,149,0.681,150,0.662,151,0.241,159,1.268,164,0.662,167,0.638,168,0.662,170,0.747,172,0.327,174,0.662,179,1.268,182,0.662,184,0.816,194,0.816,199,0.662,214,0.627,216,0.533,217,1.01,218,0.533,219,0.533,221,0.533,222,0.747,224,0.816,226,0.423,227,0.533,228,0.533,229,0.423,230,1.209,231,0.662,232,0.662,233,0.423,237,0.662,238,0.816,240,0.816,241,0.423,246,1.01,247,0.826,253,0.327,254,1.496,258,0.816,261,0.747,264,1.01,265,0.533,267,1.01,268,0.816,269,0.816,271,0.826,273,1.292,282,0.662,284,1.268,294,0.816,295,1.01,296,0.816,307,0.941,308,1.209,309,1.01,314,1.209,327,1.209,328,0.816,329,0.816,330,1.168,331,0.816,332,1.01,336,0.816,337,0.981,338,0.981,339,1.268,340,1.01,341,0.816,342,1.01,343,0.816,344,0.662,345,0.662,346,0.662,347,0.662,348,0.981,355,2.281,356,1.496,357,0.662,358,1.661,359,1.01,360,1.268,361,1.661,362,1.661,363,1.661,364,1.88,365,1.292,366,1.496,367,0.662,368,1.88,369,1.661,370,1.661,371,1.661,372,1.661,373,1.661,374,1.01,375,1.268,376,1.661,377,1.268,378,1.268,379,1.268,380,1.268,381,1.661,382,1.268,383,1.01,384,1.661,385,1.268,386,1.268,387,1.268,388,1.268,389,1.268,390,1.661,391,1.268,392,1.661,393,1.661,394,1.661,395,1.661,396,2.462,397,1.268,398,1.209,399,1.661,400,1.268,401,1.268,402,1.01,403,1.661,404,1.661,405,1.661,406,1.268,407,1.661,408,1.661,409,1.661,410,1.268,411,1.661,412,1.661,413,1.661,414,1.661,415,1.268,416,1.661,417,1.661,418,1.268,419,1.268,420,1.268,421,1.268,422,1.88,423,1.661,424,1.782,425,1.01,426,1.268,427,1.01,428,1.88,429,1.88,430,1.88,431,1.496,432,1.209,433,0.816,434,0.816,435,0.816,436,1.268,437,1.268,438,1.268,439,1.268,440,1.268,441,1.01,442,0.816,443,1.268,444,1.268,445,1.268,446,1.268,447,1.268,448,1.01,449,1.268,450,1.268,451,1.268,452,1.01,453,1.268,454,1.268,455,1.01,456,1.268,457,1.268,458,1.01,459,1.01,460,0.662,461,1.01,462,1.268,463,1.268,464,1.268,465,1.268,466,0.816,467,1.268,468,1.268,469,1.268]],["name/edgar_mitchell",[204,1.312,206,1.312]],["body/edgar_mitchell",[0,1.163,4,1.163,5,0.057,10,0.7,11,1.014,13,0.76,14,0.069,15,1.417,17,1.439,18,0.08,19,0.375,20,0.202,22,0.043,24,0.043,29,0.622,32,0.043,34,0.603,36,0.391,37,0.76,39,0.603,41,0.072,51,0.517,67,0.603,73,1.439,80,1.439,93,0.344,100,0.603,102,0.202,104,0.459,108,0.603,109,0.76,110,1.92,112,1.808,114,0.943,119,1.92,120,0.352,121,1.439,141,1.439,149,0.466,151,0.344,155,1.439,167,0.466,170,0.805,172,0.466,181,0.466,182,0.943,194,1.163,195,0.943,196,1.808,197,1.808,198,1.808,199,1.259,202,1.808,203,1.808,204,1.439,206,2.307,207,0.76,208,1.808,209,1.808,210,1.808,211,1.808,212,1.808,213,1.439,214,0.805,215,1.808,216,0.76,217,1.439,218,0.76,219,0.76,220,1.259,221,0.76,222,0.906,223,1.808,224,1.163,225,1.808,226,0.805,227,1.014,228,0.76,229,0.906,230,1.163,231,0.943,232,0.943,233,0.603,234,1.808,235,0.943,236,1.808,237,0.943,238,1.163,239,1.439,240,1.163,241,0.603,242,1.808,243,1.808,244,1.808,245,1.439,246,1.439,247,0.603,248,1.808,249,1.808,253,0.466,265,0.76,271,0.603,281,1.92,282,0.943,360,1.808,367,0.943,374,1.439,470,1.808,471,1.808,472,2.368,473,2.368,474,2.368,475,2.368,476,2.368,477,2.368,478,1.808,479,1.808,480,2.368,481,2.368,482,1.808,483,1.808,484,1.808,485,2.368,486,2.368,487,2.368,488,2.368]],["name/eugene_cernan",[489,1.649,490,1.061]],["body/eugene_cernan",[2,0.456,3,0.492,5,0.028,7,0.152,8,0.753,9,0.611,10,0.302,11,0.897,12,0.712,13,0.897,14,0.07,16,0.2,17,1.409,18,0.078,19,0.405,20,0.214,21,0.492,22,0.064,23,0.897,24,0.064,26,0.492,29,0.719,30,0.611,32,0.068,34,0.897,36,0.308,38,0.932,41,0.042,50,0.753,51,0.486,52,0.932,53,0.932,54,0.932,55,0.331,56,0.219,60,1.139,67,0.59,69,1.171,70,0.302,81,1.171,84,0.611,89,0.932,90,1.113,91,0.753,92,0.753,93,0.223,95,1.139,98,0.611,100,0.391,102,0.208,104,0.531,106,0.611,117,0.932,118,0.932,120,0.331,124,0.611,125,0.59,131,1.171,134,1.171,135,0.932,147,0.753,148,0.753,149,0.658,150,0.611,151,0.223,154,1.171,164,0.611,167,0.456,168,0.611,170,0.59,172,0.302,174,0.611,181,0.302,182,0.611,183,1.171,194,0.753,195,0.611,200,0.753,207,0.897,214,0.59,219,0.492,220,0.923,221,0.492,222,0.59,226,0.391,229,0.712,233,0.391,235,1.113,237,1.113,238,1.139,241,0.391,247,0.59,253,0.302,258,0.753,260,0.932,261,0.712,263,1.409,264,0.932,270,0.753,271,0.794,272,0.932,280,0.753,286,1.139,288,0.932,289,1.171,290,0.753,291,1.171,294,0.753,301,0.932,307,1,308,0.753,315,0.932,327,1.139,328,0.753,329,1.139,330,0.923,331,0.753,336,0.753,337,0.923,338,0.611,341,0.753,343,0.753,344,0.611,345,0.611,346,0.611,347,1.113,348,0.923,349,0.932,357,0.611,359,1.893,365,0.611,366,1.409,367,1.113,368,1.171,374,0.932,378,1.171,379,1.171,380,1.171,382,1.171,383,0.932,385,1.171,386,1.171,387,1.171,388,1.171,391,1.171,397,1.77,398,0.753,400,1.171,401,1.171,427,0.932,431,0.932,432,0.753,433,0.753,434,0.753,435,0.753,442,0.753,448,0.932,459,0.932,460,0.611,461,0.932,466,0.753,479,1.77,484,1.171,490,1.729,491,1.533,492,1.171,493,1.171,494,1.533,495,1.171,496,1.77,497,2.318,498,1.533,499,0.932,500,1.533,501,1.533,502,1.171,503,1.533,504,1.893,505,1.533,506,1.409,507,1.533,508,1.533,509,1.77,510,1.171,511,1.77,512,1.77,513,1.533,514,1.533,515,1.533,516,1.533,517,2.318,518,1.533,519,1.533,520,1.171,521,1.533,522,1.533,523,1.533,524,1.533,525,1.171,526,1.533,527,1.533,528,1.533,529,1.533,530,1.171,531,1.533,532,1.533,533,1.171,534,1.533,535,1.533,536,1.171,537,1.171,538,1.171,539,1.139,540,1.699,541,1.533,542,1.171,543,1.77,544,1.77,545,1.171,546,2.134,547,1.171,548,1.533,549,1.699,550,1.77,551,1.171,552,1.171,553,0.932,554,2.318,555,1.533,556,1.533,557,1.533,558,1.533,559,1.171,560,1.171,561,1.171,562,1.171,563,1.171,564,1.171,565,1.171,566,1.171,567,1.171,568,1.171,569,1.533,570,0.932,571,1.533,572,1.171,573,1.171,574,1.533,575,1.533,576,1.533,577,1.533,578,1.171,579,0.932,580,1.171,581,1.171,582,1.533,583,1.533,584,1.533,585,1.533,586,1.533,587,1.533,588,0.932,589,1.533,590,1.533,591,1.533,592,1.533]],["name/harrison_schmitt",[547,1.649,549,1.312]],["body/harrison_schmitt",[5,0.042,7,0.23,14,0.075,16,0.214,18,0.076,19,0.373,20,0.177,22,0.064,24,0.057,29,0.615,30,0.927,32,0.071,34,0.796,35,0.927,36,0.23,38,1.414,41,0.042,46,1.143,51,0.338,54,1.414,55,0.23,56,0.2,67,0.593,70,0.458,71,0.593,72,1.777,73,1.899,91,1.535,92,1.535,93,0.338,102,0.2,104,0.512,119,1.414,120,0.309,135,1.414,147,1.143,149,0.742,151,0.338,155,1.899,167,0.458,172,0.458,175,1.777,181,0.458,200,1.143,207,0.747,219,1.003,220,1.245,226,0.593,229,0.898,233,0.593,235,1.245,256,1.777,261,0.593,271,0.796,276,1.777,280,1.143,286,1.535,297,1.777,301,1.414,307,0.747,344,0.927,345,0.927,346,0.927,347,0.927,348,0.927,349,1.414,359,1.899,432,1.143,433,1.143,434,1.143,435,1.143,458,1.414,460,0.927,482,1.777,489,1.777,490,1.535,492,1.777,493,1.777,499,1.414,504,1.414,506,1.414,511,1.777,512,1.777,530,1.777,536,1.777,537,1.777,538,1.777,539,1.535,540,1.414,542,1.777,543,1.777,544,2.385,545,1.777,546,1.777,549,2.291,550,1.777,551,1.777,552,1.777,553,1.899,559,1.777,560,1.777,561,1.777,562,1.777,563,1.777,564,1.777,565,1.777,566,1.777,567,1.777,568,1.777,572,1.777,573,1.777,579,1.414,580,1.777,581,1.777,593,1.777,594,2.328,595,2.328,596,2.328,597,1.777,598,1.777,599,2.328,600,2.328,601,2.328,602,1.777,603,2.328,604,2.328,605,2.328,606,2.328,607,1.777,608,2.328,609,2.328,610,2.328,611,2.328,612,1.777]],["name/james_irwin",[254,1.312,424,1.312]],["body/james_irwin",[2,0.411,5,0.053,7,0.207,10,0.571,11,0.671,13,0.671,14,0.073,16,0.165,18,0.079,19,0.398,20,0.189,21,0.671,22,0.038,24,0.038,32,0.053,35,0.833,36,0.405,37,0.671,39,0.532,41,0.071,44,1.27,45,1.027,50,1.027,51,0.422,55,0.287,56,0.205,61,0.833,70,0.411,71,0.532,80,1.27,82,1.596,84,0.833,93,0.422,98,0.833,100,0.532,102,0.165,104,0.422,106,0.833,108,0.532,109,0.671,114,0.833,124,0.833,125,0.532,127,0.833,148,1.426,149,0.709,150,0.833,151,0.304,167,0.571,170,0.74,172,0.411,174,0.833,181,0.411,182,0.833,184,1.027,199,0.833,214,0.532,216,0.671,218,0.671,221,0.671,222,0.85,224,1.027,226,0.532,227,0.671,228,0.671,229,0.532,230,1.027,231,0.833,232,0.833,233,0.532,239,1.27,240,1.027,241,0.532,247,0.85,253,0.411,261,0.74,269,1.027,273,1.329,280,1.027,281,1.27,282,0.833,294,1.027,295,1.27,296,1.027,307,0.932,308,1.426,309,1.27,314,1.426,327,1.426,328,1.027,329,1.027,330,1.157,331,1.027,332,1.27,336,1.027,337,1.157,338,0.833,340,1.27,341,1.027,342,1.27,343,1.027,344,0.833,345,0.833,346,0.833,347,0.833,348,0.833,354,1.596,355,2.027,357,0.833,365,0.833,375,1.596,398,1.027,410,1.596,418,1.596,419,1.596,420,1.596,421,1.596,422,2.217,424,2.19,425,1.27,426,1.596,427,1.27,428,2.217,429,2.217,430,1.596,431,1.764,432,1.426,433,1.027,434,1.027,435,1.027,436,1.596,437,1.596,438,1.596,439,1.596,440,1.596,441,1.27,442,1.027,443,1.596,444,1.596,445,1.596,446,1.596,447,1.596,448,1.27,449,1.596,450,1.596,451,1.596,452,1.27,453,1.596,454,1.596,455,1.27,456,1.596,457,1.596,458,1.27,459,1.27,460,0.833,461,1.27,462,1.596,463,1.596,464,1.596,465,1.596,466,1.027,467,1.596,468,1.596,469,1.596,499,1.27,579,1.27,613,2.09,614,2.09,615,2.09,616,2.09,617,2.09,618,2.09]],["name/john_young",[288,1.312,290,1.061]],["body/john_young",[2,0.35,3,0.571,5,0.032,12,0.854,13,0.831,14,0.055,15,0.709,16,0.231,18,0.067,19,0.176,20,0.19,21,0.831,22,0.061,23,0.571,24,0.061,25,1.081,26,0.571,29,0.35,32,0.071,34,0.453,35,1.031,39,0.453,41,0.074,51,0.557,53,1.081,55,0.352,56,0.202,57,1.081,60,0.874,61,0.709,63,1.081,67,0.453,71,0.453,74,1.358,76,1.358,84,1.031,93,0.258,98,1.419,102,0.147,106,0.709,109,0.831,114,1.031,120,0.368,125,0.453,127,1.031,132,1.081,151,0.376,164,0.709,167,0.35,168,1.216,170,0.453,172,0.509,174,0.709,181,0.35,195,0.709,207,0.571,216,0.571,218,0.571,220,1.031,222,0.453,227,0.831,231,0.709,233,0.659,237,1.031,245,1.081,247,0.777,253,0.35,257,1.358,259,1.358,261,0.453,263,1.081,265,0.98,271,0.854,279,1.573,285,1.358,286,0.874,287,1.358,290,1.969,292,1.358,296,0.874,298,1.358,300,1.358,307,0.831,312,1.358,314,0.874,315,1.573,323,1.358,330,0.709,337,0.709,338,0.709,351,1.358,356,1.081,357,0.709,364,1.358,365,1.031,367,0.709,383,1.081,389,1.358,398,1.272,402,1.081,406,1.358,425,1.081,441,1.081,442,1.272,460,0.709,466,0.874,478,1.358,490,0.874,495,1.358,496,1.358,504,1.081,506,1.573,509,1.358,510,1.976,520,1.976,533,1.358,539,0.874,540,1.081,553,1.573,570,1.081,578,1.358,588,1.573,593,1.358,597,1.976,598,1.976,602,1.358,612,1.976,619,1.081,620,1.779,621,1.779,622,1.779,623,1.779,624,1.779,625,2.589,626,1.779,627,1.779,628,1.779,629,1.779,630,1.779,631,1.779,632,2.589,633,1.779,634,2.589,635,2.589,636,1.779,637,3.052,638,1.358,639,1.779,640,1.779,641,1.779,642,1.779,643,1.779,644,1.779,645,1.779,646,1.779,647,1.358,648,1.779,649,2.589,650,2.589,651,2.589,652,1.779,653,2.589,654,1.779,655,1.779,656,1.779,657,3.351,658,1.779,659,1.779,660,1.779,661,1.358,662,1.779,663,1.779,664,1.779,665,1.779,666,1.779,667,1.779,668,2.589,669,1.779,670,1.779,671,1.779,672,1.779,673,1.779,674,1.779,675,2.589,676,1.779,677,2.589,678,1.779,679,1.779,680,1.976,681,1.976,682,2.589,683,1.779,684,1.779,685,1.779,686,1.779,687,2.589,688,1.779,689,1.779,690,1.779,691,1.779,692,1.779,693,1.779,694,1.779,695,1.779,696,1.779,697,1.779,698,1.779,699,1.779,700,1.779,701,1.779,702,3.052,703,1.779,704,1.779,705,1.779,706,1.779,707,1.779,708,1.779,709,1.779,710,1.779,711,1.779,712,1.779]],["name/neil_armstrong",[267,1.312,268,1.061]],["body/neil_armstrong",[5,0.051,7,0.348,12,0.897,14,0.051,16,0.2,18,0.051,20,0.219,22,0.064,24,0.064,29,0.551,32,0.051,36,0.277,41,0.073,55,0.277,56,0.2,90,1.115,99,2.137,117,1.701,118,1.701,120,0.277,125,0.713,127,1.115,144,1.701,146,2.137,151,0.512,162,2.14,169,2.137,176,2.137,187,2.137,214,0.713,252,1.375,253,0.551,258,1.375,265,0.898,268,2.048,273,1.115,356,1.701,357,1.403,365,1.115,366,1.701,367,1.115,402,1.701,415,2.137,455,1.701,502,2.137,570,1.701,588,1.701,607,2.943,619,1.701,638,2.137,647,2.137,661,2.137,680,2.137,681,2.137,713,2.799,714,2.799,715,2.799,716,2.799,717,2.799,718,2.689,719,2.799,720,2.799,721,2.799,722,2.799,723,2.799,724,2.799,725,2.799,726,2.799,727,2.799,728,2.799,729,2.799,730,2.799,731,2.799,732,2.799,733,2.799,734,3.522,735,2.799,736,2.799,737,2.799,738,2.799,739,2.799]],["name/pete_conrad",[27,1.649,28,1.312]],["body/pete_conrad",[5,0.061,6,1.026,7,0.255,10,0.729,12,0.851,14,0.047,16,0.146,18,0.047,22,0.047,23,0.827,24,0.047,28,2.384,32,0.047,41,0.061,45,1.266,56,0.21,57,1.565,58,1.565,63,1.565,65,1.967,70,0.657,71,0.656,91,1.641,92,1.641,95,1.266,102,0.146,120,0.388,132,1.565,142,1.967,143,1.967,144,2.03,152,2.55,156,1.565,162,2.03,167,0.729,168,1.331,181,0.507,228,0.827,241,0.656,252,1.266,260,1.565,270,1.266,274,1.967,282,1.026,377,1.967,452,2.03,470,1.967,471,1.967,483,1.967,525,1.967,539,1.266,619,1.565,718,1.967,740,4.065,741,2.576,742,2.576,743,2.576,744,2.576,745,2.576,746,2.576,747,2.576,748,2.576,749,2.576,750,3.341,751,4.165,752,4.165,753,2.576,754,3.708,755,3.708,756,2.576,757,2.576,758,2.576,759,2.576,760,2.576,761,2.576,762,3.341,763,3.708,764,2.576,765,3.341,766,3.708,767,2.576,768,2.576,769,2.576,770,3.341,771,2.576,772,2.576,773,2.576,774,2.576,775,2.576,776,2.576,777,2.576,778,2.576]]],"invertedIndex":[["0.4",{"_index":580,"name":{},"body":{"eugene_cernan":{"position":[[3864,3]]},"harrison_schmitt":{"position":[[1707,3]]}}}],["1",{"_index":330,"name":{},"body":{"charles_duke":{"position":[[1460,2]]},"david_scott":{"position":[[1513,1],[2576,2],[3386,3]]},"eugene_cernan":{"position":[[662,1],[3591,1]]},"james_irwin":{"position":[[192,2],[1861,2]]},"john_young":{"position":[[1459,2]]}}}],["1,671",{"_index":101,"name":{},"body":{"alan_bean":{"position":[[1140,5]]}}}],["1/2",{"_index":263,"name":{},"body":{"buzz_aldrin":{"position":[[341,3]]},"eugene_cernan":{"position":[[664,3],[4095,3]]},"john_young":{"position":[[1554,3]]}}}],["10",{"_index":13,"name":{},"body":{"alan_bean":{"position":[[127,2],[1184,2]]},"charles_duke":{"position":[[131,2]]},"edgar_mitchell":{"position":[[190,3]]},"eugene_cernan":{"position":[[927,3],[1280,2],[1962,2]]},"james_irwin":{"position":[[269,2]]},"john_young":{"position":[[510,3],[883,3]]}}}],["100",{"_index":217,"name":{},"body":{"alan_shepard":{"position":[[1760,3]]},"david_scott":{"position":[[1200,3]]},"edgar_mitchell":{"position":[[821,3]]}}}],["109",{"_index":320,"name":{},"body":{"charles_duke":{"position":[[1274,3]]}}}],["11",{"_index":252,"name":{},"body":{"buzz_aldrin":{"position":[[91,3],[418,3]]},"charles_duke":{"position":[[167,3]]},"neil_armstrong":{"position":[[553,3]]},"pete_conrad":{"position":[[508,3]]}}}],["110",{"_index":712,"name":{},"body":{"john_young":{"position":[[3097,3]]}}}],["115",{"_index":563,"name":{},"body":{"eugene_cernan":{"position":[[3148,3]]},"harrison_schmitt":{"position":[[1563,3]]}}}],["116",{"_index":133,"name":{},"body":{"alan_shepard":{"position":[[337,3]]}}}],["11:33",{"_index":536,"name":{},"body":{"eugene_cernan":{"position":[[2263,5]]},"harrison_schmitt":{"position":[[789,5]]}}}],["12",{"_index":21,"name":{},"body":{"alan_bean":{"position":[[199,3]]},"buzz_aldrin":{"position":[[174,2]]},"david_scott":{"position":[[1848,3]]},"eugene_cernan":{"position":[[813,2]]},"james_irwin":{"position":[[320,2]]},"john_young":{"position":[[1507,2],[2688,2]]}}}],["13",{"_index":284,"name":{},"body":{"charles_duke":{"position":[[254,3],[1472,2]]},"david_scott":{"position":[[539,3]]}}}],["14",{"_index":195,"name":{},"body":{"alan_shepard":{"position":[[1355,3],[1822,2]]},"charles_duke":{"position":[[721,2]]},"edgar_mitchell":{"position":[[883,2]]},"eugene_cernan":{"position":[[2102,3]]},"john_young":{"position":[[1510,3]]}}}],["147",{"_index":567,"name":{},"body":{"eugene_cernan":{"position":[[3199,4]]},"harrison_schmitt":{"position":[[1613,4]]}}}],["15",{"_index":273,"name":{},"body":{"buzz_aldrin":{"position":[[576,2]]},"charles_duke":{"position":[[898,2]]},"david_scott":{"position":[[1917,3],[2069,2],[3110,2],[3768,2]]},"james_irwin":{"position":[[527,2],[1586,2],[2258,2]]},"neil_armstrong":{"position":[[182,3]]}}}],["150",{"_index":85,"name":{},"body":{"alan_bean":{"position":[[916,4]]}}}],["16",{"_index":265,"name":{},"body":{"buzz_aldrin":{"position":[[427,2]]},"charles_duke":{"position":[[302,3],[312,2],[484,2],[1202,2],[1663,2]]},"david_scott":{"position":[[87,3]]},"edgar_mitchell":{"position":[[1572,3]]},"john_young":{"position":[[1070,3],[1080,2],[1338,2]]},"neil_armstrong":{"position":[[429,3]]}}}],["161",{"_index":501,"name":{},"body":{"eugene_cernan":{"position":[[271,3]]}}}],["17",{"_index":235,"name":{},"body":{"alan_shepard":{"position":[[2117,2]]},"charles_duke":{"position":[[1942,3]]},"edgar_mitchell":{"position":[[1178,2]]},"eugene_cernan":{"position":[[2171,2],[3802,2],[4233,3]]},"harrison_schmitt":{"position":[[700,2],[1645,2]]}}}],["18",{"_index":442,"name":{},"body":{"david_scott":{"position":[[2438,2]]},"eugene_cernan":{"position":[[935,2]]},"james_irwin":{"position":[[891,2]]},"john_young":{"position":[[519,2],[829,2]]}}}],["180",{"_index":449,"name":{},"body":{"david_scott":{"position":[[2772,3]]},"james_irwin":{"position":[[1239,3]]}}}],["19",{"_index":280,"name":{},"body":{"charles_duke":{"position":[[20,2]]},"eugene_cernan":{"position":[[2365,3]]},"harrison_schmitt":{"position":[[851,3]]},"james_irwin":{"position":[[29,2]]}}}],["1959",{"_index":115,"name":{},"body":{"alan_shepard":{"position":[[78,5]]}}}],["1961",{"_index":122,"name":{},"body":{"alan_shepard":{"position":[[174,5]]}}}],["1962",{"_index":619,"name":{},"body":{"john_young":{"position":[[13,5]]},"neil_armstrong":{"position":[[333,5]]},"pete_conrad":{"position":[[16,5]]}}}],["1963",{"_index":9,"name":{},"body":{"alan_bean":{"position":[[76,5]]},"alan_shepard":{"position":[[432,5]]},"buzz_aldrin":{"position":[[73,5]]},"david_scott":{"position":[[72,5]]},"eugene_cernan":{"position":[[74,5]]}}}],["1965",{"_index":593,"name":{},"body":{"harrison_schmitt":{"position":[[66,5]]},"john_young":{"position":[[257,5]]}}}],["1966",{"_index":253,"name":{},"body":{"buzz_aldrin":{"position":[[95,5]]},"charles_duke":{"position":[[60,5]]},"david_scott":{"position":[[91,5]]},"edgar_mitchell":{"position":[[75,5]]},"eugene_cernan":{"position":[[221,5]]},"james_irwin":{"position":[[69,5]]},"john_young":{"position":[[526,5]]},"neil_armstrong":{"position":[[433,5]]}}}],["1968",{"_index":616,"name":{},"body":{"james_irwin":{"position":[[195,5]]}}}],["1969",{"_index":26,"name":{},"body":{"alan_bean":{"position":[[242,5]]},"alan_shepard":{"position":[[1222,5]]},"buzz_aldrin":{"position":[[434,5],[546,5]]},"david_scott":{"position":[[543,5]]},"eugene_cernan":{"position":[[942,5]]},"john_young":{"position":[[836,5]]}}}],["1971",{"_index":199,"name":{},"body":{"alan_shepard":{"position":[[1384,5]]},"buzz_aldrin":{"position":[[605,5]]},"david_scott":{"position":[[1941,5]]},"edgar_mitchell":{"position":[[209,5],[488,4]]},"james_irwin":{"position":[[399,5]]}}}],["1972",{"_index":286,"name":{},"body":{"charles_duke":{"position":[[319,5]]},"eugene_cernan":{"position":[[2293,5],[2369,5]]},"harrison_schmitt":{"position":[[819,5],[855,5]]},"john_young":{"position":[[1087,5]]}}}],["1973",{"_index":65,"name":{},"body":{"alan_bean":{"position":[[720,5]]},"pete_conrad":{"position":[[479,5]]}}}],["1976",{"_index":760,"name":{},"body":{"pete_conrad":{"position":[[878,5]]}}}],["1978",{"_index":764,"name":{},"body":{"pete_conrad":{"position":[[998,5]]}}}],["1980",{"_index":771,"name":{},"body":{"pete_conrad":{"position":[[1188,5]]}}}],["1981",{"_index":652,"name":{},"body":{"john_young":{"position":[[1514,5]]}}}],["1982",{"_index":774,"name":{},"body":{"pete_conrad":{"position":[[1269,4]]}}}],["1983",{"_index":684,"name":{},"body":{"john_young":{"position":[[2412,5]]}}}],["1984",{"_index":775,"name":{},"body":{"pete_conrad":{"position":[[1278,5]]}}}],["2",{"_index":272,"name":{},"body":{"buzz_aldrin":{"position":[[565,1]]},"charles_duke":{"position":[[1118,1]]},"eugene_cernan":{"position":[[4093,1]]}}}],["20",{"_index":270,"name":{},"body":{"buzz_aldrin":{"position":[[542,3]]},"charles_duke":{"position":[[885,2]]},"eugene_cernan":{"position":[[587,2]]},"pete_conrad":{"position":[[499,2]]}}}],["200",{"_index":647,"name":{},"body":{"john_young":{"position":[[1303,3]]},"neil_armstrong":{"position":[[204,3]]}}}],["21",{"_index":351,"name":{},"body":{"charles_duke":{"position":[[1847,2]]},"john_young":{"position":[[522,3]]}}}],["213",{"_index":311,"name":{},"body":{"charles_duke":{"position":[[1045,3]]}}}],["216",{"_index":487,"name":{},"body":{"edgar_mitchell":{"position":[[1457,3]]}}}],["22",{"_index":561,"name":{},"body":{"eugene_cernan":{"position":[[3084,3]]},"harrison_schmitt":{"position":[[1498,3]]}}}],["23",{"_index":627,"name":{},"body":{"john_young":{"position":[[253,3]]}}}],["24",{"_index":266,"name":{},"body":{"buzz_aldrin":{"position":[[430,3]]}}}],["24,400,000",{"_index":68,"name":{},"body":{"alan_bean":{"position":[[750,10]]}}}],["248,000",{"_index":516,"name":{},"body":{"eugene_cernan":{"position":[[1082,7]]}}}],["249",{"_index":565,"name":{},"body":{"eugene_cernan":{"position":[[3155,4]]},"harrison_schmitt":{"position":[[1571,3]]}}}],["25",{"_index":64,"name":{},"body":{"alan_bean":{"position":[[716,3]]}}}],["250,000",{"_index":33,"name":{},"body":{"alan_bean":{"position":[[343,7]]}}}],["26",{"_index":106,"name":{},"body":{"alan_bean":{"position":[[1197,2]]},"david_scott":{"position":[[1926,2]]},"eugene_cernan":{"position":[[938,3]]},"james_irwin":{"position":[[383,2]]},"john_young":{"position":[[832,3]]}}}],["265",{"_index":350,"name":{},"body":{"charles_duke":{"position":[[1819,3]]}}}],["27",{"_index":285,"name":{},"body":{"charles_duke":{"position":[[315,3]]},"john_young":{"position":[[1083,3]]}}}],["28",{"_index":683,"name":{},"body":{"john_young":{"position":[[2397,2]]}}}],["289",{"_index":275,"name":{},"body":{"buzz_aldrin":{"position":[[656,3]]}}}],["29",{"_index":62,"name":{},"body":{"alan_bean":{"position":[[700,2]]}}}],["3",{"_index":60,"name":{},"body":{"alan_bean":{"position":[[691,3]]},"david_scott":{"position":[[537,1]]},"eugene_cernan":{"position":[[185,1],[218,2]]},"john_young":{"position":[[208,2]]}}}],["3/8",{"_index":514,"name":{},"body":{"eugene_cernan":{"position":[[714,3]]}}}],["301",{"_index":559,"name":{},"body":{"eugene_cernan":{"position":[[3012,4]]},"harrison_schmitt":{"position":[[1425,4]]}}}],["302",{"_index":136,"name":{},"body":{"alan_shepard":{"position":[[378,3]]}}}],["31",{"_index":197,"name":{},"body":{"alan_shepard":{"position":[[1367,2]]},"edgar_mitchell":{"position":[[205,3]]}}}],["33",{"_index":234,"name":{},"body":{"alan_shepard":{"position":[[2066,3]]},"edgar_mitchell":{"position":[[1127,3]]}}}],["35",{"_index":443,"name":{},"body":{"david_scott":{"position":[[2451,2]]},"james_irwin":{"position":[[904,2]]}}}],["36",{"_index":655,"name":{},"body":{"john_young":{"position":[[1564,2]]}}}],["4",{"_index":256,"name":{},"body":{"buzz_aldrin":{"position":[[193,1]]},"harrison_schmitt":{"position":[[1509,1]]}}}],["4.3",{"_index":581,"name":{},"body":{"eugene_cernan":{"position":[[3900,3]]},"harrison_schmitt":{"position":[[1742,3]]}}}],["4000",{"_index":721,"name":{},"body":{"neil_armstrong":{"position":[[171,4]]}}}],["42",{"_index":488,"name":{},"body":{"edgar_mitchell":{"position":[[1471,2]]}}}],["45",{"_index":103,"name":{},"body":{"alan_bean":{"position":[[1156,2]]}}}],["46",{"_index":403,"name":{},"body":{"david_scott":{"position":[[1430,2]]}}}],["48",{"_index":568,"name":{},"body":{"eugene_cernan":{"position":[[3210,2]]},"harrison_schmitt":{"position":[[1625,2]]}}}],["5",{"_index":121,"name":{},"body":{"alan_shepard":{"position":[[171,2]]},"buzz_aldrin":{"position":[[339,1]]},"edgar_mitchell":{"position":[[31,2]]}}}],["500,000",{"_index":475,"name":{},"body":{"edgar_mitchell":{"position":[[342,7]]}}}],["51",{"_index":560,"name":{},"body":{"eugene_cernan":{"position":[[3023,2]]},"harrison_schmitt":{"position":[[1437,2]]}}}],["52",{"_index":277,"name":{},"body":{"buzz_aldrin":{"position":[[713,2]]}}}],["53",{"_index":276,"name":{},"body":{"buzz_aldrin":{"position":[[670,2]]},"harrison_schmitt":{"position":[[93,2]]}}}],["54",{"_index":441,"name":{},"body":{"david_scott":{"position":[[2349,2]]},"james_irwin":{"position":[[804,2]]},"john_young":{"position":[[1551,2]]}}}],["59",{"_index":66,"name":{},"body":{"alan_bean":{"position":[[742,2]]}}}],["6",{"_index":540,"name":{},"body":{"eugene_cernan":{"position":[[2290,2],[3094,1],[3599,1]]},"harrison_schmitt":{"position":[[816,2]]},"john_young":{"position":[[2670,1]]}}}],["66",{"_index":440,"name":{},"body":{"david_scott":{"position":[[2336,2]]},"james_irwin":{"position":[[794,2]]}}}],["7",{"_index":124,"name":{},"body":{"alan_shepard":{"position":[[195,1]]},"buzz_aldrin":{"position":[[701,1]]},"david_scott":{"position":[[1938,2]]},"eugene_cernan":{"position":[[860,2]]},"james_irwin":{"position":[[396,2]]}}}],["70",{"_index":700,"name":{},"body":{"john_young":{"position":[[2742,2]]}}}],["71",{"_index":302,"name":{},"body":{"charles_duke":{"position":[[708,2]]}}}],["72",{"_index":507,"name":{},"body":{"eugene_cernan":{"position":[[574,2]]}}}],["76",{"_index":319,"name":{},"body":{"charles_duke":{"position":[[1269,4]]}}}],["8",{"_index":357,"name":{},"body":{"david_scott":{"position":[[172,1]]},"eugene_cernan":{"position":[[1508,1]]},"james_irwin":{"position":[[118,2]]},"john_young":{"position":[[2409,2]]},"neil_armstrong":{"position":[[387,1],[405,1]]}}}],["9",{"_index":15,"name":{},"body":{"alan_bean":{"position":[[141,1]]},"alan_shepard":{"position":[[1381,2],[2104,2]]},"david_scott":{"position":[[528,2],[1682,1]]},"edgar_mitchell":{"position":[[144,1],[485,2],[1165,2]]},"john_young":{"position":[[2357,2]]}}}],["94",{"_index":696,"name":{},"body":{"john_young":{"position":[[2619,2]]}}}],["98",{"_index":676,"name":{},"body":{"john_young":{"position":[[2216,2]]}}}],["aboard",{"_index":569,"name":{},"body":{"eugene_cernan":{"position":[[3321,6]]}}}],["accept",{"_index":750,"name":{},"body":{"pete_conrad":{"position":[[606,6],[908,6]]}}}],["accompani",{"_index":200,"name":{},"body":{"alan_shepard":{"position":[[1397,11]]},"charles_duke":{"position":[[332,11]]},"eugene_cernan":{"position":[[1063,11]]},"harrison_schmitt":{"position":[[868,11]]}}}],["accomplish",{"_index":84,"name":{},"body":{"alan_bean":{"position":[[903,12]]},"charles_duke":{"position":[[1505,12]]},"eugene_cernan":{"position":[[1211,13]]},"james_irwin":{"position":[[2015,12]]},"john_young":{"position":[[342,12],[1951,13]]}}}],["accur",{"_index":531,"name":{},"body":{"eugene_cernan":{"position":[[1908,10]]}}}],["achiev",{"_index":221,"name":{},"body":{"alan_shepard":{"position":[[1825,12]]},"charles_duke":{"position":[[1205,12]]},"david_scott":{"position":[[3113,12]]},"edgar_mitchell":{"position":[[886,12]]},"eugene_cernan":{"position":[[242,8]]},"james_irwin":{"position":[[1589,12]]}}}],["activ",{"_index":149,"name":{},"body":{"alan_shepard":{"position":[[570,10],[1684,9]]},"buzz_aldrin":{"position":[[314,8]]},"charles_duke":{"position":[[927,10],[968,10],[1875,9]]},"david_scott":{"position":[[1365,8],[1594,10],[2485,10],[2877,10],[2936,10]]},"edgar_mitchell":{"position":[[745,9]]},"eugene_cernan":{"position":[[539,11],[2688,9],[3073,10],[3258,10],[3623,8]]},"harrison_schmitt":{"position":[[410,10],[481,10],[1180,9],[1487,10]]},"james_irwin":{"position":[[938,10],[1344,10],[1403,10],[1933,8]]}}}],["actual",{"_index":527,"name":{},"body":{"eugene_cernan":{"position":[[1654,6]]}}}],["adapt",{"_index":505,"name":{},"body":{"eugene_cernan":{"position":[[406,8]]}}}],["addit",{"_index":530,"name":{},"body":{"eugene_cernan":{"position":[[1847,8]]},"harrison_schmitt":{"position":[[167,8]]}}}],["administr",{"_index":733,"name":{},"body":{"neil_armstrong":{"position":[[776,13]]}}}],["admir",{"_index":112,"name":{},"body":{"alan_shepard":{"position":[[5,7]]},"edgar_mitchell":{"position":[[547,7]]}}}],["aeronaut",{"_index":734,"name":{},"body":{"neil_armstrong":{"position":[[794,12],[972,12]]}}}],["agena",{"_index":637,"name":{},"body":{"john_young":{"position":[[627,5],[697,6],[797,6]]}}}],["air",{"_index":597,"name":{},"body":{"harrison_schmitt":{"position":[[139,3]]},"john_young":{"position":[[2273,3],[3147,3]]}}}],["aircraft",{"_index":718,"name":{},"body":{"neil_armstrong":{"position":[[135,9],[228,9]]},"pete_conrad":{"position":[[1112,8]]}}}],["alan",{"_index":0,"name":{"alan_bean":{"position":[[0,4]]},"alan_shepard":{"position":[[0,4]]}},"body":{"alan_bean":{"position":[[0,4]]},"edgar_mitchell":{"position":[[555,4]]}}}],["aldrin",{"_index":251,"name":{"buzz_aldrin":{"position":[[5,6]]}},"body":{"buzz_aldrin":{"position":[[0,6],[263,6],[480,6],[611,6],[638,6]]}}}],["alfr",{"_index":420,"name":{},"body":{"david_scott":{"position":[[1981,6]]},"james_irwin":{"position":[[480,6]]}}}],["allow",{"_index":528,"name":{},"body":{"eugene_cernan":{"position":[[1680,7]]}}}],["along",{"_index":445,"name":{},"body":{"david_scott":{"position":[[2623,5]]},"james_irwin":{"position":[[1076,5]]}}}],["alongsid",{"_index":494,"name":{},"body":{"eugene_cernan":{"position":[[107,9]]}}}],["alsep",{"_index":450,"name":{},"body":{"david_scott":{"position":[[2828,5]]},"james_irwin":{"position":[[1295,5]]}}}],["altitud",{"_index":132,"name":{},"body":{"alan_shepard":{"position":[[325,8]]},"john_young":{"position":[[388,8]]},"pete_conrad":{"position":[[274,8]]}}}],["america",{"_index":543,"name":{},"body":{"eugene_cernan":{"position":[[2420,9],[3332,9]]},"harrison_schmitt":{"position":[[916,9]]}}}],["american",{"_index":95,"name":{},"body":{"alan_bean":{"position":[[1072,8]]},"alan_shepard":{"position":[[132,8]]},"eugene_cernan":{"position":[[438,8],[3986,8]]},"pete_conrad":{"position":[[685,8]]}}}],["analys",{"_index":610,"name":{},"body":{"harrison_schmitt":{"position":[[544,8]]}}}],["antar",{"_index":208,"name":{},"body":{"alan_shepard":{"position":[[1563,10]]},"edgar_mitchell":{"position":[[626,8]]}}}],["apennin",{"_index":430,"name":{},"body":{"david_scott":{"position":[[2179,8],[2662,8]]},"james_irwin":{"position":[[637,8]]}}}],["apinnin",{"_index":618,"name":{},"body":{"james_irwin":{"position":[[1115,8]]}}}],["apollo",{"_index":14,"name":{},"body":{"alan_bean":{"position":[[134,6],[192,6],[1089,6]]},"alan_shepard":{"position":[[1348,6],[1815,6]]},"buzz_aldrin":{"position":[[411,6]]},"charles_duke":{"position":[[124,6],[160,6],[247,6],[295,6],[477,6],[1195,6],[1656,6],[1935,6]]},"david_scott":{"position":[[521,6],[589,6],[760,6],[1675,6],[1841,6],[1910,6],[2062,6],[3103,6],[3257,6],[3761,6]]},"edgar_mitchell":{"position":[[137,6],[183,6],[876,6],[1565,6]]},"eugene_cernan":{"position":[[853,6],[920,6],[1035,6],[1273,6],[1955,6],[2095,6],[2164,6],[3795,6],[4226,6]]},"harrison_schmitt":{"position":[[254,6],[430,6],[590,6],[693,6],[732,6],[1281,6],[1638,6]]},"james_irwin":{"position":[[262,6],[313,6],[370,7],[520,6],[1579,6],[1732,6],[2251,6]]},"john_young":{"position":[[876,6],[1063,6],[2984,6]]},"neil_armstrong":{"position":[[546,6]]},"pete_conrad":{"position":[[322,6]]}}}],["applic",{"_index":165,"name":{},"body":{"alan_shepard":{"position":[[856,10]]}}}],["appoint",{"_index":772,"name":{},"body":{"pete_conrad":{"position":[[1201,9]]}}}],["approxim",{"_index":579,"name":{},"body":{"eugene_cernan":{"position":[[3850,13]]},"harrison_schmitt":{"position":[[1693,13]]},"james_irwin":{"position":[[1225,13]]}}}],["april",{"_index":114,"name":{},"body":{"alan_shepard":{"position":[[72,5]]},"charles_duke":{"position":[[54,5],[306,5]]},"edgar_mitchell":{"position":[[69,5]]},"james_irwin":{"position":[[63,5]]},"john_young":{"position":[[1074,5],[1501,5]]}}}],["area",{"_index":448,"name":{},"body":{"david_scott":{"position":[[2753,4]]},"eugene_cernan":{"position":[[3789,5]]},"james_irwin":{"position":[[1206,4]]}}}],["arizona",{"_index":599,"name":{},"body":{"harrison_schmitt":{"position":[[155,8]]}}}],["armstrong",{"_index":268,"name":{"neil_armstrong":{"position":[[5,9]]}},"body":{"buzz_aldrin":{"position":[[501,9]]},"david_scott":{"position":[[123,9]]},"neil_armstrong":{"position":[[75,9],[288,9],[443,9],[597,9],[715,9]]}}}],["around",{"_index":698,"name":{},"body":{"john_young":{"position":[[2703,6]]}}}],["ascent",{"_index":669,"name":{},"body":{"john_young":{"position":[[2031,7]]}}}],["assign",{"_index":90,"name":{},"body":{"alan_bean":{"position":[[968,11]]},"alan_shepard":{"position":[[773,10]]},"david_scott":{"position":[[1776,11]]},"eugene_cernan":{"position":[[1236,8],[2048,10],[3353,8]]},"neil_armstrong":{"position":[[346,8]]}}}],["assist",{"_index":604,"name":{},"body":{"harrison_schmitt":{"position":[[368,8]]}}}],["associ",{"_index":732,"name":{},"body":{"neil_armstrong":{"position":[[766,9]]}}}],["assur",{"_index":157,"name":{},"body":{"alan_shepard":{"position":[[702,6]]}}}],["astronaut",{"_index":5,"name":{},"body":{"alan_bean":{"position":[[40,10],[102,9],[809,9]]},"alan_shepard":{"position":[[44,10],[469,9],[596,11]]},"buzz_aldrin":{"position":[[37,10]]},"charles_duke":{"position":[[23,10],[93,9]]},"david_scott":{"position":[[36,10]]},"edgar_mitchell":{"position":[[47,9],[110,9]]},"eugene_cernan":{"position":[[35,10]]},"harrison_schmitt":{"position":[[40,9]]},"james_irwin":{"position":[[32,10],[235,9]]},"john_young":{"position":[[44,10]]},"neil_armstrong":{"position":[[313,9]]},"pete_conrad":{"position":[[52,9],[532,9]]}}}],["astronomi",{"_index":704,"name":{},"body":{"john_young":{"position":[[2837,9]]}}}],["atc",{"_index":755,"name":{},"body":{"pete_conrad":{"position":[[736,6],[746,4],[901,3]]}}}],["atlant",{"_index":138,"name":{},"body":{"alan_shepard":{"position":[[405,8]]}}}],["atmospher",{"_index":701,"name":{},"body":{"john_young":{"position":[[2774,11]]}}}],["attitud",{"_index":660,"name":{},"body":{"john_young":{"position":[[1769,8]]}}}],["augment",{"_index":503,"name":{},"body":{"eugene_cernan":{"position":[[381,9]]}}}],["august",{"_index":418,"name":{},"body":{"david_scott":{"position":[[1931,6]]},"james_irwin":{"position":[[389,6]]}}}],["avail",{"_index":159,"name":{},"body":{"alan_shepard":{"position":[[733,9]]},"david_scott":{"position":[[841,9]]}}}],["b",{"_index":423,"name":{},"body":{"david_scott":{"position":[[2031,2]]}}}],["back",{"_index":711,"name":{},"body":{"john_young":{"position":[[3050,4]]}}}],["backup",{"_index":11,"name":{},"body":{"alan_bean":{"position":[[95,6],[997,6]]},"charles_duke":{"position":[[218,6],[1905,6]]},"david_scott":{"position":[[1809,6]]},"edgar_mitchell":{"position":[[153,6],[1535,6]]},"eugene_cernan":{"position":[[789,6],[823,6],[2063,6]]},"james_irwin":{"position":[[279,6]]}}}],["ballist",{"_index":128,"name":{},"body":{"alan_shepard":{"position":[[252,9]]}}}],["base",{"_index":553,"name":{},"body":{"eugene_cernan":{"position":[[2700,4]]},"harrison_schmitt":{"position":[[149,5],[1192,4]]},"john_young":{"position":[[2283,5],[3157,5]]}}}],["bay",{"_index":337,"name":{},"body":{"charles_duke":{"position":[[1570,3]]},"david_scott":{"position":[[3228,3],[3593,3]]},"eugene_cernan":{"position":[[3563,4],[3785,3]]},"james_irwin":{"position":[[1703,3],[2083,3]]},"john_young":{"position":[[1754,3]]}}}],["be",{"_index":118,"name":{},"body":{"alan_shepard":{"position":[[116,5]]},"eugene_cernan":{"position":[[4274,5]]},"neil_armstrong":{"position":[[633,5]]}}}],["bean",{"_index":1,"name":{"alan_bean":{"position":[[5,4]]}},"body":{"alan_bean":{"position":[[5,4],[161,4],[256,4],[636,4],[988,4],[1124,4]]}}}],["becam",{"_index":765,"name":{},"body":{"pete_conrad":{"position":[[1007,6],[1146,6]]}}}],["becom",{"_index":477,"name":{},"body":{"edgar_mitchell":{"position":[[373,8]]}}}],["began",{"_index":498,"name":{},"body":{"eugene_cernan":{"position":[[204,5]]}}}],["benefit",{"_index":671,"name":{},"body":{"john_young":{"position":[[2067,7]]}}}],["blockiest",{"_index":317,"name":{},"body":{"charles_duke":{"position":[[1142,9]]}}}],["bob",{"_index":653,"name":{},"body":{"john_young":{"position":[[1525,3],[2464,3]]}}}],["both",{"_index":756,"name":{},"body":{"pete_conrad":{"position":[[774,4]]}}}],["brewster",{"_index":685,"name":{},"body":{"john_young":{"position":[[2429,8]]}}}],["bring",{"_index":373,"name":{},"body":{"david_scott":{"position":[[437,8]]}}}],["broke",{"_index":611,"name":{},"body":{"harrison_schmitt":{"position":[[1330,5]]}}}],["brought",{"_index":257,"name":{},"body":{"buzz_aldrin":{"position":[[213,7]]},"john_young":{"position":[[3042,7]]}}}],["busi",{"_index":778,"name":{},"body":{"pete_conrad":{"position":[[1332,8]]}}}],["buzz",{"_index":250,"name":{"buzz_aldrin":{"position":[[0,4]]}},"body":{}}],["byron",{"_index":689,"name":{},"body":{"john_young":{"position":[[2518,5]]}}}],["cabl",{"_index":759,"name":{},"body":{"pete_conrad":{"position":[[849,5]]}}}],["california",{"_index":681,"name":{},"body":{"john_young":{"position":[[2289,11],[3163,11]]},"neil_armstrong":{"position":[[63,11]]}}}],["camera",{"_index":327,"name":{},"body":{"charles_duke":{"position":[[1380,7],[1647,8]]},"david_scott":{"position":[[2973,6],[3662,7]]},"eugene_cernan":{"position":[[3469,7],[3714,6]]},"james_irwin":{"position":[[1449,6],[2152,7]]}}}],["capcom",{"_index":283,"name":{},"body":{"charles_duke":{"position":[[149,6]]}}}],["captain",{"_index":17,"name":{},"body":{"alan_bean":{"position":[[153,7],[248,7],[265,7],[532,7],[628,7],[980,7],[1116,7]]},"edgar_mitchell":{"position":[[283,8]]},"eugene_cernan":{"position":[[0,7],[3956,7]]}}}],["carri",{"_index":131,"name":{},"body":{"alan_shepard":{"position":[[307,7]]},"eugene_cernan":{"position":[[3529,7]]}}}],["carrier",{"_index":416,"name":{},"body":{"david_scott":{"position":[[1739,7]]}}}],["casper'",{"_index":335,"name":{},"body":{"charles_duke":{"position":[[1555,10]]}}}],["cassett",{"_index":341,"name":{},"body":{"charles_duke":{"position":[[1606,9]]},"david_scott":{"position":[[3621,9]]},"eugene_cernan":{"position":[[3721,9]]},"james_irwin":{"position":[[2111,9]]}}}],["cayley",{"_index":305,"name":{},"body":{"charles_duke":{"position":[[798,6]]}}}],["center",{"_index":455,"name":{},"body":{"david_scott":{"position":[[3063,6]]},"james_irwin":{"position":[[1539,6]]},"neil_armstrong":{"position":[[46,7]]}}}],["cernan",{"_index":490,"name":{"eugene_cernan":{"position":[[7,6]]}},"body":{"eugene_cernan":{"position":[[8,6],[419,7],[759,6],[2669,6],[3229,6],[3964,6]]},"harrison_schmitt":{"position":[[970,6],[1173,6]]},"john_young":{"position":[[909,6]]}}}],["cernan'",{"_index":535,"name":{},"body":{"eugene_cernan":{"position":[[2034,8]]}}}],["challeng",{"_index":544,"name":{},"body":{"eugene_cernan":{"position":[[2451,12],[2573,12]]},"harrison_schmitt":{"position":[[947,12],[1056,12]]}}}],["chang",{"_index":629,"name":{},"body":{"john_young":{"position":[[372,6]]}}}],["charl",{"_index":278,"name":{"charles_duke":{"position":[[0,7]]}},"body":{}}],["charli",{"_index":646,"name":{},"body":{"john_young":{"position":[[1184,7]]}}}],["chief",{"_index":142,"name":{},"body":{"alan_shepard":{"position":[[456,5]]},"pete_conrad":{"position":[[659,5]]}}}],["circular",{"_index":500,"name":{},"body":{"eugene_cernan":{"position":[[253,8]]}}}],["circumfer",{"_index":585,"name":{},"body":{"eugene_cernan":{"position":[[4038,13]]}}}],["clock",{"_index":699,"name":{},"body":{"john_young":{"position":[[2714,6]]}}}],["close",{"_index":259,"name":{},"body":{"buzz_aldrin":{"position":[[256,6]]},"john_young":{"position":[[667,5]]}}}],["coast",{"_index":329,"name":{},"body":{"charles_duke":{"position":[[1454,5]]},"david_scott":{"position":[[3505,6]]},"eugene_cernan":{"position":[[1428,6],[3650,5]]},"james_irwin":{"position":[[1988,6]]}}}],["collect",{"_index":216,"name":{},"body":{"alan_shepard":{"position":[[1743,9]]},"charles_duke":{"position":[[1024,10]]},"david_scott":{"position":[[2762,9]]},"edgar_mitchell":{"position":[[804,9]]},"james_irwin":{"position":[[1215,9]]},"john_young":{"position":[[1293,9]]}}}],["collin",{"_index":635,"name":{},"body":{"john_young":{"position":[[562,8],[709,7]]}}}],["colonel",{"_index":80,"name":{},"body":{"alan_bean":{"position":[[868,7]]},"edgar_mitchell":{"position":[[572,7]]},"james_irwin":{"position":[[0,7]]}}}],["color",{"_index":239,"name":{},"body":{"alan_shepard":{"position":[[2201,7]]},"edgar_mitchell":{"position":[[1262,5]]},"james_irwin":{"position":[[1432,5]]}}}],["columbia",{"_index":657,"name":{},"body":{"john_young":{"position":[[1681,8],[1977,8],[2106,8],[3075,8]]}}}],["command",{"_index":56,"name":{},"body":{"alan_bean":{"position":[[656,9],[1015,9]]},"alan_shepard":{"position":[[1335,9],[1466,7]]},"buzz_aldrin":{"position":[[108,7]]},"charles_duke":{"position":[[415,10],[453,8],[1421,7]]},"david_scott":{"position":[[104,7],[496,7],[1545,7],[1650,7],[1827,9],[1897,9],[1998,8],[3472,7]]},"eugene_cernan":{"position":[[120,7],[1153,10],[1182,10],[2081,9],[2151,9],[2405,7],[2482,8],[3544,7],[4183,9]]},"harrison_schmitt":{"position":[[901,7],[989,10],[1017,8]]},"james_irwin":{"position":[[87,9],[466,9],[498,7],[1955,7]]},"john_young":{"position":[[542,10],[852,7],[1151,10],[1442,9],[2340,9]]},"neil_armstrong":{"position":[[358,7],[532,9]]},"pete_conrad":{"position":[[215,9],[309,9],[404,9]]}}}],["command/servic",{"_index":400,"name":{},"body":{"david_scott":{"position":[[1219,15]]},"eugene_cernan":{"position":[[1355,15]]}}}],["commenc",{"_index":301,"name":{},"body":{"charles_duke":{"position":[[655,9]]},"eugene_cernan":{"position":[[2250,9]]},"harrison_schmitt":{"position":[[776,9]]}}}],["commerci",{"_index":767,"name":{},"body":{"pete_conrad":{"position":[[1070,10]]}}}],["commun",{"_index":753,"name":{},"body":{"pete_conrad":{"position":[[709,14]]}}}],["compani",{"_index":483,"name":{},"body":{"edgar_mitchell":{"position":[[513,7]]},"pete_conrad":{"position":[[1121,8]]}}}],["companion",{"_index":419,"name":{},"body":{"david_scott":{"position":[[1951,10]]},"james_irwin":{"position":[[409,10]]}}}],["compat",{"_index":664,"name":{},"body":{"john_young":{"position":[[1862,14]]}}}],["complet",{"_index":271,"name":{},"body":{"buzz_aldrin":{"position":[[552,10]]},"charles_duke":{"position":[[1765,10]]},"david_scott":{"position":[[662,8],[996,10],[1417,10],[1501,9]]},"edgar_mitchell":{"position":[[1395,10]]},"eugene_cernan":{"position":[[2735,9],[3342,10],[3579,9],[3735,10]]},"harrison_schmitt":{"position":[[81,9],[1230,10]]},"john_young":{"position":[[274,8],[581,9],[966,9],[2605,9]]}}}],["comprehens",{"_index":378,"name":{},"body":{"david_scott":{"position":[[673,13]]},"eugene_cernan":{"position":[[958,13]]}}}],["comput",{"_index":633,"name":{},"body":{"john_young":{"position":[[467,8]]}}}],["conclud",{"_index":344,"name":{},"body":{"charles_duke":{"position":[[1666,9]]},"david_scott":{"position":[[3771,9]]},"eugene_cernan":{"position":[[2343,9]]},"harrison_schmitt":{"position":[[829,9]]},"james_irwin":{"position":[[2261,9]]}}}],["condit",{"_index":467,"name":{},"body":{"david_scott":{"position":[[3724,9]]},"james_irwin":{"position":[[2214,9]]}}}],["conduct",{"_index":182,"name":{},"body":{"alan_shepard":{"position":[[1128,7],[2295,9]]},"david_scott":{"position":[[2496,9]]},"edgar_mitchell":{"position":[[1354,9]]},"eugene_cernan":{"position":[[3248,9]]},"james_irwin":{"position":[[949,9]]}}}],["configur",{"_index":382,"name":{},"body":{"david_scott":{"position":[[749,10]]},"eugene_cernan":{"position":[[1395,13]]}}}],["confirm",{"_index":401,"name":{},"body":{"david_scott":{"position":[[1291,9]]},"eugene_cernan":{"position":[[1283,9]]}}}],["conrad",{"_index":28,"name":{"pete_conrad":{"position":[[5,6]]}},"body":{"alan_bean":{"position":[[278,6]]},"pete_conrad":{"position":[[26,6],[243,6],[569,6],[1134,6]]}}}],["conrad'",{"_index":747,"name":{},"body":{"pete_conrad":{"position":[[367,8]]}}}],["construct",{"_index":166,"name":{},"body":{"alan_shepard":{"position":[[882,13]]}}}],["consult",{"_index":761,"name":{},"body":{"pete_conrad":{"position":[[950,10]]}}}],["control",{"_index":148,"name":{},"body":{"alan_shepard":{"position":[[555,7]]},"david_scott":{"position":[[3018,11],[3055,7]]},"eugene_cernan":{"position":[[3458,7]]},"james_irwin":{"position":[[1494,11],[1531,7]]}}}],["coordin",{"_index":146,"name":{},"body":{"alan_shepard":{"position":[[525,13]]},"neil_armstrong":{"position":[[888,12]]}}}],["corp",{"_index":78,"name":{},"body":{"alan_bean":{"position":[[851,5]]}}}],["corpor",{"_index":754,"name":{},"body":{"pete_conrad":{"position":[[724,11],[982,12],[1375,12]]}}}],["correct",{"_index":189,"name":{},"body":{"alan_shepard":{"position":[[1238,10]]}}}],["cosmic",{"_index":321,"name":{},"body":{"charles_duke":{"position":[[1293,6]]}}}],["count",{"_index":623,"name":{},"body":{"john_young":{"position":[[132,8]]}}}],["cours",{"_index":595,"name":{},"body":{"harrison_schmitt":{"position":[[101,6]]}}}],["craft",{"_index":728,"name":{},"body":{"neil_armstrong":{"position":[[663,5]]}}}],["crater",{"_index":556,"name":{},"body":{"eugene_cernan":{"position":[[2794,7]]}}}],["crew",{"_index":93,"name":{},"body":{"alan_bean":{"position":[[1053,4]]},"alan_shepard":{"position":[[787,4]]},"charles_duke":{"position":[[111,4]]},"david_scott":{"position":[[291,4],[1264,4],[1332,4]]},"edgar_mitchell":{"position":[[128,4]]},"eugene_cernan":{"position":[[294,4]]},"harrison_schmitt":{"position":[[268,5]]},"james_irwin":{"position":[[82,4],[253,4]]},"john_young":{"position":[[2676,4]]}}}],["crippen",{"_index":654,"name":{},"body":{"john_young":{"position":[[1529,7]]}}}],["critic",{"_index":391,"name":{},"body":{"david_scott":{"position":[[1012,8]]},"eugene_cernan":{"position":[[1688,8]]}}}],["csm",{"_index":248,"name":{},"body":{"alan_shepard":{"position":[[2312,3]]},"edgar_mitchell":{"position":[[1371,3]]}}}],["cst",{"_index":538,"name":{},"body":{"eugene_cernan":{"position":[[2274,6]]},"harrison_schmitt":{"position":[[800,6]]}}}],["d",{"_index":205,"name":{},"body":{"alan_shepard":{"position":[[1498,2]]}}}],["d.c",{"_index":737,"name":{},"body":{"neil_armstrong":{"position":[[838,4]]}}}],["data",{"_index":708,"name":{},"body":{"john_young":{"position":[[2957,4]]}}}],["dave",{"_index":404,"name":{},"body":{"david_scott":{"position":[[1490,4]]}}}],["david",{"_index":354,"name":{"david_scott":{"position":[[0,5]]}},"body":{"james_irwin":{"position":[[439,5]]}}}],["day",{"_index":67,"name":{},"body":{"alan_bean":{"position":[[745,4]]},"buzz_aldrin":{"position":[[195,3]]},"david_scott":{"position":[[227,4],[788,3]]},"edgar_mitchell":{"position":[[462,4]]},"eugene_cernan":{"position":[[187,3],[2870,5]]},"harrison_schmitt":{"position":[[1250,4]]},"john_young":{"position":[[2661,4]]}}}],["decemb",{"_index":539,"name":{},"body":{"eugene_cernan":{"position":[[2281,8],[2356,8]]},"harrison_schmitt":{"position":[[807,8],[842,8]]},"john_young":{"position":[[2400,8]]},"pete_conrad":{"position":[[470,8]]}}}],["demonstr",{"_index":368,"name":{},"body":{"david_scott":{"position":[[364,12],[1274,12]]},"eugene_cernan":{"position":[[1859,13]]}}}],["deploy",{"_index":37,"name":{},"body":{"alan_bean":{"position":[[391,8]]},"alan_shepard":{"position":[[1671,8]]},"charles_duke":{"position":[[1313,8]]},"david_scott":{"position":[[2816,8]]},"edgar_mitchell":{"position":[[732,8]]},"james_irwin":{"position":[[1283,8]]}}}],["deputi",{"_index":731,"name":{},"body":{"neil_armstrong":{"position":[[759,6]]}}}],["descart",{"_index":298,"name":{},"body":{"charles_duke":{"position":[[592,9]]},"john_young":{"position":[[1277,10]]}}}],["descent",{"_index":523,"name":{},"body":{"eugene_cernan":{"position":[[1490,7]]}}}],["design",{"_index":141,"name":{},"body":{"alan_shepard":{"position":[[445,10],[874,7]]},"david_scott":{"position":[[1798,10]]},"edgar_mitchell":{"position":[[1512,10]]}}}],["detail",{"_index":600,"name":{},"body":{"harrison_schmitt":{"position":[[279,8]]}}}],["detector",{"_index":323,"name":{},"body":{"charles_duke":{"position":[[1304,8]]},"john_young":{"position":[[778,8]]}}}],["develop",{"_index":152,"name":{},"body":{"alan_shepard":{"position":[[637,11]]},"pete_conrad":{"position":[[830,11],[1341,11]]}}}],["devic",{"_index":461,"name":{},"body":{"david_scott":{"position":[[3361,6]]},"eugene_cernan":{"position":[[1785,7]]},"james_irwin":{"position":[[1836,7]]}}}],["differ",{"_index":502,"name":{},"body":{"eugene_cernan":{"position":[[310,9]]},"neil_armstrong":{"position":[[208,9]]}}}],["disord",{"_index":193,"name":{},"body":{"alan_shepard":{"position":[[1274,9]]}}}],["distanc",{"_index":230,"name":{},"body":{"alan_shepard":{"position":[[1944,8]]},"david_scott":{"position":[[1176,8],[3284,8]]},"edgar_mitchell":{"position":[[1005,8]]},"james_irwin":{"position":[[1759,8]]}}}],["distinct",{"_index":117,"name":{},"body":{"alan_shepard":{"position":[[101,11]]},"eugene_cernan":{"position":[[4259,11]]},"neil_armstrong":{"position":[[618,11]]}}}],["dock",{"_index":366,"name":{},"body":{"david_scott":{"position":[[327,7],[1070,8]]},"eugene_cernan":{"position":[[398,7],[1825,7]]},"neil_armstrong":{"position":[[484,7]]}}}],["door",{"_index":659,"name":{},"body":{"john_young":{"position":[[1758,6]]}}}],["dougla",{"_index":763,"name":{},"body":{"pete_conrad":{"position":[[974,7],[1104,7],[1367,7]]}}}],["down",{"_index":137,"name":{},"body":{"alan_shepard":{"position":[[396,4]]},"david_scott":{"position":[[1693,4]]}}}],["dr",{"_index":73,"name":{},"body":{"alan_bean":{"position":[[819,3]]},"edgar_mitchell":{"position":[[246,3]]},"harrison_schmitt":{"position":[[0,3],[640,3]]}}}],["dri",{"_index":678,"name":{},"body":{"john_young":{"position":[[2250,3]]}}}],["drove",{"_index":648,"name":{},"body":{"john_young":{"position":[[1327,5]]}}}],["dual",{"_index":636,"name":{},"body":{"john_young":{"position":[[593,4]]}}}],["due",{"_index":362,"name":{},"body":{"david_scott":{"position":[[253,3]]}}}],["duke",{"_index":279,"name":{"charles_duke":{"position":[[8,4]]}},"body":{"charles_duke":{"position":[[0,4],[258,4],[640,4],[1803,4],[1885,4]]},"john_young":{"position":[[1192,5],[1208,4]]}}}],["dure",{"_index":247,"name":{},"body":{"alan_shepard":{"position":[[2305,6]]},"charles_duke":{"position":[[1436,6]]},"david_scott":{"position":[[1470,6],[2506,6],[3487,6],[3548,6]]},"edgar_mitchell":{"position":[[1364,6]]},"eugene_cernan":{"position":[[173,6],[1409,6]]},"james_irwin":{"position":[[959,6],[1970,6],[2038,6]]},"john_young":{"position":[[325,6],[1624,6],[2024,6]]}}}],["each",{"_index":184,"name":{},"body":{"alan_shepard":{"position":[[1164,4]]},"charles_duke":{"position":[[873,4]]},"david_scott":{"position":[[2462,4]]},"james_irwin":{"position":[[915,4]]}}}],["ear",{"_index":192,"name":{},"body":{"alan_shepard":{"position":[[1270,3]]}}}],["earli",{"_index":361,"name":{},"body":{"david_scott":{"position":[[247,5]]}}}],["earth",{"_index":109,"name":{},"body":{"alan_bean":{"position":[[1246,5]]},"alan_shepard":{"position":[[1802,6]]},"david_scott":{"position":[[687,5],[3169,5]]},"edgar_mitchell":{"position":[[863,6]]},"james_irwin":{"position":[[1644,5]]},"john_young":{"position":[[109,6],[2795,5]]}}}],["edg",{"_index":434,"name":{},"body":{"david_scott":{"position":[[2233,4]]},"eugene_cernan":{"position":[[2643,4]]},"harrison_schmitt":{"position":[[1135,4]]},"james_irwin":{"position":[[691,4]]}}}],["edgar",{"_index":204,"name":{"edgar_mitchell":{"position":[[0,5]]}},"body":{"alan_shepard":{"position":[[1492,5]]},"edgar_mitchell":{"position":[[250,5]]}}}],["edward",{"_index":680,"name":{},"body":{"john_young":{"position":[[2265,7],[3139,7]]},"neil_armstrong":{"position":[[54,8]]}}}],["effect",{"_index":154,"name":{},"body":{"alan_shepard":{"position":[[671,9]]},"eugene_cernan":{"position":[[334,6]]}}}],["embark",{"_index":472,"name":{},"body":{"edgar_mitchell":{"position":[[292,8]]}}}],["emplac",{"_index":309,"name":{},"body":{"charles_duke":{"position":[[952,11]]},"david_scott":{"position":[[2861,11]]},"james_irwin":{"position":[[1328,11]]}}}],["employ",{"_index":524,"name":{},"body":{"eugene_cernan":{"position":[[1576,9]]}}}],["encount",{"_index":318,"name":{},"body":{"charles_duke":{"position":[[1164,11]]}}}],["end",{"_index":506,"name":{},"body":{"eugene_cernan":{"position":[[562,5],[3805,5]]},"harrison_schmitt":{"position":[[1648,5]]},"john_young":{"position":[[283,3],[290,3]]}}}],["endeavour'",{"_index":464,"name":{},"body":{"david_scott":{"position":[[3575,13]]},"james_irwin":{"position":[[2065,13]]}}}],["endur",{"_index":741,"name":{},"body":{"pete_conrad":{"position":[[130,9]]}}}],["engin",{"_index":173,"name":{},"body":{"alan_shepard":{"position":[[997,11]]}}}],["entri",{"_index":510,"name":{},"body":{"eugene_cernan":{"position":[[616,5]]},"john_young":{"position":[[1653,6],[2053,5]]}}}],["equip",{"_index":170,"name":{},"body":{"alan_shepard":{"position":[[945,10],[1713,9],[1868,9]]},"charles_duke":{"position":[[993,9]]},"david_scott":{"position":[[1389,10],[2613,9],[3737,9]]},"edgar_mitchell":{"position":[[774,9],[929,9]]},"eugene_cernan":{"position":[[3519,9],[3775,9]]},"james_irwin":{"position":[[1066,9],[2227,9]]},"john_young":{"position":[[1231,9]]}}}],["establish",{"_index":260,"name":{},"body":{"buzz_aldrin":{"position":[[270,11]]},"eugene_cernan":{"position":[[2906,11]]},"pete_conrad":{"position":[[108,11]]}}}],["estim",{"_index":562,"name":{},"body":{"eugene_cernan":{"position":[[3138,9]]},"harrison_schmitt":{"position":[[1553,9]]}}}],["eugen",{"_index":489,"name":{"eugene_cernan":{"position":[[0,6]]}},"body":{"harrison_schmitt":{"position":[[963,6]]}}}],["eva",{"_index":108,"name":{},"body":{"alan_bean":{"position":[[1222,4]]},"alan_shepard":{"position":[[2100,3]]},"buzz_aldrin":{"position":[[323,6],[592,4],[738,4]]},"charles_duke":{"position":[[1410,3]]},"david_scott":{"position":[[1440,3],[1529,3],[3459,5]]},"edgar_mitchell":{"position":[[1161,3]]},"james_irwin":{"position":[[1942,5]]}}}],["evalu",{"_index":164,"name":{},"body":{"alan_shepard":{"position":[[844,11]]},"charles_duke":{"position":[[1090,10]]},"david_scott":{"position":[[981,10]]},"eugene_cernan":{"position":[[1697,11]]},"john_young":{"position":[[1699,10]]}}}],["evan",{"_index":546,"name":{},"body":{"eugene_cernan":{"position":[[2476,5],[3291,5],[3568,5]]},"harrison_schmitt":{"position":[[1011,5]]}}}],["exceed",{"_index":399,"name":{},"body":{"david_scott":{"position":[[1191,8]]}}}],["excurs",{"_index":308,"name":{},"body":{"charles_duke":{"position":[[833,10]]},"david_scott":{"position":[[2528,10],[3561,10]]},"eugene_cernan":{"position":[[2769,10]]},"james_irwin":{"position":[[981,10],[2051,10]]}}}],["exist",{"_index":757,"name":{},"body":{"pete_conrad":{"position":[[796,8]]}}}],["expedit",{"_index":293,"name":{},"body":{"charles_duke":{"position":[[512,10]]}}}],["experi",{"_index":39,"name":{},"body":{"alan_bean":{"position":[[422,12]]},"alan_shepard":{"position":[[1148,11],[1727,11]]},"charles_duke":{"position":[[1007,12]]},"david_scott":{"position":[[2899,12]]},"edgar_mitchell":{"position":[[788,11]]},"james_irwin":{"position":[[1366,12]]},"john_young":{"position":[[2745,11]]}}}],["explor",{"_index":35,"name":{},"body":{"alan_bean":{"position":[[363,8]]},"david_scott":{"position":[[2143,7]]},"harrison_schmitt":{"position":[[1258,12]]},"james_irwin":{"position":[[601,7]]},"john_young":{"position":[[1105,11],[1245,8]]}}}],["extens",{"_index":244,"name":{},"body":{"alan_shepard":{"position":[[2262,9]]},"edgar_mitchell":{"position":[[1321,9]]}}}],["exterior",{"_index":411,"name":{},"body":{"david_scott":{"position":[[1665,9]]}}}],["extra",{"_index":352,"name":{},"body":{"charles_duke":{"position":[[1859,5]]}}}],["extravehicular",{"_index":261,"name":{},"body":{"buzz_aldrin":{"position":[[299,14]]},"charles_duke":{"position":[[912,14]]},"david_scott":{"position":[[1350,14],[2470,14],[3444,14]]},"eugene_cernan":{"position":[[524,14],[3058,14],[3608,14]]},"harrison_schmitt":{"position":[[1472,14]]},"james_irwin":{"position":[[923,14],[1918,14]]},"john_young":{"position":[[724,14]]}}}],["facilit",{"_index":175,"name":{},"body":{"alan_shepard":{"position":[[1025,10]]},"harrison_schmitt":{"position":[[1211,12]]}}}],["falcon",{"_index":439,"name":{},"body":{"david_scott":{"position":[[2292,9]]},"james_irwin":{"position":[[750,9]]}}}],["far",{"_index":325,"name":{},"body":{"charles_duke":{"position":[[1373,3]]}}}],["feasibl",{"_index":179,"name":{},"body":{"alan_shepard":{"position":[[1077,8]]},"david_scott":{"position":[[1317,11]]}}}],["feat",{"_index":332,"name":{},"body":{"charles_duke":{"position":[[1496,4]]},"david_scott":{"position":[[3523,4]]},"james_irwin":{"position":[[2006,4]]}}}],["featur",{"_index":297,"name":{},"body":{"charles_duke":{"position":[[576,8]]},"harrison_schmitt":{"position":[[334,7]]}}}],["februari",{"_index":198,"name":{},"body":{"alan_shepard":{"position":[[1372,8]]},"edgar_mitchell":{"position":[[476,8]]}}}],["field",{"_index":533,"name":{},"body":{"eugene_cernan":{"position":[[1947,7]]},"john_young":{"position":[[2764,6]]}}}],["fifth",{"_index":287,"name":{},"body":{"charles_duke":{"position":[[351,5]]},"john_young":{"position":[[1411,5]]}}}],["film",{"_index":340,"name":{},"body":{"charles_duke":{"position":[[1601,4]]},"david_scott":{"position":[[3616,4]]},"james_irwin":{"position":[[2106,4]]}}}],["final",{"_index":525,"name":{},"body":{"eugene_cernan":{"position":[[1598,5]]},"pete_conrad":{"position":[[376,5]]}}}],["finish",{"_index":614,"name":{},"body":{"james_irwin":{"position":[[134,8]]}}}],["first",{"_index":41,"name":{},"body":{"alan_bean":{"position":[[453,5]]},"alan_shepard":{"position":[[126,5],[1848,5],[2130,5],[2188,5],[2256,5]]},"buzz_aldrin":{"position":[[444,5]]},"charles_duke":{"position":[[175,5],[495,5],[1287,5],[1340,5],[1783,5]]},"david_scott":{"position":[[310,5],[653,5],[2124,5],[3193,5],[3321,5],[3390,5],[3438,5]]},"edgar_mitchell":{"position":[[909,5],[1191,5],[1249,5],[1315,5],[1410,5]]},"eugene_cernan":{"position":[[952,5],[2308,5]]},"harrison_schmitt":{"position":[[614,5]]},"james_irwin":{"position":[[147,5],[582,5],[1668,5],[1796,5],[1864,5],[1912,5]]},"john_young":{"position":[[65,5],[164,5],[215,5],[359,5],[415,5],[461,5],[1466,5],[1994,5],[2128,5],[2364,5]]},"neil_armstrong":{"position":[[467,5],[561,5],[643,5],[685,5]]},"pete_conrad":{"position":[[75,5],[432,5]]}}}],["flew",{"_index":638,"name":{},"body":{"john_young":{"position":[[662,4]]},"neil_armstrong":{"position":[[189,4]]}}}],["fli",{"_index":620,"name":{},"body":{"john_young":{"position":[[81,3]]}}}],["flight",{"_index":32,"name":{},"body":{"alan_bean":{"position":[[328,6],[787,6],[1046,6]]},"alan_shepard":{"position":[[284,6],[294,6],[713,6],[818,8],[1169,7],[1201,6],[1314,6]]},"buzz_aldrin":{"position":[[199,7]]},"charles_duke":{"position":[[134,7],[1403,6],[1795,7]]},"david_scott":{"position":[[185,6],[575,6],[792,6],[1876,6],[1969,6]]},"edgar_mitchell":{"position":[[1422,7]]},"eugene_cernan":{"position":[[191,6],[555,6],[883,7],[1017,6],[2130,6],[2955,6],[3005,6],[3676,7]]},"harrison_schmitt":{"position":[[111,6],[212,8],[261,6],[1368,7],[1418,6]]},"james_irwin":{"position":[[323,7],[427,6]]},"john_young":{"position":[[170,6],[817,7],[1055,7],[1417,6],[1472,6],[1923,6],[2315,6],[2629,6]]},"neil_armstrong":{"position":[[30,6]]},"pete_conrad":{"position":[[81,6]]}}}],["flown",{"_index":459,"name":{},"body":{"david_scott":{"position":[[3232,5]]},"eugene_cernan":{"position":[[4140,5]]},"james_irwin":{"position":[[1707,5]]}}}],["follow",{"_index":188,"name":{},"body":{"alan_shepard":{"position":[[1228,9]]},"buzz_aldrin":{"position":[[487,8]]}}}],["footprint",{"_index":592,"name":{},"body":{"eugene_cernan":{"position":[[4310,10]]}}}],["forc",{"_index":598,"name":{},"body":{"harrison_schmitt":{"position":[[143,5]]},"john_young":{"position":[[2277,5],[3151,5]]}}}],["forecast",{"_index":87,"name":{},"body":{"alan_bean":{"position":[[940,8]]}}}],["form",{"_index":582,"name":{},"body":{"eugene_cernan":{"position":[[3910,4]]}}}],["format",{"_index":639,"name":{},"body":{"john_young":{"position":[[673,9]]}}}],["formul",{"_index":178,"name":{},"body":{"alan_shepard":{"position":[[1062,11]]}}}],["four",{"_index":414,"name":{},"body":{"david_scott":{"position":[[1708,4]]}}}],["fourteen",{"_index":491,"name":{},"body":{"eugene_cernan":{"position":[[26,8]]}}}],["fourth",{"_index":425,"name":{},"body":{"david_scott":{"position":[[2080,6]]},"james_irwin":{"position":[[538,6]]},"john_young":{"position":[[1042,6]]}}}],["fra",{"_index":211,"name":{},"body":{"alan_shepard":{"position":[[1607,3]]},"edgar_mitchell":{"position":[[668,3]]}}}],["freedom",{"_index":123,"name":{},"body":{"alan_shepard":{"position":[[187,7]]}}}],["full",{"_index":186,"name":{},"body":{"alan_shepard":{"position":[[1196,4]]}}}],["fulli",{"_index":381,"name":{},"body":{"david_scott":{"position":[[742,6]]}}}],["furnish",{"_index":163,"name":{},"body":{"alan_shepard":{"position":[[827,10]]}}}],["futur",{"_index":54,"name":{},"body":{"alan_bean":{"position":[[611,6]]},"eugene_cernan":{"position":[[2017,6]]},"harrison_schmitt":{"position":[[192,6]]}}}],["gain",{"_index":727,"name":{},"body":{"neil_armstrong":{"position":[[607,6]]}}}],["garriott",{"_index":76,"name":{},"body":{"alan_bean":{"position":[[831,8]]},"john_young":{"position":[[2484,9]]}}}],["gemini",{"_index":12,"name":{},"body":{"alan_bean":{"position":[[120,6]]},"buzz_aldrin":{"position":[[167,6],[225,6]]},"david_scott":{"position":[[165,6]]},"eugene_cernan":{"position":[[154,6],[638,6],[806,6]]},"john_young":{"position":[[201,6],[228,6],[306,6],[503,6]]},"neil_armstrong":{"position":[[380,6],[398,6]]},"pete_conrad":{"position":[[92,6],[228,6]]}}}],["gene",{"_index":642,"name":{},"body":{"john_young":{"position":[[904,4]]}}}],["gener",{"_index":44,"name":{},"body":{"alan_bean":{"position":[[473,9]]},"david_scott":{"position":[[3716,7]]},"james_irwin":{"position":[[2206,7]]}}}],["geolog",{"_index":573,"name":{},"body":{"eugene_cernan":{"position":[[3383,10]]},"harrison_schmitt":{"position":[[502,9]]}}}],["geologi",{"_index":602,"name":{},"body":{"harrison_schmitt":{"position":[[321,8]]},"john_young":{"position":[[1384,7]]}}}],["germani",{"_index":695,"name":{},"body":{"john_young":{"position":[[2571,8]]}}}],["glider",{"_index":726,"name":{},"body":{"neil_armstrong":{"position":[[279,8]]}}}],["goal",{"_index":88,"name":{},"body":{"alan_bean":{"position":[[949,6]]}}}],["gordon",{"_index":49,"name":{},"body":{"alan_bean":{"position":[[548,6]]}}}],["gravit",{"_index":532,"name":{},"body":{"eugene_cernan":{"position":[[1933,13]]}}}],["great",{"_index":369,"name":{},"body":{"david_scott":{"position":[[377,5]]}}}],["grissom",{"_index":626,"name":{},"body":{"john_young":{"position":[[190,7]]}}}],["ground",{"_index":454,"name":{},"body":{"david_scott":{"position":[[3011,6]]},"james_irwin":{"position":[[1487,6]]}}}],["group",{"_index":4,"name":{},"body":{"alan_bean":{"position":[[31,5]]},"buzz_aldrin":{"position":[[28,5]]},"david_scott":{"position":[[27,5]]},"edgar_mitchell":{"position":[[25,5]]}}}],["gu",{"_index":625,"name":{},"body":{"john_young":{"position":[[186,3],[338,3]]}}}],["guadalcan",{"_index":417,"name":{},"body":{"david_scott":{"position":[[1751,12]]}}}],["guidanc",{"_index":662,"name":{},"body":{"john_young":{"position":[[1812,8]]}}}],["h",{"_index":548,"name":{},"body":{"eugene_cernan":{"position":[[2518,2]]}}}],["hadley",{"_index":428,"name":{},"body":{"david_scott":{"position":[[2162,6],[2641,6]]},"james_irwin":{"position":[[620,6],[1094,6]]}}}],["handheld",{"_index":574,"name":{},"body":{"eugene_cernan":{"position":[[3408,8]]}}}],["harrison",{"_index":547,"name":{"harrison_schmitt":{"position":[[0,8]]}},"body":{"eugene_cernan":{"position":[[2509,8]]}}}],["hatch",{"_index":408,"name":{},"body":{"david_scott":{"position":[[1560,5]]}}}],["have",{"_index":583,"name":{},"body":{"eugene_cernan":{"position":[[4019,6]]}}}],["headquart",{"_index":735,"name":{},"body":{"neil_armstrong":{"position":[[812,13]]}}}],["held",{"_index":730,"name":{},"body":{"neil_armstrong":{"position":[[738,4]]}}}],["helicopt",{"_index":415,"name":{},"body":{"david_scott":{"position":[[1728,10]]},"neil_armstrong":{"position":[[263,11]]}}}],["help",{"_index":744,"name":{},"body":{"pete_conrad":{"position":[[250,6]]}}}],["high",{"_index":716,"name":{},"body":{"neil_armstrong":{"position":[[124,4]]}}}],["highland",{"_index":300,"name":{},"body":{"charles_duke":{"position":[[629,10]]},"john_young":{"position":[[1264,9]]}}}],["highli",{"_index":554,"name":{},"body":{"eugene_cernan":{"position":[[2751,6],[3487,6]]}}}],["highlight",{"_index":390,"name":{},"body":{"david_scott":{"position":[[963,9]]}}}],["hilli",{"_index":209,"name":{},"body":{"alan_shepard":{"position":[[1594,5]]},"edgar_mitchell":{"position":[[655,5]]}}}],["histor",{"_index":480,"name":{},"body":{"edgar_mitchell":{"position":[[422,8]]}}}],["hold",{"_index":116,"name":{},"body":{"alan_shepard":{"position":[[91,5]]}}}],["home",{"_index":558,"name":{},"body":{"eugene_cernan":{"position":[[2850,4]]}}}],["hour",{"_index":102,"name":{},"body":{"alan_bean":{"position":[[1146,5],[1187,5]]},"alan_shepard":{"position":[[2070,7],[2107,5]]},"buzz_aldrin":{"position":[[345,5],[567,4],[660,5],[703,5]]},"charles_duke":{"position":[[711,5],[888,5],[1463,4],[1823,5],[1850,5]]},"david_scott":{"position":[[1515,4],[2339,5],[2441,5]]},"edgar_mitchell":{"position":[[1131,7],[1168,5],[1461,5]]},"eugene_cernan":{"position":[[476,5],[577,5],[3017,5],[3088,5],[3204,5],[3593,5],[4099,6]]},"harrison_schmitt":{"position":[[1430,6],[1502,6],[1618,6]]},"james_irwin":{"position":[[797,6],[894,5]]},"john_young":{"position":[[1558,5],[2691,4]]},"pete_conrad":{"position":[[196,5]]}}}],["hous",{"_index":468,"name":{},"body":{"david_scott":{"position":[[3747,6]]},"james_irwin":{"position":[[2237,6]]}}}],["houston",{"_index":456,"name":{},"body":{"david_scott":{"position":[[3081,8]]},"james_irwin":{"position":[[1557,8]]}}}],["hundr",{"_index":665,"name":{},"body":{"john_young":{"position":[[1881,7]]}}}],["ii",{"_index":58,"name":{},"body":{"alan_bean":{"position":[[684,2],[900,2]]},"charles_duke":{"position":[[450,2]]},"pete_conrad":{"position":[[424,3]]}}}],["imbrium",{"_index":436,"name":{},"body":{"david_scott":{"position":[[2250,7]]},"james_irwin":{"position":[[708,7]]}}}],["implement",{"_index":153,"name":{},"body":{"alan_shepard":{"position":[[653,14]]}}}],["includ",{"_index":151,"name":{},"body":{"alan_shepard":{"position":[[613,8],[1838,9]]},"charles_duke":{"position":[[1218,8]]},"david_scott":{"position":[[3126,8]]},"edgar_mitchell":{"position":[[899,9]]},"eugene_cernan":{"position":[[2967,8]]},"harrison_schmitt":{"position":[[1380,8]]},"james_irwin":{"position":[[1602,9]]},"john_young":{"position":[[1690,8],[1732,9]]},"neil_armstrong":{"position":[[145,9],[238,9]]}}}],["inform",{"_index":384,"name":{},"body":{"david_scott":{"position":[[814,11]]}}}],["initi",{"_index":393,"name":{},"body":{"david_scott":{"position":[[1079,9]]}}}],["inner",{"_index":191,"name":{},"body":{"alan_shepard":{"position":[[1264,5]]}}}],["insert",{"_index":522,"name":{},"body":{"eugene_cernan":{"position":[[1447,10]]}}}],["inspect",{"_index":294,"name":{},"body":{"charles_duke":{"position":[[526,8]]},"david_scott":{"position":[[2724,10]]},"eugene_cernan":{"position":[[3757,10]]},"james_irwin":{"position":[[1177,10]]}}}],["instal",{"_index":40,"name":{},"body":{"alan_bean":{"position":[[439,9]]}}}],["instruct",{"_index":601,"name":{},"body":{"harrison_schmitt":{"position":[[288,11]]}}}],["instrument",{"_index":458,"name":{},"body":{"david_scott":{"position":[[3210,10]]},"harrison_schmitt":{"position":[[228,12]]},"james_irwin":{"position":[[1685,10]]}}}],["integr",{"_index":605,"name":{},"body":{"harrison_schmitt":{"position":[[384,11]]}}}],["intern",{"_index":777,"name":{},"body":{"pete_conrad":{"position":[[1318,13]]}}}],["involv",{"_index":150,"name":{},"body":{"alan_shepard":{"position":[[581,9]]},"charles_duke":{"position":[[938,9]]},"david_scott":{"position":[[2848,8]]},"eugene_cernan":{"position":[[1567,8]]},"james_irwin":{"position":[[1315,8]]}}}],["irwin",{"_index":424,"name":{"james_irwin":{"position":[[6,5]]}},"body":{"david_scott":{"position":[[2034,5],[2425,5],[2692,5]]},"james_irwin":{"position":[[8,5],[331,5],[878,5],[1145,5]]}}}],["ix",{"_index":497,"name":{},"body":{"eugene_cernan":{"position":[[161,2],[645,2]]}}}],["jack",{"_index":81,"name":{},"body":{"alan_bean":{"position":[[876,4]]},"eugene_cernan":{"position":[[2521,6]]}}}],["jame",{"_index":254,"name":{"james_irwin":{"position":[[0,5]]}},"body":{"buzz_aldrin":{"position":[[122,5]]},"david_scott":{"position":[[1092,5],[2025,5]]}}}],["januari",{"_index":196,"name":{},"body":{"alan_shepard":{"position":[[1359,7]]},"edgar_mitchell":{"position":[[197,7]]}}}],["jet",{"_index":725,"name":{},"body":{"neil_armstrong":{"position":[[248,5]]}}}],["john",{"_index":288,"name":{"john_young":{"position":[[0,4]]}},"body":{"charles_duke":{"position":[[389,4]]},"eugene_cernan":{"position":[[1168,4]]}}}],["joint",{"_index":94,"name":{},"body":{"alan_bean":{"position":[[1066,5]]}}}],["journey",{"_index":119,"name":{},"body":{"alan_shepard":{"position":[[144,7]]},"edgar_mitchell":{"position":[[306,7],[431,7]]},"harrison_schmitt":{"position":[[620,7]]}}}],["juli",{"_index":61,"name":{},"body":{"alan_bean":{"position":[[695,4]]},"buzz_aldrin":{"position":[[422,4],[537,4],[600,4]]},"david_scott":{"position":[[1921,4]]},"james_irwin":{"position":[[378,4]]},"john_young":{"position":[[514,4]]}}}],["june",{"_index":499,"name":{},"body":{"eugene_cernan":{"position":[[213,4]]},"harrison_schmitt":{"position":[[61,4]]},"james_irwin":{"position":[[187,4]]}}}],["k",{"_index":75,"name":{},"body":{"alan_bean":{"position":[[828,2]]},"charles_duke":{"position":[[437,2]]}}}],["ken",{"_index":645,"name":{},"body":{"john_young":{"position":[[1166,3]]}}}],["kg",{"_index":564,"name":{},"body":{"eugene_cernan":{"position":[[3152,2]]},"harrison_schmitt":{"position":[[1567,3]]}}}],["known",{"_index":720,"name":{},"body":{"neil_armstrong":{"position":[[164,6]]}}}],["l",{"_index":617,"name":{},"body":{"james_irwin":{"position":[[1029,2]]}}}],["lakeb",{"_index":679,"name":{},"body":{"john_young":{"position":[[2254,7]]}}}],["land",{"_index":24,"name":{},"body":{"alan_bean":{"position":[[221,8],[285,6],[593,7]]},"alan_shepard":{"position":[[364,7],[1430,7],[1579,7]]},"buzz_aldrin":{"position":[[463,7]]},"charles_duke":{"position":[[181,7],[370,7],[777,7]]},"david_scott":{"position":[[471,8],[2100,7]]},"edgar_mitchell":{"position":[[640,7]]},"eugene_cernan":{"position":[[648,6],[1667,8],[1771,7],[1999,7],[2591,7],[2997,7]]},"harrison_schmitt":{"position":[[1074,7],[1410,7]]},"james_irwin":{"position":[[558,7]]},"john_young":{"position":[[1023,7],[2190,8],[2233,6],[3115,6]]},"neil_armstrong":{"position":[[580,7],[656,4]]},"pete_conrad":{"position":[[351,8]]}}}],["largest",{"_index":226,"name":{},"body":{"alan_shepard":{"position":[[1897,7],[1985,7]]},"charles_duke":{"position":[[1231,7]]},"david_scott":{"position":[[3135,7]]},"edgar_mitchell":{"position":[[958,7],[1046,7]]},"eugene_cernan":{"position":[[3106,7]]},"harrison_schmitt":{"position":[[1521,7]]},"james_irwin":{"position":[[1612,7]]}}}],["last",{"_index":359,"name":{},"body":{"david_scott":{"position":[[216,4]]},"eugene_cernan":{"position":[[2179,4],[2881,4],[4200,4],[4284,4]]},"harrison_schmitt":{"position":[[710,4],[1276,4]]}}}],["later",{"_index":482,"name":{},"body":{"edgar_mitchell":{"position":[[467,5]]},"harrison_schmitt":{"position":[[75,5]]}}}],["latter",{"_index":331,"name":{},"body":{"charles_duke":{"position":[[1489,6]]},"david_scott":{"position":[[3516,6]]},"eugene_cernan":{"position":[[1551,6]]},"james_irwin":{"position":[[1999,6]]}}}],["launch",{"_index":125,"name":{},"body":{"alan_shepard":{"position":[[216,8]]},"buzz_aldrin":{"position":[[140,8]]},"david_scott":{"position":[[138,8],[621,8],[3409,8]]},"eugene_cernan":{"position":[[372,8],[2331,7]]},"james_irwin":{"position":[[1883,8]]},"john_young":{"position":[[1631,7]]},"neil_armstrong":{"position":[[411,8]]}}}],["lb",{"_index":566,"name":{},"body":{"eugene_cernan":{"position":[[3160,6]]},"harrison_schmitt":{"position":[[1575,5]]}}}],["lead",{"_index":742,"name":{},"body":{"pete_conrad":{"position":[[183,4]]}}}],["left",{"_index":591,"name":{},"body":{"eugene_cernan":{"position":[[4301,4]]}}}],["less",{"_index":413,"name":{},"body":{"david_scott":{"position":[[1698,4]]}}}],["lichtenberg",{"_index":690,"name":{},"body":{"john_young":{"position":[[2524,11]]}}}],["lieuten",{"_index":79,"name":{},"body":{"alan_bean":{"position":[[857,10]]}}}],["life",{"_index":389,"name":{},"body":{"david_scott":{"position":[[941,4]]},"john_young":{"position":[[2891,4]]}}}],["lift",{"_index":631,"name":{},"body":{"john_young":{"position":[[421,7]]}}}],["liftoff",{"_index":624,"name":{},"body":{"john_young":{"position":[[151,8]]}}}],["littl",{"_index":587,"name":{},"body":{"eugene_cernan":{"position":[[4076,6]]}}}],["littrow",{"_index":551,"name":{},"body":{"eugene_cernan":{"position":[[2609,8]]},"harrison_schmitt":{"position":[[1092,8]]}}}],["locat",{"_index":432,"name":{},"body":{"david_scott":{"position":[[2208,7],[3070,7]]},"eugene_cernan":{"position":[[2618,7]]},"harrison_schmitt":{"position":[[1110,7]]},"james_irwin":{"position":[[666,7],[1546,7]]}}}],["log",{"_index":100,"name":{},"body":{"alan_bean":{"position":[[1133,6]]},"buzz_aldrin":{"position":[[649,6]]},"charles_duke":{"position":[[878,6],[1812,6]]},"david_scott":{"position":[[2431,6]]},"edgar_mitchell":{"position":[[1439,6]]},"eugene_cernan":{"position":[[465,6]]},"james_irwin":{"position":[[884,6]]}}}],["longest",{"_index":229,"name":{},"body":{"alan_shepard":{"position":[[1936,7],[2034,7],[2078,7]]},"charles_duke":{"position":[[1392,7]]},"david_scott":{"position":[[3276,7]]},"edgar_mitchell":{"position":[[997,7],[1095,7],[1139,7]]},"eugene_cernan":{"position":[[2976,7],[3036,7],[3171,7]]},"harrison_schmitt":{"position":[[1389,7],[1450,7],[1585,7]]},"james_irwin":{"position":[[1751,7]]}}}],["lousma",{"_index":83,"name":{},"body":{"alan_bean":{"position":[[884,7]]}}}],["lovel",{"_index":255,"name":{},"body":{"buzz_aldrin":{"position":[[128,6]]}}}],["lta",{"_index":613,"name":{},"body":{"james_irwin":{"position":[[113,4]]}}}],["lunar",{"_index":18,"name":{},"body":{"alan_bean":{"position":[[170,5],[215,5],[376,5],[408,5],[567,5]]},"alan_shepard":{"position":[[1424,5],[1511,5],[1549,5],[1774,5],[1923,5],[1970,5],[2019,5],[2042,5],[2086,5],[2153,5],[2237,5]]},"buzz_aldrin":{"position":[[388,5],[457,5],[520,5],[586,5]]},"charles_duke":{"position":[[225,5],[273,5],[364,5],[623,5],[686,5],[751,5],[853,5],[1257,5],[1325,5],[1346,5],[1912,5]]},"david_scott":{"position":[[913,5],[1021,5],[1147,5],[1456,5],[2040,6],[2094,5],[2278,5],[2318,5],[2386,5],[2548,5],[2786,5],[2922,5],[3179,5],[3306,5],[3336,5],[3421,5]]},"edgar_mitchell":{"position":[[160,5],[226,5],[612,5],[835,5],[984,5],[1031,5],[1080,5],[1103,5],[1147,5],[1214,5],[1296,5],[1542,5]]},"eugene_cernan":{"position":[[830,5],[898,5],[972,5],[1042,5],[1382,5],[1422,5],[1435,5],[1462,5],[1532,5],[1661,5],[1716,5],[2438,5],[2536,6],[2991,5],[3044,5],[3114,5],[3187,5],[3276,5],[3309,5]]},"harrison_schmitt":{"position":[[303,5],[437,5],[665,5],[934,5],[1404,5],[1458,5],[1529,5],[1601,5]]},"james_irwin":{"position":[[100,5],[286,5],[347,5],[552,5],[736,5],[776,5],[840,5],[1001,5],[1253,5],[1389,5],[1654,5],[1781,5],[1811,5],[1895,5]]},"john_young":{"position":[[145,5],[978,5],[1017,5],[1099,5],[1258,5],[1354,5]]},"neil_armstrong":{"position":[[574,5]]},"pete_conrad":{"position":[[345,5]]}}}],["m",{"_index":421,"name":{},"body":{"david_scott":{"position":[[1988,2]]},"james_irwin":{"position":[[487,2]]}}}],["made",{"_index":194,"name":{},"body":{"alan_shepard":{"position":[[1292,4]]},"david_scott":{"position":[[1855,4]]},"edgar_mitchell":{"position":[[501,4]]},"eugene_cernan":{"position":[[2109,4]]}}}],["make",{"_index":557,"name":{},"body":{"eugene_cernan":{"position":[[2828,6]]}}}],["malfunct",{"_index":363,"name":{},"body":{"david_scott":{"position":[[262,14]]}}}],["man",{"_index":22,"name":{},"body":{"alan_bean":{"position":[[203,4]]},"alan_shepard":{"position":[[805,6]]},"buzz_aldrin":{"position":[[450,6]]},"charles_duke":{"position":[[357,6]]},"david_scott":{"position":[[568,6],[2087,6]]},"edgar_mitchell":{"position":[[392,3]]},"eugene_cernan":{"position":[[1878,3],[2194,6],[2314,6],[2942,6],[2984,6],[4289,3]]},"harrison_schmitt":{"position":[[199,6],[725,6],[1397,6]]},"james_irwin":{"position":[[545,6]]},"john_young":{"position":[[221,6],[481,6],[2000,6],[2672,3]]},"neil_armstrong":{"position":[[567,6],[649,3]]},"pete_conrad":{"position":[[192,3]]}}}],["man'",{"_index":201,"name":{},"body":{"alan_shepard":{"position":[[1412,5]]}}}],["manag",{"_index":738,"name":{},"body":{"neil_armstrong":{"position":[[905,10]]}}}],["maneuv",{"_index":207,"name":{},"body":{"alan_shepard":{"position":[[1531,11]]},"charles_duke":{"position":[[735,11]]},"edgar_mitchell":{"position":[[594,11]]},"eugene_cernan":{"position":[[1558,8],[1833,10],[2561,11]]},"harrison_schmitt":{"position":[[1044,11]]},"john_young":{"position":[[1782,11]]}}}],["mani",{"_index":714,"name":{},"body":{"neil_armstrong":{"position":[[108,4]]}}}],["manual",{"_index":628,"name":{},"body":{"john_young":{"position":[[365,6]]}}}],["map",{"_index":343,"name":{},"body":{"charles_duke":{"position":[[1639,7]]},"david_scott":{"position":[[3654,7]]},"eugene_cernan":{"position":[[1982,6]]},"james_irwin":{"position":[[2144,7]]}}}],["march",{"_index":356,"name":{},"body":{"david_scott":{"position":[[81,5],[531,5]]},"john_young":{"position":[[247,5]]},"neil_armstrong":{"position":[[423,5]]}}}],["mare",{"_index":435,"name":{},"body":{"david_scott":{"position":[[2245,4]]},"eugene_cernan":{"position":[[2651,4]]},"harrison_schmitt":{"position":[[1143,4]]},"james_irwin":{"position":[[703,4]]}}}],["marin",{"_index":77,"name":{},"body":{"alan_bean":{"position":[[844,6]]}}}],["market",{"_index":766,"name":{},"body":{"pete_conrad":{"position":[[1032,9],[1175,9],[1236,9]]}}}],["materi",{"_index":296,"name":{},"body":{"charles_duke":{"position":[[554,9]]},"david_scott":{"position":[[2800,10]]},"james_irwin":{"position":[[1267,10]]},"john_young":{"position":[[2866,9]]}}}],["mattingli",{"_index":292,"name":{},"body":{"charles_duke":{"position":[[440,9],[1521,9]]},"john_young":{"position":[[1170,9]]}}}],["mauro",{"_index":212,"name":{},"body":{"alan_shepard":{"position":[[1611,5]]},"edgar_mitchell":{"position":[[672,5]]}}}],["mcdivitt",{"_index":394,"name":{},"body":{"david_scott":{"position":[[1098,8]]}}}],["mcdonnel",{"_index":762,"name":{},"body":{"pete_conrad":{"position":[[964,9],[1357,9]]}}}],["mechan",{"_index":658,"name":{},"body":{"john_young":{"position":[[1713,10]]}}}],["member",{"_index":281,"name":{},"body":{"charles_duke":{"position":[[79,6]]},"edgar_mitchell":{"position":[[15,6],[96,6]]},"james_irwin":{"position":[[221,6]]}}}],["men",{"_index":484,"name":{},"body":{"edgar_mitchell":{"position":[[534,3]]},"eugene_cernan":{"position":[[4128,3]]}}}],["merbold",{"_index":693,"name":{},"body":{"john_young":{"position":[[2555,7]]}}}],["mercuri",{"_index":113,"name":{},"body":{"alan_shepard":{"position":[[36,7]]}}}],["met",{"_index":225,"name":{},"body":{"alan_shepard":{"position":[[1890,6]]},"edgar_mitchell":{"position":[[951,6]]}}}],["meteorit",{"_index":641,"name":{},"body":{"john_young":{"position":[[768,9]]}}}],["micro",{"_index":640,"name":{},"body":{"john_young":{"position":[[762,5]]}}}],["mike",{"_index":634,"name":{},"body":{"john_young":{"position":[[557,4],[704,4]]}}}],["mile",{"_index":34,"name":{},"body":{"alan_bean":{"position":[[351,6],[761,4]]},"alan_shepard":{"position":[[349,5],[390,5]]},"david_scott":{"position":[[1204,5],[1713,5]]},"edgar_mitchell":{"position":[[350,5]]},"eugene_cernan":{"position":[[283,6],[668,5],[723,4],[1519,5],[3868,5],[3904,5]]},"harrison_schmitt":{"position":[[1711,4],[1746,5]]},"john_young":{"position":[[1341,5]]}}}],["militari",{"_index":768,"name":{},"body":{"pete_conrad":{"position":[[1085,8]]}}}],["minut",{"_index":104,"name":{},"body":{"alan_bean":{"position":[[1159,7],[1200,7]]},"alan_shepard":{"position":[[2120,9]]},"buzz_aldrin":{"position":[[579,6],[673,7],[716,7]]},"charles_duke":{"position":[[724,7],[901,7],[1475,9]]},"david_scott":{"position":[[1433,6],[2352,7],[2454,7]]},"edgar_mitchell":{"position":[[1181,9],[1474,7]]},"eugene_cernan":{"position":[[490,7],[590,7],[1604,7],[3026,9],[3096,9],[3213,9],[3601,6]]},"harrison_schmitt":{"position":[[1440,9],[1511,9],[1628,9]]},"james_irwin":{"position":[[807,7],[907,7]]}}}],["missil",{"_index":139,"name":{},"body":{"alan_shepard":{"position":[[414,7]]}}}],["mission",{"_index":16,"name":{},"body":{"alan_bean":{"position":[[143,9],[618,9],[676,7],[892,7],[932,7]]},"alan_shepard":{"position":[[1044,7],[1438,7]]},"buzz_aldrin":{"position":[[471,8]]},"charles_duke":{"position":[[378,7]]},"david_scott":{"position":[[174,7],[2108,7],[3047,7]]},"eugene_cernan":{"position":[[164,8],[1264,8],[2024,9],[2201,7],[2886,7],[4205,7]]},"harrison_schmitt":{"position":[[443,8],[597,9],[739,7],[1288,7]]},"james_irwin":{"position":[[566,7],[1523,7]]},"john_young":{"position":[[235,8],[934,7],[1117,8],[1573,7],[2096,9],[2379,8],[2444,7],[2584,7],[2910,7],[3002,8]]},"neil_armstrong":{"position":[[389,8],[588,8]]},"pete_conrad":{"position":[[382,8]]}}}],["mission’",{"_index":667,"name":{},"body":{"john_young":{"position":[[1913,9]]}}}],["mitchel",{"_index":206,"name":{"edgar_mitchell":{"position":[[6,8]]}},"body":{"alan_shepard":{"position":[[1501,9],[1649,8]]},"edgar_mitchell":{"position":[[0,8],[256,9],[710,8],[1430,8]]}}}],["mobil",{"_index":223,"name":{},"body":{"alan_shepard":{"position":[[1861,6]]},"edgar_mitchell":{"position":[[922,6]]}}}],["model",{"_index":724,"name":{},"body":{"neil_armstrong":{"position":[[218,6]]}}}],["modul",{"_index":19,"name":{},"body":{"alan_bean":{"position":[[176,6]]},"alan_shepard":{"position":[[1474,6],[1517,6],[1555,7]]},"buzz_aldrin":{"position":[[394,6]]},"charles_duke":{"position":[[231,6],[279,6],[462,6],[757,6],[1429,6],[1918,6]]},"david_scott":{"position":[[504,6],[919,6],[1153,6],[1235,6],[1462,7],[1553,6],[1658,6],[2007,6],[2047,6],[2284,7],[3221,6],[3480,6]]},"edgar_mitchell":{"position":[[166,6],[232,6],[618,7],[1548,6]]},"eugene_cernan":{"position":[[836,6],[904,6],[1048,7],[1193,6],[1371,6],[1388,6],[1468,6],[1722,6],[2413,6],[2444,6],[2491,6],[2543,6],[3552,6]]},"harrison_schmitt":{"position":[[671,6],[909,6],[940,6],[1026,6]]},"james_irwin":{"position":[[106,6],[292,6],[353,6],[506,6],[742,7],[1696,6],[1963,6]]},"john_young":{"position":[[860,6]]}}}],["monitor",{"_index":145,"name":{},"body":{"alan_shepard":{"position":[[510,10],[622,10]]}}}],["moon",{"_index":29,"name":{},"body":{"alan_bean":{"position":[[299,5],[498,4],[1234,4]]},"alan_shepard":{"position":[[1631,5]]},"charles_duke":{"position":[[196,4],[1183,5]]},"edgar_mitchell":{"position":[[411,5],[692,5]]},"eugene_cernan":{"position":[[1114,4],[2216,4],[2839,4],[2901,4],[4153,4],[4220,5],[4343,5]]},"harrison_schmitt":{"position":[[582,4],[1303,4]]},"john_young":{"position":[[960,5]]},"neil_armstrong":{"position":[[676,4]]}}}],["moon'",{"_index":427,"name":{},"body":{"david_scott":{"position":[[2155,6]]},"eugene_cernan":{"position":[[1926,6]]},"james_irwin":{"position":[[613,6]]}}}],["more",{"_index":588,"name":{},"body":{"eugene_cernan":{"position":[[4083,4]]},"john_young":{"position":[[2732,4],[2927,4]]},"neil_armstrong":{"position":[[194,4]]}}}],["mount",{"_index":462,"name":{},"body":{"david_scott":{"position":[[3368,8]]},"james_irwin":{"position":[[1844,7]]}}}],["mountain",{"_index":431,"name":{},"body":{"david_scott":{"position":[[2188,9],[2671,10]]},"eugene_cernan":{"position":[[2817,10]]},"james_irwin":{"position":[[646,9],[1124,10]]}}}],["mph",{"_index":722,"name":{},"body":{"neil_armstrong":{"position":[[176,3]]}}}],["mr",{"_index":740,"name":{},"body":{"pete_conrad":{"position":[[22,3],[239,3],[363,3],[565,3],[1130,3]]}}}],["name",{"_index":6,"name":{},"body":{"alan_bean":{"position":[[51,5]]},"alan_shepard":{"position":[[55,5]]},"buzz_aldrin":{"position":[[48,5]]},"david_scott":{"position":[[47,5]]},"pete_conrad":{"position":[[1288,5]]}}}],["nasa",{"_index":7,"name":{},"body":{"alan_bean":{"position":[[60,4]]},"alan_shepard":{"position":[[64,4],[591,4]]},"buzz_aldrin":{"position":[[57,4],[632,5]]},"charles_duke":{"position":[[46,4]]},"david_scott":{"position":[[56,4]]},"eugene_cernan":{"position":[[58,4]]},"harrison_schmitt":{"position":[[53,4]]},"james_irwin":{"position":[[55,4]]},"neil_armstrong":{"position":[[807,4],[927,4]]},"pete_conrad":{"position":[[65,5]]}}}],["nasa’",{"_index":713,"name":{},"body":{"neil_armstrong":{"position":[[23,6]]}}}],["nation",{"_index":758,"name":{},"body":{"pete_conrad":{"position":[[821,8]]}}}],["nautic",{"_index":517,"name":{},"body":{"eugene_cernan":{"position":[[1090,8],[1510,8]]}}}],["navi",{"_index":471,"name":{},"body":{"edgar_mitchell":{"position":[[278,4]]},"pete_conrad":{"position":[[598,4]]}}}],["navig",{"_index":460,"name":{},"body":{"david_scott":{"position":[[3350,10]]},"eugene_cernan":{"position":[[1888,8]]},"harrison_schmitt":{"position":[[309,11]]},"james_irwin":{"position":[[1825,10]]},"john_young":{"position":[[1825,10]]}}}],["nearbi",{"_index":555,"name":{},"body":{"eugene_cernan":{"position":[[2787,6]]}}}],["nearli",{"_index":310,"name":{},"body":{"charles_duke":{"position":[[1038,6]]}}}],["neil",{"_index":267,"name":{"neil_armstrong":{"position":[[0,4]]}},"body":{"buzz_aldrin":{"position":[[496,4]]},"david_scott":{"position":[[118,4]]}}}],["new",{"_index":241,"name":{},"body":{"alan_shepard":{"position":[[2217,3]]},"buzz_aldrin":{"position":[[284,3]]},"david_scott":{"position":[[2371,3]]},"edgar_mitchell":{"position":[[1276,3]]},"eugene_cernan":{"position":[[2926,3]]},"james_irwin":{"position":[[825,3]]},"pete_conrad":{"position":[[845,3]]}}}],["next",{"_index":89,"name":{},"body":{"alan_bean":{"position":[[963,4]]},"david_scott":{"position":[[1771,4]]},"eugene_cernan":{"position":[[2043,4]]}}}],["nighttim",{"_index":541,"name":{},"body":{"eugene_cernan":{"position":[[2321,9]]}}}],["nine",{"_index":481,"name":{},"body":{"edgar_mitchell":{"position":[[457,4]]}}}],["novemb",{"_index":25,"name":{},"body":{"alan_bean":{"position":[[233,8]]},"buzz_aldrin":{"position":[[82,8]]},"john_young":{"position":[[2388,8]]}}}],["nuclear",{"_index":42,"name":{},"body":{"alan_bean":{"position":[[459,7]]}}}],["object",{"_index":520,"name":{},"body":{"eugene_cernan":{"position":[[1245,10]]},"john_young":{"position":[[1935,10],[2641,11]]}}}],["observ",{"_index":174,"name":{},"body":{"alan_shepard":{"position":[[1009,12]]},"david_scott":{"position":[[3696,12]]},"eugene_cernan":{"position":[[3394,13]]},"james_irwin":{"position":[[2186,12]]},"john_young":{"position":[[2801,13]]}}}],["observatori",{"_index":324,"name":{},"body":{"charles_duke":{"position":[[1352,11]]}}}],["occas",{"_index":589,"name":{},"body":{"eugene_cernan":{"position":[[4165,10]]}}}],["occupi",{"_index":492,"name":{},"body":{"eugene_cernan":{"position":[[83,8]]},"harrison_schmitt":{"position":[[652,8]]}}}],["ocean",{"_index":30,"name":{},"body":{"alan_bean":{"position":[[305,5]]},"charles_duke":{"position":[[1691,5]]},"david_scott":{"position":[[3796,5]]},"eugene_cernan":{"position":[[3844,5]]},"harrison_schmitt":{"position":[[1687,5]]}}}],["octob",{"_index":8,"name":{},"body":{"alan_bean":{"position":[[68,7]]},"buzz_aldrin":{"position":[[65,7]]},"david_scott":{"position":[[64,7]]},"eugene_cernan":{"position":[[66,7]]}}}],["offic",{"_index":143,"name":{},"body":{"alan_shepard":{"position":[[479,6]]},"pete_conrad":{"position":[[675,6]]}}}],["okinawa",{"_index":469,"name":{},"body":{"david_scott":{"position":[[3848,8]]},"james_irwin":{"position":[[2332,8]]}}}],["on",{"_index":2,"name":{},"body":{"alan_bean":{"position":[[14,3]]},"alan_shepard":{"position":[[25,3]]},"buzz_aldrin":{"position":[[11,3]]},"charles_duke":{"position":[[9,3]]},"david_scott":{"position":[[10,3]]},"eugene_cernan":{"position":[[19,3],[4113,3]]},"james_irwin":{"position":[[18,3]]},"john_young":{"position":[[1877,3]]}}}],["onto",{"_index":269,"name":{},"body":{"buzz_aldrin":{"position":[[511,4]]},"charles_duke":{"position":[[844,4]]},"david_scott":{"position":[[2539,4]]},"james_irwin":{"position":[[992,4]]}}}],["open",{"_index":407,"name":{},"body":{"david_scott":{"position":[[1540,4]]}}}],["oper",{"_index":167,"name":{},"body":{"alan_shepard":{"position":[[900,10],[1086,11],[2321,11]]},"david_scott":{"position":[[858,11],[1305,11],[2990,8],[3242,8]]},"edgar_mitchell":{"position":[[1380,11]]},"eugene_cernan":{"position":[[1297,10],[2708,10]]},"harrison_schmitt":{"position":[[1200,10]]},"james_irwin":{"position":[[1466,8],[1717,8]]},"john_young":{"position":[[448,8]]},"pete_conrad":{"position":[[644,10],[665,9],[783,9]]}}}],["orbit",{"_index":51,"name":{},"body":{"alan_bean":{"position":[[573,5],[1252,6]]},"alan_shepard":{"position":[[1929,6],[2159,5],[2272,7]]},"charles_duke":{"position":[[1263,5]]},"david_scott":{"position":[[693,7],[1027,5],[3185,7],[3427,6]]},"edgar_mitchell":{"position":[[990,6],[1220,5],[1331,7]]},"eugene_cernan":{"position":[[262,5],[978,7],[1441,5],[3193,5],[3315,5]]},"harrison_schmitt":{"position":[[1607,5]]},"james_irwin":{"position":[[1660,7],[1901,6]]},"john_young":{"position":[[382,5],[948,7],[1567,5],[1642,6],[1673,7],[1969,7],[2042,6]]}}}],["orbiter/crew",{"_index":663,"name":{},"body":{"john_young":{"position":[[1849,12]]}}}],["origin",{"_index":358,"name":{},"body":{"david_scott":{"position":[[192,10]]}}}],["orion",{"_index":303,"name":{},"body":{"charles_duke":{"position":[[764,7]]}}}],["out",{"_index":334,"name":{},"body":{"charles_duke":{"position":[[1548,3]]}}}],["outer",{"_index":474,"name":{},"body":{"edgar_mitchell":{"position":[[322,5]]}}}],["outsid",{"_index":264,"name":{},"body":{"buzz_aldrin":{"position":[[351,7]]},"david_scott":{"position":[[1444,7]]},"eugene_cernan":{"position":[[498,7]]}}}],["over",{"_index":315,"name":{},"body":{"charles_duke":{"position":[[1120,4],[1842,4]]},"eugene_cernan":{"position":[[2859,4]]},"john_young":{"position":[[1333,4],[3092,4]]}}}],["overal",{"_index":176,"name":{},"body":{"alan_shepard":{"position":[[1036,7]]},"neil_armstrong":{"position":[[919,7]]}}}],["overcom",{"_index":371,"name":{},"body":{"david_scott":{"position":[[401,10]]}}}],["owen",{"_index":74,"name":{},"body":{"alan_bean":{"position":[[823,4]]},"john_young":{"position":[[2479,4]]}}}],["p",{"_index":519,"name":{},"body":{"eugene_cernan":{"position":[[1129,2]]}}}],["p.m",{"_index":537,"name":{},"body":{"eugene_cernan":{"position":[[2269,4]]},"harrison_schmitt":{"position":[[795,4]]}}}],["pacif",{"_index":345,"name":{},"body":{"charles_duke":{"position":[[1683,7]]},"david_scott":{"position":[[3788,7]]},"eugene_cernan":{"position":[[3836,7]]},"harrison_schmitt":{"position":[[1679,7]]},"james_irwin":{"position":[[2278,7]]}}}],["packag",{"_index":451,"name":{},"body":{"david_scott":{"position":[[2834,7]]},"james_irwin":{"position":[[1301,7]]}}}],["panoram",{"_index":342,"name":{},"body":{"charles_duke":{"position":[[1625,9]]},"david_scott":{"position":[[3640,9]]},"james_irwin":{"position":[[2130,9]]}}}],["parker",{"_index":688,"name":{},"body":{"john_young":{"position":[[2468,6]]}}}],["particip",{"_index":606,"name":{},"body":{"harrison_schmitt":{"position":[[456,12]]}}}],["payload",{"_index":227,"name":{},"body":{"alan_shepard":{"position":[[1905,7],[1993,7]]},"charles_duke":{"position":[[1239,7]]},"david_scott":{"position":[[3143,8]]},"edgar_mitchell":{"position":[[966,7],[1054,7]]},"james_irwin":{"position":[[1620,8]]},"john_young":{"position":[[1746,7],[2498,7]]}}}],["perfect",{"_index":508,"name":{},"body":{"eugene_cernan":{"position":[[605,7]]}}}],["perform",{"_index":365,"name":{},"body":{"david_scott":{"position":[[296,9],[870,12],[2698,9],[3528,9]]},"eugene_cernan":{"position":[[1308,12]]},"james_irwin":{"position":[[1151,9]]},"john_young":{"position":[[1612,11],[2721,10]]},"neil_armstrong":{"position":[[453,9]]}}}],["period",{"_index":246,"name":{},"body":{"alan_shepard":{"position":[[2288,6]]},"david_scott":{"position":[[1482,7]]},"edgar_mitchell":{"position":[[1347,6]]}}}],["person",{"_index":466,"name":{},"body":{"david_scott":{"position":[[3687,8]]},"eugene_cernan":{"position":[[3748,8]]},"james_irwin":{"position":[[2177,8]]},"john_young":{"position":[[71,6]]}}}],["personnel",{"_index":161,"name":{},"body":{"alan_shepard":{"position":[[759,9]]}}}],["pete",{"_index":27,"name":{"pete_conrad":{"position":[[0,4]]}},"body":{"alan_bean":{"position":[[273,4]]}}}],["petrograph",{"_index":608,"name":{},"body":{"harrison_schmitt":{"position":[[512,13]]}}}],["phase",{"_index":577,"name":{},"body":{"eugene_cernan":{"position":[[3656,5]]}}}],["photograph",{"_index":52,"name":{},"body":{"alan_bean":{"position":[[579,13]]},"david_scott":{"position":[[1566,13]]},"eugene_cernan":{"position":[[1965,12]]}}}],["photographi",{"_index":575,"name":{},"body":{"eugene_cernan":{"position":[[3417,11]]}}}],["physic",{"_index":702,"name":{},"body":{"john_young":{"position":[[2786,8],[2828,8],[2857,8]]}}}],["pilot",{"_index":20,"name":{},"body":{"alan_bean":{"position":[[183,5]]},"alan_shepard":{"position":[[753,5],[838,5],[1481,6],[1524,6]]},"buzz_aldrin":{"position":[[116,5],[401,5]]},"charles_duke":{"position":[[238,5],[286,5],[469,7],[1925,5]]},"david_scott":{"position":[[112,5],[383,8],[511,5],[1242,7],[2014,6],[2054,7]]},"edgar_mitchell":{"position":[[173,5],[239,6],[1555,5]]},"eugene_cernan":{"position":[[96,5],[128,5],[796,5],[843,5],[911,5],[1200,7],[2498,6],[2550,7]]},"harrison_schmitt":{"position":[[678,5],[1033,7]]},"james_irwin":{"position":[[299,5],[360,5],[513,6]]},"john_young":{"position":[[574,6],[867,5],[1540,6],[2423,5]]},"neil_armstrong":{"position":[[14,5],[99,5],[366,5]]}}}],["pilot/non",{"_index":160,"name":{},"body":{"alan_shepard":{"position":[[743,9]]}}}],["pioneer",{"_index":715,"name":{},"body":{"neil_armstrong":{"position":[[113,10]]}}}],["place",{"_index":228,"name":{},"body":{"alan_shepard":{"position":[[1913,6]]},"charles_duke":{"position":[[1247,6]]},"david_scott":{"position":[[3157,6]]},"edgar_mitchell":{"position":[[974,6]]},"james_irwin":{"position":[[1634,6]]},"pete_conrad":{"position":[[151,6]]}}}],["plain",{"_index":306,"name":{},"body":{"charles_duke":{"position":[[805,7]]}}}],["plan",{"_index":177,"name":{},"body":{"alan_shepard":{"position":[[1052,9]]}}}],["plane",{"_index":630,"name":{},"body":{"john_young":{"position":[[401,5]]}}}],["plasma",{"_index":703,"name":{},"body":{"john_young":{"position":[[2821,6]]}}}],["point",{"_index":135,"name":{},"body":{"alan_shepard":{"position":[[372,5]]},"eugene_cernan":{"position":[[3890,5]]},"harrison_schmitt":{"position":[[1732,5]]}}}],["portion",{"_index":446,"name":{},"body":{"david_scott":{"position":[[2629,8]]},"james_irwin":{"position":[[1082,8]]}}}],["posit",{"_index":162,"name":{},"body":{"alan_shepard":{"position":[[792,9]]},"neil_armstrong":{"position":[[747,8],[851,9]]},"pete_conrad":{"position":[[615,8],[919,8]]}}}],["pound",{"_index":218,"name":{},"body":{"alan_shepard":{"position":[[1764,6]]},"charles_duke":{"position":[[1049,6],[1278,8]]},"david_scott":{"position":[[2776,6]]},"edgar_mitchell":{"position":[[825,6]]},"james_irwin":{"position":[[1243,6]]},"john_young":{"position":[[1307,6]]}}}],["power",{"_index":43,"name":{},"body":{"alan_bean":{"position":[[467,5],[518,5]]}}}],["pre",{"_index":86,"name":{},"body":{"alan_bean":{"position":[[928,3]]}}}],["predetermin",{"_index":515,"name":{},"body":{"eugene_cernan":{"position":[[737,13]]}}}],["prescrib",{"_index":526,"name":{},"body":{"eugene_cernan":{"position":[[1629,10]]}}}],["presid",{"_index":752,"name":{},"body":{"pete_conrad":{"position":[[632,9],[936,9],[1019,9],[1165,9],[1226,9],[1305,9]]}}}],["previou",{"_index":612,"name":{},"body":{"harrison_schmitt":{"position":[[1359,8]]},"john_young":{"position":[[2078,8],[2975,8]]}}}],["previous",{"_index":385,"name":{},"body":{"david_scott":{"position":[[826,10]]},"eugene_cernan":{"position":[[361,10]]}}}],["prime",{"_index":511,"name":{},"body":{"eugene_cernan":{"position":[[681,5],[3919,5]]},"harrison_schmitt":{"position":[[1761,5]]}}}],["privileg",{"_index":590,"name":{},"body":{"eugene_cernan":{"position":[[4245,9]]}}}],["problem",{"_index":372,"name":{},"body":{"david_scott":{"position":[[425,7]]}}}],["procedur",{"_index":180,"name":{},"body":{"alan_shepard":{"position":[[1098,11]]}}}],["process",{"_index":706,"name":{},"body":{"john_young":{"position":[[2876,10]]}}}],["product",{"_index":773,"name":{},"body":{"pete_conrad":{"position":[[1250,7]]}}}],["program",{"_index":156,"name":{},"body":{"alan_shepard":{"position":[[690,8]]},"buzz_aldrin":{"position":[[232,7]]},"pete_conrad":{"position":[[555,9]]}}}],["project",{"_index":99,"name":{},"body":{"alan_bean":{"position":[[1107,8]]},"neil_armstrong":{"position":[[91,7]]}}}],["propos",{"_index":644,"name":{},"body":{"john_young":{"position":[[1008,8]]}}}],["propuls",{"_index":388,"name":{},"body":{"david_scott":{"position":[[926,10]]},"eugene_cernan":{"position":[[1729,11]]}}}],["provid",{"_index":46,"name":{},"body":{"alan_bean":{"position":[[506,7]]},"alan_shepard":{"position":[[960,9]]},"david_scott":{"position":[[799,8]]},"harrison_schmitt":{"position":[[244,9]]}}}],["put",{"_index":709,"name":{},"body":{"john_young":{"position":[[3011,3]]}}}],["qualif",{"_index":379,"name":{},"body":{"david_scott":{"position":[[701,13]]},"eugene_cernan":{"position":[[986,13]]}}}],["qualit",{"_index":171,"name":{},"body":{"alan_shepard":{"position":[[970,11]]}}}],["r",{"_index":82,"name":{},"body":{"alan_bean":{"position":[[881,2]]},"james_irwin":{"position":[[445,2]]}}}],["radar",{"_index":529,"name":{},"body":{"eugene_cernan":{"position":[[1779,5]]}}}],["rain",{"_index":438,"name":{},"body":{"david_scott":{"position":[[2266,7]]},"james_irwin":{"position":[[724,7]]}}}],["rang",{"_index":140,"name":{},"body":{"alan_shepard":{"position":[[422,6]]}}}],["ray",{"_index":322,"name":{},"body":{"charles_duke":{"position":[[1300,3]]}}}],["re",{"_index":509,"name":{},"body":{"eugene_cernan":{"position":[[613,2],[1822,2]]},"john_young":{"position":[[3059,2]]}}}],["readi",{"_index":158,"name":{},"body":{"alan_shepard":{"position":[[720,9]]}}}],["rear",{"_index":111,"name":{},"body":{"alan_shepard":{"position":[[0,4]]}}}],["recognit",{"_index":603,"name":{},"body":{"harrison_schmitt":{"position":[[342,12]]}}}],["record",{"_index":70,"name":{},"body":{"alan_bean":{"position":[[772,6]]},"buzz_aldrin":{"position":[[288,6]]},"charles_duke":{"position":[[671,6]]},"david_scott":{"position":[[2375,6]]},"eugene_cernan":{"position":[[2930,7]]},"harrison_schmitt":{"position":[[1344,7]]},"james_irwin":{"position":[[829,6]]},"pete_conrad":{"position":[[140,6],[283,7]]}}}],["recoveri",{"_index":347,"name":{},"body":{"charles_duke":{"position":[[1723,8]]},"david_scott":{"position":[[3828,8]]},"eugene_cernan":{"position":[[626,8],[687,8],[3925,8]]},"harrison_schmitt":{"position":[[1767,8]]},"james_irwin":{"position":[[2312,8]]}}}],["redston",{"_index":126,"name":{},"body":{"alan_shepard":{"position":[[230,8]]}}}],["reentri",{"_index":632,"name":{},"body":{"john_young":{"position":[[429,8],[2141,7]]}}}],["region",{"_index":213,"name":{},"body":{"alan_shepard":{"position":[[1617,6]]},"charles_duke":{"position":[[602,6]]},"edgar_mitchell":{"position":[[678,6]]}}}],["relat",{"_index":169,"name":{},"body":{"alan_shepard":{"position":[[937,7]]},"neil_armstrong":{"position":[[961,7]]}}}],["reliabl",{"_index":387,"name":{},"body":{"david_scott":{"position":[[898,11]]},"eugene_cernan":{"position":[[1336,11]]}}}],["remain",{"_index":50,"name":{},"body":{"alan_bean":{"position":[[555,8]]},"david_scott":{"position":[[2302,8]]},"eugene_cernan":{"position":[[3297,8]]},"james_irwin":{"position":[[760,8]]}}}],["remot",{"_index":453,"name":{},"body":{"david_scott":{"position":[[2999,8]]},"james_irwin":{"position":[[1475,8]]}}}],["rendezv",{"_index":237,"name":{},"body":{"alan_shepard":{"position":[[2165,10]]},"david_scott":{"position":[[1033,10]]},"edgar_mitchell":{"position":[[1226,10]]},"eugene_cernan":{"position":[[341,10],[1753,10],[1807,10]]},"john_young":{"position":[[598,10],[984,11]]}}}],["report",{"_index":465,"name":{},"body":{"david_scott":{"position":[[3674,8]]},"james_irwin":{"position":[[2164,8]]}}}],["requir",{"_index":572,"name":{},"body":{"eugene_cernan":{"position":[[3373,9]]},"harrison_schmitt":{"position":[[492,9]]}}}],["research",{"_index":607,"name":{},"body":{"harrison_schmitt":{"position":[[472,8]]},"neil_armstrong":{"position":[[5,8],[37,8],[932,8]]}}}],["resign",{"_index":274,"name":{},"body":{"buzz_aldrin":{"position":[[618,8]]},"pete_conrad":{"position":[[887,8]]}}}],["respons",{"_index":144,"name":{},"body":{"alan_shepard":{"position":[[491,14]]},"neil_armstrong":{"position":[[868,11]]},"pete_conrad":{"position":[[758,11],[1050,11]]}}}],["restor",{"_index":185,"name":{},"body":{"alan_shepard":{"position":[[1184,8]]}}}],["result",{"_index":476,"name":{},"body":{"edgar_mitchell":{"position":[[361,8]]}}}],["retir",{"_index":749,"name":{},"body":{"pete_conrad":{"position":[[576,7]]}}}],["retriev",{"_index":338,"name":{},"body":{"charles_duke":{"position":[[1582,9]]},"david_scott":{"position":[[1614,10],[3606,9]]},"eugene_cernan":{"position":[[3697,10]]},"james_irwin":{"position":[[2096,9]]},"john_young":{"position":[[751,8]]}}}],["return",{"_index":220,"name":{},"body":{"alan_shepard":{"position":[[1792,6],[2001,8]]},"edgar_mitchell":{"position":[[853,6],[1062,8]]},"eugene_cernan":{"position":[[3127,6],[3669,6]]},"harrison_schmitt":{"position":[[564,8],[1542,6]]},"john_young":{"position":[[2160,6],[2918,8]]}}}],["richard",{"_index":48,"name":{},"body":{"alan_bean":{"position":[[540,7]]}}}],["rill",{"_index":429,"name":{},"body":{"david_scott":{"position":[[2169,5],[2648,5]]},"james_irwin":{"position":[[627,5],[1101,5]]}}}],["rock",{"_index":312,"name":{},"body":{"charles_duke":{"position":[[1059,4]]},"john_young":{"position":[[1317,5]]}}}],["rocket",{"_index":661,"name":{},"body":{"john_young":{"position":[[1794,6]]},"neil_armstrong":{"position":[[254,8]]}}}],["ronald",{"_index":545,"name":{},"body":{"eugene_cernan":{"position":[[2469,6]]},"harrison_schmitt":{"position":[[1004,6]]}}}],["roosa",{"_index":203,"name":{},"body":{"alan_shepard":{"position":[[1459,6]]},"edgar_mitchell":{"position":[[587,6]]}}}],["rough",{"_index":304,"name":{},"body":{"charles_duke":{"position":[[792,5]]}}}],["roughest",{"_index":316,"name":{},"body":{"charles_duke":{"position":[[1129,8]]}}}],["rover",{"_index":314,"name":{},"body":{"charles_duke":{"position":[[1112,5]]},"david_scott":{"position":[[2569,6],[3380,5]]},"james_irwin":{"position":[[1022,6],[1855,5]]},"john_young":{"position":[[1360,5]]}}}],["rug",{"_index":299,"name":{},"body":{"charles_duke":{"position":[[616,6]]}}}],["runway",{"_index":674,"name":{},"body":{"john_young":{"position":[[2183,6]]}}}],["russel",{"_index":395,"name":{},"body":{"david_scott":{"position":[[1111,7]]}}}],["russian",{"_index":96,"name":{},"body":{"alan_bean":{"position":[[1081,7]]}}}],["safe",{"_index":374,"name":{},"body":{"david_scott":{"position":[[466,4]]},"edgar_mitchell":{"position":[[450,6]]},"eugene_cernan":{"position":[[1897,6]]}}}],["sale",{"_index":769,"name":{},"body":{"pete_conrad":{"position":[[1094,5]]}}}],["sampl",{"_index":219,"name":{},"body":{"alan_shepard":{"position":[[1780,7]]},"charles_duke":{"position":[[547,6],[1073,8]]},"david_scott":{"position":[[1633,7]]},"edgar_mitchell":{"position":[[841,7]]},"eugene_cernan":{"position":[[3120,6]]},"harrison_schmitt":{"position":[[556,7],[1535,6]]}}}],["saturn",{"_index":376,"name":{},"body":{"david_scott":{"position":[[635,6]]}}}],["schedul",{"_index":147,"name":{},"body":{"alan_shepard":{"position":[[539,11]]},"david_scott":{"position":[[203,9]]},"eugene_cernan":{"position":[[2184,9]]},"harrison_schmitt":{"position":[[715,9]]}}}],["schmitt",{"_index":549,"name":{"harrison_schmitt":{"position":[[9,7]]}},"body":{"eugene_cernan":{"position":[[2528,7],[2680,7],[3240,7]]},"harrison_schmitt":{"position":[[4,7],[355,7],[644,7],[1161,7]]}}}],["schweickart",{"_index":396,"name":{},"body":{"david_scott":{"position":[[1119,11],[1405,11]]}}}],["schweickart'",{"_index":409,"name":{},"body":{"david_scott":{"position":[[1580,13]]}}}],["scienc",{"_index":245,"name":{},"body":{"alan_shepard":{"position":[[2280,7]]},"edgar_mitchell":{"position":[[1339,7]]},"john_young":{"position":[[2896,9]]}}}],["scientif",{"_index":172,"name":{},"body":{"alan_shepard":{"position":[[982,10],[1702,10]]},"charles_duke":{"position":[[501,10],[982,10]]},"david_scott":{"position":[[3199,10]]},"edgar_mitchell":{"position":[[763,10]]},"eugene_cernan":{"position":[[3508,10]]},"harrison_schmitt":{"position":[[399,10]]},"james_irwin":{"position":[[1674,10]]},"john_young":{"position":[[1220,10],[2932,10]]}}}],["scientist",{"_index":72,"name":{},"body":{"alan_bean":{"position":[[799,9]]},"harrison_schmitt":{"position":[[30,9]]}}}],["scott",{"_index":355,"name":{"david_scott":{"position":[[6,5]]}},"body":{"david_scott":{"position":[[0,5],[480,5],[1253,6],[1495,5],[1788,5],[2415,5],[2682,5]]},"james_irwin":{"position":[[448,6],[868,5],[1135,5]]}}}],["sea",{"_index":437,"name":{},"body":{"david_scott":{"position":[[2258,4]]},"james_irwin":{"position":[[716,4]]}}}],["seat",{"_index":493,"name":{},"body":{"eugene_cernan":{"position":[[102,4]]},"harrison_schmitt":{"position":[[684,4]]}}}],["second",{"_index":23,"name":{},"body":{"alan_bean":{"position":[[208,6]]},"alan_shepard":{"position":[[1301,6]]},"david_scott":{"position":[[608,6]]},"eugene_cernan":{"position":[[431,6],[870,6],[3979,6]]},"john_young":{"position":[[690,6]]},"pete_conrad":{"position":[[338,6]]}}}],["select",{"_index":181,"name":{},"body":{"alan_shepard":{"position":[[1114,9]]},"charles_duke":{"position":[[34,8]]},"edgar_mitchell":{"position":[[34,8]]},"eugene_cernan":{"position":[[46,8]]},"harrison_schmitt":{"position":[[16,8]]},"james_irwin":{"position":[[43,8]]},"john_young":{"position":[[29,8]]},"pete_conrad":{"position":[[37,8]]}}}],["selenolog",{"_index":447,"name":{},"body":{"david_scott":{"position":[[2710,13]]},"james_irwin":{"position":[[1163,13]]}}}],["senior",{"_index":770,"name":{},"body":{"pete_conrad":{"position":[[1153,6],[1214,6]]}}}],["separ",{"_index":398,"name":{},"body":{"david_scott":{"position":[[1165,10],[2519,8]]},"eugene_cernan":{"position":[[1475,10]]},"james_irwin":{"position":[[972,8]]},"john_young":{"position":[[618,8],[1375,8]]}}}],["septemb",{"_index":63,"name":{},"body":{"alan_bean":{"position":[[706,9]]},"john_young":{"position":[[3,9]]},"pete_conrad":{"position":[[3,9]]}}}],["serenitati",{"_index":552,"name":{},"body":{"eugene_cernan":{"position":[[2656,12]]},"harrison_schmitt":{"position":[[1148,12]]}}}],["seri",{"_index":375,"name":{},"body":{"david_scott":{"position":[[596,7]]},"james_irwin":{"position":[[153,6]]}}}],["serv",{"_index":10,"name":{},"body":{"alan_bean":{"position":[[85,6]]},"buzz_aldrin":{"position":[[378,6]]},"charles_duke":{"position":[[69,6],[208,6],[263,6],[1895,6]]},"david_scott":{"position":[[486,6]]},"edgar_mitchell":{"position":[[84,6],[215,7],[1526,5]]},"eugene_cernan":{"position":[[779,6]]},"james_irwin":{"position":[[209,6],[337,6]]},"pete_conrad":{"position":[[299,6],[394,6],[491,7]]}}}],["set",{"_index":71,"name":{},"body":{"alan_bean":{"position":[[779,7]]},"charles_duke":{"position":[[678,7]]},"david_scott":{"position":[[2360,8]]},"harrison_schmitt":{"position":[[1352,3]]},"james_irwin":{"position":[[815,7]]},"john_young":{"position":[[1213,3]]},"pete_conrad":{"position":[[260,3]]}}}],["seven",{"_index":622,"name":{},"body":{"john_young":{"position":[[120,5]]}}}],["sever",{"_index":38,"name":{},"body":{"alan_bean":{"position":[[400,7]]},"eugene_cernan":{"position":[[2918,7]]},"harrison_schmitt":{"position":[[1336,7]]}}}],["shaw",{"_index":686,"name":{},"body":{"john_young":{"position":[[2438,5]]}}}],["shepard",{"_index":110,"name":{"alan_shepard":{"position":[[5,7]]}},"body":{"alan_shepard":{"position":[[13,7],[1284,7],[1637,7]]},"edgar_mitchell":{"position":[[560,7],[698,7]]}}}],["shift",{"_index":697,"name":{},"body":{"john_young":{"position":[[2696,6]]}}}],["ship",{"_index":512,"name":{},"body":{"eugene_cernan":{"position":[[696,4],[3934,4]]},"harrison_schmitt":{"position":[[1776,5]]}}}],["shorten",{"_index":236,"name":{},"body":{"alan_shepard":{"position":[[2143,9]]},"edgar_mitchell":{"position":[[1204,9]]}}}],["shuttl",{"_index":651,"name":{},"body":{"john_young":{"position":[[1492,8],[1596,7]]}}}],["sim",{"_index":336,"name":{},"body":{"charles_duke":{"position":[[1566,3]]},"david_scott":{"position":[[3589,3]]},"eugene_cernan":{"position":[[3559,3]]},"james_irwin":{"position":[[2079,3]]}}}],["simul",{"_index":392,"name":{},"body":{"david_scott":{"position":[[1044,10]]}}}],["site",{"_index":53,"name":{},"body":{"alan_bean":{"position":[[601,5]]},"eugene_cernan":{"position":[[2007,5]]},"john_young":{"position":[[1031,6]]}}}],["six",{"_index":621,"name":{},"body":{"john_young":{"position":[[94,3]]}}}],["sixth",{"_index":478,"name":{},"body":{"edgar_mitchell":{"position":[[386,5]]},"john_young":{"position":[[2309,5]]}}}],["skill",{"_index":370,"name":{},"body":{"david_scott":{"position":[[392,5]]}}}],["skylab",{"_index":57,"name":{},"body":{"alan_bean":{"position":[[669,6]]},"john_young":{"position":[[2995,6]]},"pete_conrad":{"position":[[417,6]]}}}],["sl",{"_index":59,"name":{},"body":{"alan_bean":{"position":[[687,3]]}}}],["soil",{"_index":313,"name":{},"body":{"charles_duke":{"position":[[1068,4]]}}}],["sojourn",{"_index":518,"name":{},"body":{"eugene_cernan":{"position":[[1099,7]]}}}],["solar",{"_index":705,"name":{},"body":{"john_young":{"position":[[2851,5]]}}}],["solo",{"_index":249,"name":{},"body":{"alan_shepard":{"position":[[2316,4]]},"edgar_mitchell":{"position":[[1375,4]]}}}],["sophist",{"_index":576,"name":{},"body":{"eugene_cernan":{"position":[[3494,13]]}}}],["sourc",{"_index":47,"name":{},"body":{"alan_bean":{"position":[[524,7]]}}}],["southeast",{"_index":433,"name":{},"body":{"david_scott":{"position":[[2223,9]]},"eugene_cernan":{"position":[[2633,9]]},"harrison_schmitt":{"position":[[1125,9]]},"james_irwin":{"position":[[681,9]]}}}],["soyuz",{"_index":97,"name":{},"body":{"alan_bean":{"position":[[1096,5]]}}}],["space",{"_index":120,"name":{},"body":{"alan_shepard":{"position":[[157,6],[812,5],[1308,5]]},"buzz_aldrin":{"position":[[154,5],[684,6]]},"charles_duke":{"position":[[1789,5],[1832,5]]},"david_scott":{"position":[[152,5],[354,5],[1870,5]]},"edgar_mitchell":{"position":[[328,5],[1416,5],[1485,6]]},"eugene_cernan":{"position":[[458,6],[877,5],[2124,5],[2949,5],[4013,5]]},"harrison_schmitt":{"position":[[206,5],[633,6]]},"john_young":{"position":[[88,5],[1049,5],[1486,5],[1590,5],[2172,5],[2815,5]]},"neil_armstrong":{"position":[[511,6]]},"pete_conrad":{"position":[[124,5],[205,6],[452,5],[549,5]]}}}],["spacecraft",{"_index":55,"name":{},"body":{"alan_bean":{"position":[[645,10],[1004,10]]},"alan_shepard":{"position":[[197,11],[914,10],[1324,10]]},"buzz_aldrin":{"position":[[177,10],[363,11]]},"charles_duke":{"position":[[403,11]]},"david_scott":{"position":[[450,10],[767,12],[1816,10],[1886,10],[3264,11]]},"eugene_cernan":{"position":[[231,10],[510,10],[1141,11],[2070,10],[2140,10]]},"harrison_schmitt":{"position":[[977,11]]},"james_irwin":{"position":[[455,10],[1739,11]]},"john_young":{"position":[[313,11],[488,11],[1140,10],[1431,10],[2329,10]]},"neil_armstrong":{"position":[[521,10]]}}}],["spacelab",{"_index":682,"name":{},"body":{"john_young":{"position":[[2370,8],[3029,8]]}}}],["spaceof",{"_index":105,"name":{},"body":{"alan_bean":{"position":[[1170,7]]}}}],["spaceship",{"_index":668,"name":{},"body":{"john_young":{"position":[[2007,9],[3126,9]]}}}],["span",{"_index":584,"name":{},"body":{"eugene_cernan":{"position":[[4026,7]]}}}],["specialist",{"_index":687,"name":{},"body":{"john_young":{"position":[[2452,11],[2506,11]]}}}],["specif",{"_index":183,"name":{},"body":{"alan_shepard":{"position":[[1139,8]]},"eugene_cernan":{"position":[[3432,8]]}}}],["speed",{"_index":717,"name":{},"body":{"neil_armstrong":{"position":[[129,5]]}}}],["spend",{"_index":262,"name":{},"body":{"buzz_aldrin":{"position":[[330,8]]}}}],["spent",{"_index":107,"name":{},"body":{"alan_bean":{"position":[[1213,5]]},"buzz_aldrin":{"position":[[729,5]]}}}],["splash",{"_index":412,"name":{},"body":{"david_scott":{"position":[[1684,8]]}}}],["splashdown",{"_index":346,"name":{},"body":{"charles_duke":{"position":[[1697,10]]},"david_scott":{"position":[[3802,10]]},"eugene_cernan":{"position":[[3818,10]]},"harrison_schmitt":{"position":[[1661,10]]},"james_irwin":{"position":[[2286,10]]}}}],["st",{"_index":650,"name":{},"body":{"john_young":{"position":[[1455,3],[2353,3]]}}}],["stabil",{"_index":386,"name":{},"body":{"david_scott":{"position":[[883,10]]},"eugene_cernan":{"position":[[1321,10]]}}}],["staff",{"_index":776,"name":{},"body":{"pete_conrad":{"position":[[1294,5]]}}}],["stafford",{"_index":496,"name":{},"body":{"eugene_cernan":{"position":[[138,8],[1132,8]]},"john_young":{"position":[[891,8]]}}}],["stand",{"_index":405,"name":{},"body":{"david_scott":{"position":[[1520,5]]}}}],["state",{"_index":92,"name":{},"body":{"alan_bean":{"position":[[1039,6]]},"eugene_cernan":{"position":[[2236,6]]},"harrison_schmitt":{"position":[[761,6],[1323,6]]},"pete_conrad":{"position":[[169,6],[445,6]]}}}],["station",{"_index":45,"name":{},"body":{"alan_bean":{"position":[[483,7]]},"david_scott":{"position":[[3030,9]]},"james_irwin":{"position":[[1506,9]]},"pete_conrad":{"position":[[458,8]]}}}],["statu",{"_index":187,"name":{},"body":{"alan_shepard":{"position":[[1208,6]]},"neil_armstrong":{"position":[[323,6]]}}}],["statut",{"_index":134,"name":{},"body":{"alan_shepard":{"position":[[341,7],[382,7]]},"eugene_cernan":{"position":[[275,7]]}}}],["stay",{"_index":232,"name":{},"body":{"alan_shepard":{"position":[[2056,4]]},"charles_duke":{"position":[[700,4]]},"david_scott":{"position":[[2400,4]]},"edgar_mitchell":{"position":[[1117,4]]},"james_irwin":{"position":[[854,4]]}}}],["step",{"_index":729,"name":{},"body":{"neil_armstrong":{"position":[[694,4]]}}}],["stormsaft",{"_index":31,"name":{},"body":{"alan_bean":{"position":[[314,11]]}}}],["stratigraph",{"_index":609,"name":{},"body":{"harrison_schmitt":{"position":[[530,13]]}}}],["stuart",{"_index":202,"name":{},"body":{"alan_shepard":{"position":[[1449,6]]},"edgar_mitchell":{"position":[[580,6]]}}}],["suborbit",{"_index":130,"name":{},"body":{"alan_shepard":{"position":[[273,10]]}}}],["subsatellit",{"_index":463,"name":{},"body":{"david_scott":{"position":[[3396,12]]},"james_irwin":{"position":[[1870,12]]}}}],["subsequ",{"_index":214,"name":{},"body":{"alan_shepard":{"position":[[1658,12]]},"charles_duke":{"position":[[822,10],[1712,10]]},"david_scott":{"position":[[1059,10],[3817,10]]},"edgar_mitchell":{"position":[[719,12],[1499,12]]},"eugene_cernan":{"position":[[766,12],[1796,10]]},"james_irwin":{"position":[[2301,10]]},"neil_armstrong":{"position":[[725,12]]}}}],["success",{"_index":258,"name":{},"body":{"buzz_aldrin":{"position":[[245,10]]},"david_scott":{"position":[[316,10]]},"eugene_cernan":{"position":[[2758,10]]},"neil_armstrong":{"position":[[473,10]]}}}],["successfulli",{"_index":578,"name":{},"body":{"eugene_cernan":{"position":[[3684,12]]},"john_young":{"position":[[2592,12]]}}}],["support",{"_index":282,"name":{},"body":{"charles_duke":{"position":[[103,7]]},"david_scott":{"position":[[946,7]]},"edgar_mitchell":{"position":[[120,7]]},"james_irwin":{"position":[[245,7]]},"pete_conrad":{"position":[[1258,7]]}}}],["surfac",{"_index":36,"name":{},"body":{"alan_bean":{"position":[[382,8],[414,7]]},"alan_shepard":{"position":[[1976,8],[2025,8],[2048,7],[2092,7],[2243,8]]},"buzz_aldrin":{"position":[[526,7]]},"charles_duke":{"position":[[568,7],[692,7],[859,8],[1152,7],[1331,8]]},"david_scott":{"position":[[2324,7],[2392,7],[2554,8],[2792,7],[2891,7],[2928,7],[3312,8],[3342,7]]},"edgar_mitchell":{"position":[[1037,8],[1086,8],[1109,7],[1153,7],[1302,8]]},"eugene_cernan":{"position":[[1538,8],[3050,7],[3282,8],[4328,7]]},"harrison_schmitt":{"position":[[1464,7]]},"james_irwin":{"position":[[782,7],[846,7],[1007,8],[1259,7],[1358,7],[1395,7],[1787,8],[1817,7]]},"neil_armstrong":{"position":[[706,8]]}}}],["surgeri",{"_index":190,"name":{},"body":{"alan_shepard":{"position":[[1249,7]]}}}],["survey",{"_index":295,"name":{},"body":{"charles_duke":{"position":[[535,7]]},"david_scott":{"position":[[2739,6]]},"james_irwin":{"position":[[1192,6]]}}}],["system",{"_index":168,"name":{},"body":{"alan_shepard":{"position":[[925,7]]},"david_scott":{"position":[[954,8]]},"eugene_cernan":{"position":[[1741,7]]},"john_young":{"position":[[1604,7],[1724,7],[1836,8]]},"pete_conrad":{"position":[[805,7],[866,8]]}}}],["target",{"_index":504,"name":{},"body":{"eugene_cernan":{"position":[[391,6],[751,7],[3441,8],[3883,6]]},"harrison_schmitt":{"position":[[1725,6]]},"john_young":{"position":[[633,6]]}}}],["task",{"_index":571,"name":{},"body":{"eugene_cernan":{"position":[[3367,5]]}}}],["tauru",{"_index":550,"name":{},"body":{"eugene_cernan":{"position":[[2602,6],[2810,6]]},"harrison_schmitt":{"position":[[1085,6]]}}}],["technic",{"_index":707,"name":{},"body":{"john_young":{"position":[[2947,9]]}}}],["techniqu",{"_index":238,"name":{},"body":{"alan_shepard":{"position":[[2176,11]]},"david_scott":{"position":[[1374,10]]},"edgar_mitchell":{"position":[[1237,11]]},"eugene_cernan":{"position":[[320,10],[1619,9]]}}}],["technolog",{"_index":739,"name":{},"body":{"neil_armstrong":{"position":[[945,10]]}}}],["televis",{"_index":452,"name":{},"body":{"david_scott":{"position":[[2952,9]]},"james_irwin":{"position":[[1419,9]]},"pete_conrad":{"position":[[694,10],[855,10]]}}}],["ten",{"_index":383,"name":{},"body":{"david_scott":{"position":[[784,3]]},"eugene_cernan":{"position":[[486,3]]},"john_young":{"position":[[2657,3]]}}}],["tent",{"_index":534,"name":{},"body":{"eugene_cernan":{"position":[[1989,9]]}}}],["termin",{"_index":360,"name":{},"body":{"david_scott":{"position":[[236,10]]},"edgar_mitchell":{"position":[[439,10]]}}}],["test",{"_index":98,"name":{},"body":{"alan_bean":{"position":[[1102,4]]},"david_scott":{"position":[[732,4]]},"eugene_cernan":{"position":[[1024,4]]},"james_irwin":{"position":[[178,5]]},"john_young":{"position":[[294,4],[1660,5],[1930,4],[2017,6],[2636,4]]}}}],["texa",{"_index":457,"name":{},"body":{"david_scott":{"position":[[3090,6]]},"james_irwin":{"position":[[1566,6]]}}}],["themselv",{"_index":444,"name":{},"body":{"david_scott":{"position":[[2592,10]]},"james_irwin":{"position":[[1045,10]]}}}],["thermal",{"_index":410,"name":{},"body":{"david_scott":{"position":[[1625,7]]},"james_irwin":{"position":[[163,7]]}}}],["third",{"_index":3,"name":{},"body":{"alan_bean":{"position":[[25,5]]},"alan_shepard":{"position":[[1418,5]]},"buzz_aldrin":{"position":[[22,5]]},"david_scott":{"position":[[21,5],[562,5],[1864,5]]},"eugene_cernan":{"position":[[2118,5]]},"john_young":{"position":[[811,5]]}}}],["thirti",{"_index":666,"name":{},"body":{"john_young":{"position":[[1893,6]]}}}],["thoma",{"_index":291,"name":{},"body":{"charles_duke":{"position":[[430,6]]},"eugene_cernan":{"position":[[1122,6]]}}}],["three",{"_index":307,"name":{},"body":{"charles_duke":{"position":[[816,5]]},"david_scott":{"position":[[221,5],[2513,5],[3555,5]]},"eugene_cernan":{"position":[[304,5],[2745,5],[2864,5],[3708,5]]},"harrison_schmitt":{"position":[[1244,5]]},"james_irwin":{"position":[[966,5],[2045,5]]},"john_young":{"position":[[1369,5],[1900,5]]}}}],["through",{"_index":473,"name":{},"body":{"edgar_mitchell":{"position":[[314,7]]}}}],["thruster",{"_index":364,"name":{},"body":{"david_scott":{"position":[[277,9],[416,8]]},"john_young":{"position":[[1801,10]]}}}],["ticonderoga",{"_index":349,"name":{},"body":{"charles_duke":{"position":[[1743,12]]},"eugene_cernan":{"position":[[3943,12]]},"harrison_schmitt":{"position":[[1786,12]]}}}],["time",{"_index":233,"name":{},"body":{"alan_shepard":{"position":[[2061,4]]},"david_scott":{"position":[[2405,5]]},"edgar_mitchell":{"position":[[1122,4]]},"eugene_cernan":{"position":[[3179,4]]},"harrison_schmitt":{"position":[[1593,4]]},"james_irwin":{"position":[[859,4]]},"john_young":{"position":[[98,5],[126,5]]}}}],["togeth",{"_index":710,"name":{},"body":{"john_young":{"position":[[3015,9]]}}}],["tom",{"_index":495,"name":{},"body":{"eugene_cernan":{"position":[[134,3]]},"john_young":{"position":[[887,3]]}}}],["ton",{"_index":677,"name":{},"body":{"john_young":{"position":[[2219,4],[3101,4]]}}}],["total",{"_index":486,"name":{},"body":{"edgar_mitchell":{"position":[[1448,5]]}}}],["track",{"_index":643,"name":{},"body":{"john_young":{"position":[[1000,7]]}}}],["train",{"_index":155,"name":{},"body":{"alan_shepard":{"position":[[681,8]]},"edgar_mitchell":{"position":[[57,8]]},"harrison_schmitt":{"position":[[118,8],[179,8]]}}}],["trajectori",{"_index":129,"name":{},"body":{"alan_shepard":{"position":[[262,10]]}}}],["tran",{"_index":521,"name":{},"body":{"eugene_cernan":{"position":[[1416,5]]}}}],["transearth",{"_index":328,"name":{},"body":{"charles_duke":{"position":[[1443,10]]},"david_scott":{"position":[[3494,10]]},"eugene_cernan":{"position":[[3639,10]]},"james_irwin":{"position":[[1977,10]]}}}],["transfer",{"_index":402,"name":{},"body":{"david_scott":{"position":[[1337,8]]},"john_young":{"position":[[739,8]]},"neil_armstrong":{"position":[[298,11]]}}}],["transport",{"_index":224,"name":{},"body":{"alan_shepard":{"position":[[1878,11]]},"david_scott":{"position":[[2582,9]]},"edgar_mitchell":{"position":[[939,11]]},"james_irwin":{"position":[[1035,9]]}}}],["travers",{"_index":231,"name":{},"body":{"alan_shepard":{"position":[[1953,9]]},"david_scott":{"position":[[3293,9]]},"edgar_mitchell":{"position":[[1014,9]]},"james_irwin":{"position":[[1768,9]]},"john_young":{"position":[[1392,10]]}}}],["tube",{"_index":243,"name":{},"body":{"alan_shepard":{"position":[[2229,4]]},"edgar_mitchell":{"position":[[1288,4]]}}}],["tv",{"_index":240,"name":{},"body":{"alan_shepard":{"position":[[2209,2]]},"david_scott":{"position":[[2970,2]]},"edgar_mitchell":{"position":[[1268,2]]},"james_irwin":{"position":[[1446,2]]}}}],["twice",{"_index":586,"name":{},"body":{"eugene_cernan":{"position":[[4065,5]]}}}],["two",{"_index":367,"name":{},"body":{"david_scott":{"position":[[338,3]]},"edgar_mitchell":{"position":[[524,3]]},"eugene_cernan":{"position":[[472,3],[4124,3],[4161,3]]},"john_young":{"position":[[614,3]]},"neil_armstrong":{"position":[[495,3]]}}}],["u.",{"_index":470,"name":{},"body":{"edgar_mitchell":{"position":[[273,4]]},"pete_conrad":{"position":[[593,4]]}}}],["ulf",{"_index":692,"name":{},"body":{"john_young":{"position":[[2551,3]]}}}],["unit",{"_index":91,"name":{},"body":{"alan_bean":{"position":[[1032,6]]},"eugene_cernan":{"position":[[2229,6]]},"harrison_schmitt":{"position":[[754,6],[1316,6]]},"pete_conrad":{"position":[[162,6],[438,6]]}}}],["unman",{"_index":672,"name":{},"body":{"john_young":{"position":[[2087,8]]}}}],["up",{"_index":406,"name":{},"body":{"david_scott":{"position":[[1526,2]]},"john_young":{"position":[[1217,2]]}}}],["upland",{"_index":210,"name":{},"body":{"alan_shepard":{"position":[[1600,6]]},"edgar_mitchell":{"position":[[661,6]]}}}],["us",{"_index":222,"name":{},"body":{"alan_shepard":{"position":[[1854,3],[2136,3],[2194,3]]},"charles_duke":{"position":[[1105,3]]},"david_scott":{"position":[[2563,5],[2962,5],[3327,3]]},"edgar_mitchell":{"position":[[915,3],[1197,3],[1255,3]]},"eugene_cernan":{"position":[[299,4],[1644,3]]},"james_irwin":{"position":[[1016,5],[1438,5],[1802,3]]},"john_young":{"position":[[3062,4]]}}}],["usa",{"_index":691,"name":{},"body":{"john_young":{"position":[[2543,3]]}}}],["uss",{"_index":348,"name":{},"body":{"charles_duke":{"position":[[1739,3]]},"david_scott":{"position":[[1747,3],[3844,3]]},"eugene_cernan":{"position":[[701,3],[3939,3]]},"harrison_schmitt":{"position":[[1782,3]]},"james_irwin":{"position":[[2328,3]]}}}],["uv",{"_index":326,"name":{},"body":{"charles_duke":{"position":[[1377,2]]}}}],["v",{"_index":377,"name":{},"body":{"david_scott":{"position":[[642,2]]},"pete_conrad":{"position":[[99,2]]}}}],["vacuum",{"_index":615,"name":{},"body":{"james_irwin":{"position":[[171,6]]}}}],["valor",{"_index":485,"name":{},"body":{"edgar_mitchell":{"position":[[541,5]]}}}],["variou",{"_index":215,"name":{},"body":{"alan_shepard":{"position":[[1694,7]]},"edgar_mitchell":{"position":[[755,7]]}}}],["vehicl",{"_index":127,"name":{},"body":{"alan_shepard":{"position":[[239,7]]},"david_scott":{"position":[[342,8]]},"james_irwin":{"position":[[126,7]]},"john_young":{"position":[[640,9],[2149,7]]},"neil_armstrong":{"position":[[499,8]]}}}],["vehicular",{"_index":353,"name":{},"body":{"charles_duke":{"position":[[1865,9]]}}}],["ventur",{"_index":333,"name":{},"body":{"charles_duke":{"position":[[1539,8]]}}}],["verif",{"_index":380,"name":{},"body":{"david_scott":{"position":[[719,12]]},"eugene_cernan":{"position":[[1004,12]]}}}],["verifi",{"_index":656,"name":{},"body":{"john_young":{"position":[[1581,8]]}}}],["vice",{"_index":751,"name":{},"body":{"pete_conrad":{"position":[[627,4],[931,4],[1014,4],[1160,4],[1221,4],[1300,4]]}}}],["vidicon",{"_index":242,"name":{},"body":{"alan_shepard":{"position":[[2221,7]]},"edgar_mitchell":{"position":[[1280,7]]}}}],["visit",{"_index":426,"name":{},"body":{"david_scott":{"position":[[2133,5]]},"james_irwin":{"position":[[591,5]]}}}],["vital",{"_index":339,"name":{},"body":{"charles_duke":{"position":[[1595,5]]},"david_scott":{"position":[[808,5]]}}}],["voyag",{"_index":542,"name":{},"body":{"eugene_cernan":{"position":[[2391,6]]},"harrison_schmitt":{"position":[[887,6]]}}}],["w",{"_index":289,"name":{},"body":{"charles_duke":{"position":[[394,2]]},"eugene_cernan":{"position":[[1173,2]]}}}],["walk",{"_index":479,"name":{},"body":{"edgar_mitchell":{"position":[[399,4]]},"eugene_cernan":{"position":[[450,4],[4003,6]]}}}],["washington",{"_index":736,"name":{},"body":{"neil_armstrong":{"position":[[826,11]]}}}],["wasp",{"_index":513,"name":{},"body":{"eugene_cernan":{"position":[[705,4]]}}}],["week",{"_index":594,"name":{},"body":{"harrison_schmitt":{"position":[[96,4]]}}}],["weigh",{"_index":675,"name":{},"body":{"john_young":{"position":[[2202,7],[3084,7]]}}}],["well",{"_index":719,"name":{},"body":{"neil_armstrong":{"position":[[159,4]]}}}],["west",{"_index":694,"name":{},"body":{"john_young":{"position":[[2566,4]]}}}],["william",{"_index":596,"name":{},"body":{"harrison_schmitt":{"position":[[130,8]]}}}],["wing",{"_index":673,"name":{},"body":{"john_young":{"position":[[2134,6]]}}}],["within",{"_index":397,"name":{},"body":{"david_scott":{"position":[[1136,6]]},"eugene_cernan":{"position":[[655,6],[1501,6]]}}}],["without",{"_index":670,"name":{},"body":{"john_young":{"position":[[2059,7]]}}}],["worden",{"_index":422,"name":{},"body":{"david_scott":{"position":[[1991,6],[3541,6]]},"james_irwin":{"position":[[490,7],[2031,6]]}}}],["work",{"_index":570,"name":{},"body":{"eugene_cernan":{"position":[[3362,4]]},"john_young":{"position":[[2681,6]]},"neil_armstrong":{"position":[[956,4]]}}}],["world",{"_index":69,"name":{},"body":{"alan_bean":{"position":[[766,5]]},"eugene_cernan":{"position":[[4059,5]]}}}],["world'",{"_index":745,"name":{},"body":{"pete_conrad":{"position":[[266,7]]}}}],["x",{"_index":723,"name":{},"body":{"neil_armstrong":{"position":[[180,1]]}}}],["xi",{"_index":743,"name":{},"body":{"pete_conrad":{"position":[[235,3]]}}}],["xii",{"_index":746,"name":{},"body":{"pete_conrad":{"position":[[329,4]]}}}],["year",{"_index":748,"name":{},"body":{"pete_conrad":{"position":[[502,5]]}}}],["young",{"_index":290,"name":{"john_young":{"position":[[5,5]]}},"body":{"charles_duke":{"position":[[397,5],[649,5]]},"eugene_cernan":{"position":[[1176,5]]},"john_young":{"position":[[19,5],[442,5],[532,6],[656,5],[842,5],[1131,5],[1198,5],[2227,5],[3109,5]]}}}],["young’",{"_index":649,"name":{},"body":{"john_young":{"position":[[1403,7],[2301,7]]}}}]],"pipeline":["stemmer"]}

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = [{"id":"alan_bean","name":"alan bean","body":"Alan Bean was one of the third group of astronauts named by NASA in October 1963. He served as backup astronaut for the Gemini 10 and Apollo 9 missions. Captain Bean was lunar module pilot on Apollo 12, mans second lunar landing. In November 1969, Captain Bean and Captain Pete Conrad landed in the moons Ocean of Stormsafter a flight of some 250,000 miles. They explored the lunar surface, deployed several lunar surface experiments, and installed the first nuclear power generator station on the moon to provide the power source. Captain Richard Gordon remained in lunar orbit photographing landing sites for future missions. Captain Bean was spacecraft commander of Skylab Mission II (SL-3), July 29 to September 25, 1973. With him on the 59-day, 24,400,000 mile world record setting flight were scientist-astronaut Dr. Owen K. Garriott and Marine Corps Lieutenant Colonel Jack R. Lousma. Mission II accomplished 150% of its pre-mission forecast goals. On his next assignment, Captain Bean was backup spacecraft commander of the United States flight crew for the joint American-Russian Apollo-Soyuz Test Project. Captain Bean has logged 1,671 hours and 45 minutes in spaceof which 10 hours and 26 minutes were spent in EVAs on the moon and in earth orbit.\n"},{"id":"alan_shepard","name":"alan shepard","body":"Rear Admiral Shepard was one of the Mercury astronauts named by NASA in April 1959, and he holds the distinction of being the first American to journey into space. On May 5, 1961, in the Freedom 7 spacecraft, he was launched by a Redstone vehicle on a ballistic trajectory suborbital flight--a flight which carried him to an altitude of 116 statute miles and to a landing point 302 statute miles down the Atlantic Missile Range. In 1963, he was designated Chief of the Astronaut Office with responsibility for monitoring the coordination, scheduling, and control of all activities involving NASA astronauts. This included monitoring the development and implementation of effective training programs to assure the flight readiness of available pilot/non-pilot personnel for assignment to crew positions on manned space flights; furnishing pilot evaluations applicable to the design, construction, and operations of spacecraft systems and related equipment; and providing qualitative scientific and engineering observations to facilitate overall mission planning, formulation of feasible operational procedures, and selection and conduct of specific experiments for each flight. He was restored to full flight status in May 1969, following corrective surgery for an inner ear disorder. Shepard made his second space flight as spacecraft commander on Apollo 14, January 31 - February 9, 1971. He was accompanied on man's third lunar landing mission by Stuart A. Roosa, command module pilot, and Edgar D. Mitchell, lunar module pilot. Maneuvering their lunar module, \"Antares,\" to a landing in the hilly upland Fra Mauro region of the moon, Shepard and Mitchell subsequently deployed and activated various scientific equipment and experiments and collected almost 100 pounds of lunar samples for return to earth. Other Apollo 14 achievements included: first use of Mobile Equipment Transporter (MET); largest payload placed in lunar orbit; longest distance traversed on the lunar surface; largest payload returned from the lunar surface; longest lunar surface stay time (33 hours); longest lunar surface EVA (9 hours and 17 minutes); first use of shortened lunar orbit rendezvous techniques; first use of colored TV with new vidicon tube on lunar surface; and first extensive orbital science period conducted during CSM solo operations.\n"},{"id":"buzz_aldrin","name":"buzz aldrin","body":"Aldrin was one of the third group of astronauts named by NASA in October 1963. On November 11, 1966, he and command pilot James Lovell were launched into space in the Gemini 12 spacecraft on a 4-day flight, which brought the Gemini program to a successful close. Aldrin established a new record for extravehicular activity (EVA), spending 5-1/2 hours outside the spacecraft. He served as lunar module pilot for Apollo 11, July 16-24, 1969, the first manned lunar landing mission. Aldrin followed Neil Armstrong onto the lunar surface on July 20, 1969, completing a 2-hour and 15 minute lunar EVA. In July 1971, Aldrin resigned from NASA. Aldrin has logged 289 hours and 53 minutes in space, of which, 7 hours and 52 minutes were spent in EVA.\n"},{"id":"charles_duke","name":"charles duke","body":"Duke was one of the 19 astronauts selected by NASA in April 1966. He served as member of the astronaut support crew for the Apollo 10 flight. He was CAPCOM for Apollo 11, the first landing on the Moon and he served as backup lunar module pilot on Apollo 13. Duke served as lunar module pilot of Apollo 16, April 16-27, 1972. He was accompanied on the fifth manned lunar landing mission by John W. Young (spacecraft commander) and Thomas K. Mattingly II (command module pilot). Apollo 16 was the first scientific expedition to inspect, survey, and sample materials and surface features in the Descartes region of the rugged lunar highlands. Duke and Young commenced their record setting lunar surface stay of 71 hours and 14 minutes by maneuvering the lunar module \"Orion\" to a landing on the rough Cayley Plains. In three subsequent excursions onto the lunar surface, they each logged 20 hours and 15 minutes in extravehicular activities involving the emplacement and activation of scientific equipment and experiments, the collection of nearly 213 pounds of rock and soil samples, and the evaluation and use of Rover-2 over the roughest and blockiest surface yet encountered on the moon. Other Apollo 16 achievements included the largest payload placed in lunar orbit (76, 109 pounds); first cosmic ray detector deployed on lunar surface; first lunar observatory with the far UV camera; and longest in-flight EVA from a command module during transearth coast (1 hour and 13 minutes). The latter feat was accomplished by Mattingly when he ventured out to \"Casper's\" SIM-bay for the retrieval of vital film cassettes from the panoramic and mapping cameras. Apollo 16 concluded with a Pacific Ocean splashdown and subsequent recovery by the USS TICONDEROGA. With the completion of his first space flight, Duke has logged 265 hours in space and over 21 hours of extra vehicular activity. Duke also served as backup lunar module pilot for Apollo 17.\n"},{"id":"david_scott","name":"david scott","body":"Scott was one of the third group of astronauts named by NASA in October 1963. On March 16, 1966, he and command pilot Neil Armstrong were launched into space on the Gemini 8 mission--a flight originally scheduled to last three days but terminated early due to a malfunctioning thruster. The crew performed the first successful docking of two vehicles in space and demonstrated great piloting skill in overcoming the thruster problem and bringing the spacecraft to a safe landing. Scott served as command module pilot for Apollo 9, March 3-13, 1969. This was the third manned flight in the Apollo series, the second to be launched by a Saturn V, and the first to complete a comprehensive earth-orbital qualification and verification test of a \"fully configured Apollo spacecraft.\" The ten-day flight provided vital information previously not available on the operational performance, stability, and reliability of lunar module propulsion and life support systems. Highlight of this evaluation was completion of a critical lunar-orbit rendezvous simulation and subsequent docking, initiated by James McDivitt and Russell Schweickart from within the lunar module at a separation distance which exceeded 100 miles from the command/service module piloted by Scott. The crew also demonstrated and confirmed the operational feasibility of crew transfer and extravehicular activity techniques and equipment, with Schweickart completing a 46-minute EVA outside the lunar module. During this period, Dave Scott completed a 1-hour stand-up EVA in the open command module hatch photographing Schweickart's activities and also retrieving thermal samples from the command module exterior. Apollo 9 splashed down less than four miles from the helicopter carrier USS GUADALCANAL. In his next assignment, Scott was designated backup spacecraft commander for Apollo 12. He made his third space flight as spacecraft commander of Apollo 15, July 26 - August 7, 1971. His companions on the flight were Alfred M. Worden (command module pilot) and James B. Irwin (lunar module pilot). Apollo 15 was the fourth manned lunar landing mission and the first to visit and explore the moon's Hadley Rille and Apennine Mountains which are located on the southeast edge of the Mare Imbrium (Sea of Rains). The lunar module, \"Falcon,\" remained on the lunar surface for 66 hours and 54 minutes (setting a new record for lunar surface stay time) and Scott and Irwin logged 18 hours and 35 minutes each in extravehicular activities conducted during three separate excursions onto the lunar surface. Using \"Rover-1\" to transport themselves and their equipment along portions of Hadley Rille and the Apennine Mountains, Scott and Irwin performed a selenological inspection and survey of the area and collected 180 pounds of lunar surface materials. They deployed an ALSEP package which involved the emplacement and activation of surface experiments, and their lunar surface activities were televised using a TV camera which was operated remotely by ground controllers stationed in the mission control center located at Houston, Texas. Other Apollo 15 achievements include: largest payloads ever placed into earth and lunar orbits; first scientific instrument module bay flown and operated on an Apollo spacecraft; longest distance traversed on lunar surface; first use of a lunar surface navigation device (mounted on Rover-1); first subsatellite launched in lunar orbit; and first extravehicular (EVA) from a command module during transearth coast. The latter feat performed by Worden during three excursions to \"Endeavour's\" SIM-bay where he retrieved film cassettes from the panoramic and mapping cameras and reported his personal observations of the general condition of equipment housed there. Apollo 15 concluded with a Pacific Ocean splashdown and subsequent recovery by the USS OKINAWA.\n"},{"id":"edgar_mitchell","name":"edgar mitchell","body":"Mitchell was a member of Group 5, selected for astronaut training in April 1966. He served as a member of the astronaut support crew for Apollo 9 and as backup lunar module pilot for Apollo 10. On January 31, 1971, serving as lunar module pilot, Dr. Edgar Mitchell, then a U.S. Navy Captain, embarked on a journey through outer space of some 500,000 miles that resulted in becoming the sixth man to walk on the moon. That historic journey terminated safely nine days later on February 9, 1971 and was made in the company of two other men of valor Admiral Alan Shepard and Colonel Stuart Roosa. Maneuvering their lunar module, Antares, to a landing in the hilly upland Fra Mauro region of the moon, Shepard and Mitchell subsequently deployed and activated various scientific equipment and experiments and collected almost 100 pounds of lunar samples for return to Earth. Other Apollo 14 achievements included: first use of Mobile Equipment Transporter (MET); largest payload placed in lunar orbit; longest distance traversed on the lunar surface; largest payload returned from the lunar surface; longest lunar surface stay time (33 hours); longest lunar surface EVA (9 hours and 17 minutes); first use of shortened lunar orbit rendezvous techniques; first use of color TV with new vidicon tube on lunar surface; and first extensive orbital science period conducted during CSM solo operations. In completing his first space flight, Mitchell logged a total of 216 hours and 42 minutes in space. He was subsequently designated to serve as backup lunar module pilot for Apollo 16.\n"},{"id":"eugene_cernan","name":"eugene cernan","body":"Captain Cernan was one of fourteen astronauts selected by NASA in October 1963. He occupied the pilot seat alongside of command pilot Tom Stafford on the Gemini IX mission. During this 3-day flight which Began on June 3, 1966, the spacecraft achieved a circular orbit of 161 statute miles; the crew used three different techniques to effect rendezvous with the previously launched Augmented Target Docking Adapter; and Cernan, the second American to walk in space, logged two hours and ten minutes outside the spacecraft in extravehicular activities. The flight ended after 72 hours and 20 minutes with a perfect re-entry and recovery as Gemini IX landed within 1-1/2 miles of the prime recovery ship USS WASP and 3/8 of a mile from the predetermined target. Cernan subsequently served as backup pilot for Gemini 12 and as backup lunar module pilot for Apollo 7. On his second space flight, he was lunar module pilot of Apollo 10, May 18-26, 1969, the first comprehensive lunar-orbital qualification and verification flight test of an Apollo lunar module. He was accompanied on the 248,000 nautical sojourn to the moon by Thomas P. Stafford (spacecraft commander) and John W. Young (commander module pilot). In accomplishing all of the assigned objectives of this mission, Apollo 10 confirmed the operations performance, stability, and reliability of the command/service module and lunar module configuration during trans-lunar coast, lunar orbit insertion, and lunar module separation and descent to within 8 nautical miles of the lunar surface. The latter maneuver involved employing all but the final minutes of the technique prescribed for use in an actual lunar landing, and allowed critical evaluations of the lunar module propulsions systems and rendezvous of the landing radar devices in subsequent rendezvous and re-docking maneuvers. In addition to demonstrating that man could navigate safely and accurately in the moon's gravitational fields, Apollo 10 photographed and mapped tentative landing sites for future missions. Cernan's next assignment was backup spacecraft commander for Apollo 14. He made his third space flight as spacecraft commander of Apollo 17--the last scheduled manned mission to the moon for the United States--which commenced at 11:33 P.M. (CST), December 6, 1972, with the first manned nighttime launch, and concluded on December 19, 1972. With him on the voyage of the command module \"America\" and the lunar module \"Challenger\" were Ronald Evans (command module pilot) and Harrison H. (Jack) Schmitt (lunar module pilot). In maneuvering \"Challenger\" to a landing at Taurus-Littrow, located on the southeast edge of Mare Serenitatis, Cernan and Schmitt activated a base of operations from which they completed three highly successful excursions to the nearby craters and the Taurus mountains, making the Moon their home for over three days. This last mission to the moon established several new records for manned space flight that include: longest manned lunar landing flight (301 hours 51 minutes); longest lunar surface extravehicular activities (22 hours 6 minutes); largest lunar sample return (an estimated 115 kg (249 lbs.); and longest time in lunar orbit (147 hours 48 minutes). While Cernan and Schmitt conducted activities on the lunar surface, Evans remained in lunar orbit aboard the \"America\" completing assigned work tasks requiring geological observations, handheld photography of specific targets, and the control of cameras and other highly sophisticated scientific equipment carried in the command module SIM-bay. Evans also completed a 1-hour, 6-minute extravehicular activity on the transearth coast phase of the return flight, successfully retrieving three camera cassettes and completing a personal inspection of the equipment bay area. Apollo 17 ended with a splashdown in the Pacific Ocean approximately 0.4 miles from the target point and 4.3 miles form the prime recovery ship USS TICONDEROGA. Captain Cernan was the second American to have walked in space having spanned the circumference of the world twice in a little more than 2-1/2 hours. He was one of the two men to have flown to the moon on two occasions, and as commander of the last mission to the moon, Apollo 17, had the privilege and distinction of being the last man to have left his footprints on the surface of the moon.\n"},{"id":"harrison_schmitt","name":"harrison schmitt","body":"Dr. Schmitt was selected as a scientist-astronaut by NASA in June 1965. He later completed a 53-week course in flight training at Williams Air Force Base, Arizona. In addition to training for future manned space flights. He was instrumental in providing Apollo flight crews with detailed instruction in lunar navigation, geology, and feature recognition. Schmitt also assisted in the integration of scientific activities into the Apollo lunar missions and participated in research activities requiring geologic, petrographic, and stratigraphic analyses of samples returned from the moon by Apollo missions. On his first journey into space, Dr. Schmitt occupied the lunar module pilot seat for Apollo 17 -- the last scheduled manned Apollo mission to the United States --which commenced at 11:33 p.m. (CST), December 6, 1972, and concluded on December 19, 1972. He was accompanied on the voyage of the command module \"America\" and the lunar module \"Challenger\" by Eugene Cernan (spacecraft commander) and Ronald Evans (command module pilot). In maneuvering \"Challenger\" to a landing at Taurus-Littrow, which is located on the southeast edge of Mare Serenitatis, Schmitt and Cernan activated a base of operations facilitating their completion of three days of exploration. This last Apollo mission to the moon for the United States broke several records set by previous flights and include: longest manned lunar landing flight (301 hours, 51 minutes); longest lunar surface extravehicular activities (22 hours, 4 minutes); largest lunar sample return (an estimated 115 Kg, 249 lbs); and longest time in lunar orbit (147 hours, 48 minutes). Apollo 17 ended with a splashdown in the Pacific Ocean approximately 0.4 mile from the target point and 4.3 miles from the prime recovery ship, USS TICONDEROGA.\n"},{"id":"james_irwin","name":"james irwin","body":"Colonel Irwin was one of the 19 astronauts selected by NASA in April 1966. He was crew commander of lunar module (LTA-8)-this vehicle finished the first series of thermal vacuum tests on June 1, 1968. He also served as a member of the astronaut support crew for Apollo 10 and as backup lunar module pilot for the Apollo 12 flight. Irwin served as lunar module pilot for Apollo, July 26 to August 7, 1971. His companions on the flight were David R. Scott, spacecraft commander and Alfred M. Worden, command module pilot. Apollo 15 was the fourth manned lunar landing mission and the first to visit and explore the moon's Hadley Rille and Apennine Mountains which are located on the southeast edge of the Mare Imbrium (Sea of Rains). The lunar module, \"Falcon\", remained on the lunar surface for 66 hours, 54 minutes-setting a new record for lunar surface stay time-and Scott and Irwin logged 18 hours and 35 minutes each in extravehicular activities conducted during three separate excursions onto the lunar surface. Using \"Rover-l\" to transport themselves and their equipment along portions of Hadley Rille and the Apinnine Mountains, Scott and Irwin performed a selenological inspection and survey of the area and collected approximately 180 pounds of lunar surface materials. They deployed an ALSEP package which involved the emplacement and activation of surface experiments, and their lunar surface activities were televised in color using a TV camera which was operated remotely by ground controllers stationed in the mission control center located at Houston, Texas. Other Apollo 15 achievements included: largest payloads ever placed in earth and lunar orbits; first scientific instrument module bay flown and operated on an Apollo spacecraft; longest distance traversed on lunar surface; first use of a lunar surface navigation device, mounted on Rover 1; first subsatellite launched in lunar orbit; and first extravehicular activity (EVA) from a command module during transearth coast. The latter feat was accomplished by Worden during three excursions to \"Endeavour's\" SIM bay where he retrieved film cassettes from the panoramic and mapping cameras and reported his personal observations of the general condition of equipment housed there. Apollo 15 concluded with a Pacific splashdown and subsequent recovery by the USS OKINAWA.\n"},{"id":"john_young","name":"john young","body":"In September 1962, Young was selected as an astronaut. He is the first person to fly in space six times from earth, and seven times counting his lunar liftoff. The first flight was with Gus Grissom in Gemini 3, the first manned Gemini mission, on March 23, 1965. This was a complete end-to-end test of the Gemini spacecraft, during which Gus accomplished the first manual change of orbit altitude and plane and the first lifting reentry, and Young operated the first computer on a manned spacecraft. On Gemini 10, July 18-21, 1966, Young, as Commander, and Mike Collins, as Pilot, completed a dual rendezvous with two separate Agena target vehicles. While Young flew close formation on the second Agena, Mike Collins did an extravehicular transfer to retrieve a micro meteorite detector from that Agena. On his third flight, May 18-26, 1969, Young was Command Module Pilot of Apollo 10. Tom Stafford and Gene Cernan were also on this mission which orbited the Moon, completed a lunar rendezvous, and tracked proposed lunar landing sites. His fourth space flight, Apollo 16, April 16-27, 1972, was a lunar exploration mission, with Young as Spacecraft Commander, and Ken Mattingly and Charlie Duke. Young and Duke set up scientific equipment and explored the lunar highlands at Descartes. They collected 200 pounds of rocks and drove over 16 miles in the lunar rover on three separate geology traverses. Young’s fifth flight was as Spacecraft Commander of STS-1, the first flight of the Space Shuttle, April 12-14, 1981, with Bob Crippen as Pilot. The 54-1/2 hour, 36-orbit mission verified Space Shuttle systems performance during launch, on orbit, and entry. Tests of the Orbiter Columbia included evaluation of mechanical systems including the payload bay doors, the attitude and maneuvering rocket thrusters, guidance and navigation systems, and Orbiter/crew compatibility. One hundred and thirty three of the mission’s flight test objectives were accomplished. The Orbiter Columbia was the first manned spaceship tested during ascent, on orbit, and entry without benefit of previous unmanned missions. Columbia was also the first winged reentry vehicle to return from space to a runway landing. It weighed about 98 tons as Young landed it on the dry lakebed at Edwards Air Force Base, California. Young’s sixth flight was as Spacecraft Commander of STS-9, the first Spacelab mission, November 28-December 8, 1983, with Pilot Brewster Shaw, Mission Specialists Bob Parker and Owen Garriott, and Payload Specialists Byron Lichtenberg of the USA and Ulf Merbold of West Germany. The mission successfully completed all 94 of its flight test objectives. For ten days the 6-man crew worked 12-hour shifts around-the-clock, performing more than 70 experiments in the fields of atmospheric physics, Earth observations, space plasma physics, astronomy and solar physics, materials processing and life sciences. The mission returned more scientific and technical data than all the previous Apollo and Skylab missions put together. The Spacelab was brought back for re-use, so that Columbia weighed over 110 tons as Young landed the spaceship at Edwards Air Force Base, California.\n"},{"id":"neil_armstrong","name":"neil armstrong","body":"As a research pilot at NASA’s Flight Research Center, Edwards, California, Armstrong was a project pilot on many pioneering high speed aircraft, including the well known, 4000-mph X-15. He flew more than 200 different models of aircraft, including jets, rockets, helicopters and gliders. Armstrong transferred to astronaut status in 1962. He was assigned as command pilot for the Gemini 8 mission. Gemini 8 was launched on March 16, 1966, and Armstrong performed the first successful docking of two vehicles in space. As spacecraft commander for Apollo 11, the first manned lunar landing mission, Armstrong gained the distinction of being the first man to land a craft on the moon and first to step on its surface. Armstrong subsequently held the position of Deputy Associate Administrator for Aeronautics, NASA Headquarters, Washington, D.C. In this position, he was responsible for the coordination and management of overall NASA research and technology work related to aeronautics.\n"},{"id":"pete_conrad","name":"pete conrad","body":"In September of 1962, Mr. Conrad was selected as an astronaut by NASA. His first flight was Gemini V, which established the space endurance record and placed the United States in the lead for man-hours in space. As commander of Gemini XI, Mr. Conrad helped to set a world's altitude record. He then served as commander of Apollo XII, the second lunar landing. On Mr. Conrad's final mission, he served as commander of Skylab II, the first United States Space Station. In December 1973, after serving 20 years (11 of which were as an astronaut in the space program), Mr. Conrad retired from the U.S. Navy to accept a position as Vice President - Operations and Chief Operating Office of American Television and Communications Corporation (ATC). At ATC, he was responsible for both the operation of existing systems and the national development of new cable television systems. In 1976, he resigned from ATC to accept the position of Vice President and consultant to McDonnell Douglas Corporation. In 1978, he became Vice President of marketing and was responsible for all commercial and military sales for Douglas Aircraft Company. Mr. Conrad then became Senior Vice President-Marketing in 1980. He was appointed as Senior Vice President Marketing and Product Support in 1982 and 1984, was named Staff Vice President of International Business Development for McDonnell Douglas Corporation.\n"}]

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * lunr - http://lunrjs.com - A bit like Solr, but much smaller and not as bright - 2.3.0
	 * Copyright (C) 2018 Oliver Nightingale
	 * @license MIT
	 */

	;(function(){

	/**
	 * A convenience function for configuring and constructing
	 * a new lunr Index.
	 *
	 * A lunr.Builder instance is created and the pipeline setup
	 * with a trimmer, stop word filter and stemmer.
	 *
	 * This builder object is yielded to the configuration function
	 * that is passed as a parameter, allowing the list of fields
	 * and other builder parameters to be customised.
	 *
	 * All documents _must_ be added within the passed config function.
	 *
	 * @example
	 * var idx = lunr(function () {
	 *   this.field('title')
	 *   this.field('body')
	 *   this.ref('id')
	 *
	 *   documents.forEach(function (doc) {
	 *     this.add(doc)
	 *   }, this)
	 * })
	 *
	 * @see {@link lunr.Builder}
	 * @see {@link lunr.Pipeline}
	 * @see {@link lunr.trimmer}
	 * @see {@link lunr.stopWordFilter}
	 * @see {@link lunr.stemmer}
	 * @namespace {function} lunr
	 */
	var lunr = function (config) {
	  var builder = new lunr.Builder

	  builder.pipeline.add(
	    lunr.trimmer,
	    lunr.stopWordFilter,
	    lunr.stemmer
	  )

	  builder.searchPipeline.add(
	    lunr.stemmer
	  )

	  config.call(builder, builder)
	  return builder.build()
	}

	lunr.version = "2.3.0"
	/*!
	 * lunr.utils
	 * Copyright (C) 2018 Oliver Nightingale
	 */

	/**
	 * A namespace containing utils for the rest of the lunr library
	 * @namespace lunr.utils
	 */
	lunr.utils = {}

	/**
	 * Print a warning message to the console.
	 *
	 * @param {String} message The message to be printed.
	 * @memberOf lunr.utils
	 * @function
	 */
	lunr.utils.warn = (function (global) {
	  /* eslint-disable no-console */
	  return function (message) {
	    if (global.console && console.warn) {
	      console.warn(message)
	    }
	  }
	  /* eslint-enable no-console */
	})(this)

	/**
	 * Convert an object to a string.
	 *
	 * In the case of `null` and `undefined` the function returns
	 * the empty string, in all other cases the result of calling
	 * `toString` on the passed object is returned.
	 *
	 * @param {Any} obj The object to convert to a string.
	 * @return {String} string representation of the passed object.
	 * @memberOf lunr.utils
	 */
	lunr.utils.asString = function (obj) {
	  if (obj === void 0 || obj === null) {
	    return ""
	  } else {
	    return obj.toString()
	  }
	}

	/**
	 * Clones an object.
	 *
	 * Will create a copy of an existing object such that any mutations
	 * on the copy cannot affect the original.
	 *
	 * Only shallow objects are supported, passing a nested object to this
	 * function will cause a TypeError.
	 *
	 * Objects with primitives, and arrays of primitives are supported.
	 *
	 * @param {Object} obj The object to clone.
	 * @return {Object} a clone of the passed object.
	 * @throws {TypeError} when a nested object is passed.
	 * @memberOf Utils
	 */
	lunr.utils.clone = function (obj) {
	  if (obj === null || obj === undefined) {
	    return obj
	  }

	  var clone = Object.create(null),
	      keys = Object.keys(obj)

	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i],
	        val = obj[key]

	    if (Array.isArray(val)) {
	      clone[key] = val.slice()
	      continue
	    }

	    if (typeof val === 'string' ||
	        typeof val === 'number' ||
	        typeof val === 'boolean') {
	      clone[key] = val
	      continue
	    }

	    throw new TypeError("clone is not deep and does not support nested objects")
	  }

	  return clone
	}
	lunr.FieldRef = function (docRef, fieldName, stringValue) {
	  this.docRef = docRef
	  this.fieldName = fieldName
	  this._stringValue = stringValue
	}

	lunr.FieldRef.joiner = "/"

	lunr.FieldRef.fromString = function (s) {
	  var n = s.indexOf(lunr.FieldRef.joiner)

	  if (n === -1) {
	    throw "malformed field ref string"
	  }

	  var fieldRef = s.slice(0, n),
	      docRef = s.slice(n + 1)

	  return new lunr.FieldRef (docRef, fieldRef, s)
	}

	lunr.FieldRef.prototype.toString = function () {
	  if (this._stringValue == undefined) {
	    this._stringValue = this.fieldName + lunr.FieldRef.joiner + this.docRef
	  }

	  return this._stringValue
	}
	/*!
	 * lunr.Set
	 * Copyright (C) 2018 Oliver Nightingale
	 */

	/**
	 * A lunr set.
	 *
	 * @constructor
	 */
	lunr.Set = function (elements) {
	  this.elements = Object.create(null)

	  if (elements) {
	    this.length = elements.length

	    for (var i = 0; i < this.length; i++) {
	      this.elements[elements[i]] = true
	    }
	  } else {
	    this.length = 0
	  }
	}

	/**
	 * A complete set that contains all elements.
	 *
	 * @static
	 * @readonly
	 * @type {lunr.Set}
	 */
	lunr.Set.complete = {
	  intersect: function (other) {
	    return other
	  },

	  union: function (other) {
	    return other
	  },

	  contains: function () {
	    return true
	  }
	}

	/**
	 * An empty set that contains no elements.
	 *
	 * @static
	 * @readonly
	 * @type {lunr.Set}
	 */
	lunr.Set.empty = {
	  intersect: function () {
	    return this
	  },

	  union: function (other) {
	    return other
	  },

	  contains: function () {
	    return false
	  }
	}

	/**
	 * Returns true if this set contains the specified object.
	 *
	 * @param {object} object - Object whose presence in this set is to be tested.
	 * @returns {boolean} - True if this set contains the specified object.
	 */
	lunr.Set.prototype.contains = function (object) {
	  return !!this.elements[object]
	}

	/**
	 * Returns a new set containing only the elements that are present in both
	 * this set and the specified set.
	 *
	 * @param {lunr.Set} other - set to intersect with this set.
	 * @returns {lunr.Set} a new set that is the intersection of this and the specified set.
	 */

	lunr.Set.prototype.intersect = function (other) {
	  var a, b, elements, intersection = []

	  if (this.length < other.length) {
	    a = this
	    b = other
	  } else {
	    a = other
	    b = this
	  }

	  elements = Object.keys(a.elements)

	  for (var i = 0; i < elements.length; i++) {
	    var element = elements[i]
	    if (element in b.elements) {
	      intersection.push(element)
	    }
	  }

	  return new lunr.Set (intersection)
	}

	/**
	 * Returns a new set combining the elements of this and the specified set.
	 *
	 * @param {lunr.Set} other - set to union with this set.
	 * @return {lunr.Set} a new set that is the union of this and the specified set.
	 */

	lunr.Set.prototype.union = function (other) {
	  return new lunr.Set(Object.keys(this.elements).concat(Object.keys(other.elements)))
	}
	/**
	 * A function to calculate the inverse document frequency for
	 * a posting. This is shared between the builder and the index
	 *
	 * @private
	 * @param {object} posting - The posting for a given term
	 * @param {number} documentCount - The total number of documents.
	 */
	lunr.idf = function (posting, documentCount) {
	  var documentsWithTerm = 0

	  for (var fieldName in posting) {
	    if (fieldName == '_index') continue // Ignore the term index, its not a field
	    documentsWithTerm += Object.keys(posting[fieldName]).length
	  }

	  var x = (documentCount - documentsWithTerm + 0.5) / (documentsWithTerm + 0.5)

	  return Math.log(1 + Math.abs(x))
	}

	/**
	 * A token wraps a string representation of a token
	 * as it is passed through the text processing pipeline.
	 *
	 * @constructor
	 * @param {string} [str=''] - The string token being wrapped.
	 * @param {object} [metadata={}] - Metadata associated with this token.
	 */
	lunr.Token = function (str, metadata) {
	  this.str = str || ""
	  this.metadata = metadata || {}
	}

	/**
	 * Returns the token string that is being wrapped by this object.
	 *
	 * @returns {string}
	 */
	lunr.Token.prototype.toString = function () {
	  return this.str
	}

	/**
	 * A token update function is used when updating or optionally
	 * when cloning a token.
	 *
	 * @callback lunr.Token~updateFunction
	 * @param {string} str - The string representation of the token.
	 * @param {Object} metadata - All metadata associated with this token.
	 */

	/**
	 * Applies the given function to the wrapped string token.
	 *
	 * @example
	 * token.update(function (str, metadata) {
	 *   return str.toUpperCase()
	 * })
	 *
	 * @param {lunr.Token~updateFunction} fn - A function to apply to the token string.
	 * @returns {lunr.Token}
	 */
	lunr.Token.prototype.update = function (fn) {
	  this.str = fn(this.str, this.metadata)
	  return this
	}

	/**
	 * Creates a clone of this token. Optionally a function can be
	 * applied to the cloned token.
	 *
	 * @param {lunr.Token~updateFunction} [fn] - An optional function to apply to the cloned token.
	 * @returns {lunr.Token}
	 */
	lunr.Token.prototype.clone = function (fn) {
	  fn = fn || function (s) { return s }
	  return new lunr.Token (fn(this.str, this.metadata), this.metadata)
	}
	/*!
	 * lunr.tokenizer
	 * Copyright (C) 2018 Oliver Nightingale
	 */

	/**
	 * A function for splitting a string into tokens ready to be inserted into
	 * the search index. Uses `lunr.tokenizer.separator` to split strings, change
	 * the value of this property to change how strings are split into tokens.
	 *
	 * This tokenizer will convert its parameter to a string by calling `toString` and
	 * then will split this string on the character in `lunr.tokenizer.separator`.
	 * Arrays will have their elements converted to strings and wrapped in a lunr.Token.
	 *
	 * Optional metadata can be passed to the tokenizer, this metadata will be cloned and
	 * added as metadata to every token that is created from the object to be tokenized.
	 *
	 * @static
	 * @param {?(string|object|object[])} obj - The object to convert into tokens
	 * @param {?object} metadata - Optional metadata to associate with every token
	 * @returns {lunr.Token[]}
	 * @see {@link lunr.Pipeline}
	 */
	lunr.tokenizer = function (obj, metadata) {
	  if (obj == null || obj == undefined) {
	    return []
	  }

	  if (Array.isArray(obj)) {
	    return obj.map(function (t) {
	      return new lunr.Token(
	        lunr.utils.asString(t).toLowerCase(),
	        lunr.utils.clone(metadata)
	      )
	    })
	  }

	  var str = obj.toString().trim().toLowerCase(),
	      len = str.length,
	      tokens = []

	  for (var sliceEnd = 0, sliceStart = 0; sliceEnd <= len; sliceEnd++) {
	    var char = str.charAt(sliceEnd),
	        sliceLength = sliceEnd - sliceStart

	    if ((char.match(lunr.tokenizer.separator) || sliceEnd == len)) {

	      if (sliceLength > 0) {
	        var tokenMetadata = lunr.utils.clone(metadata) || {}
	        tokenMetadata["position"] = [sliceStart, sliceLength]
	        tokenMetadata["index"] = tokens.length

	        tokens.push(
	          new lunr.Token (
	            str.slice(sliceStart, sliceEnd),
	            tokenMetadata
	          )
	        )
	      }

	      sliceStart = sliceEnd + 1
	    }

	  }

	  return tokens
	}

	/**
	 * The separator used to split a string into tokens. Override this property to change the behaviour of
	 * `lunr.tokenizer` behaviour when tokenizing strings. By default this splits on whitespace and hyphens.
	 *
	 * @static
	 * @see lunr.tokenizer
	 */
	lunr.tokenizer.separator = /[\s\-]+/
	/*!
	 * lunr.Pipeline
	 * Copyright (C) 2018 Oliver Nightingale
	 */

	/**
	 * lunr.Pipelines maintain an ordered list of functions to be applied to all
	 * tokens in documents entering the search index and queries being ran against
	 * the index.
	 *
	 * An instance of lunr.Index created with the lunr shortcut will contain a
	 * pipeline with a stop word filter and an English language stemmer. Extra
	 * functions can be added before or after either of these functions or these
	 * default functions can be removed.
	 *
	 * When run the pipeline will call each function in turn, passing a token, the
	 * index of that token in the original list of all tokens and finally a list of
	 * all the original tokens.
	 *
	 * The output of functions in the pipeline will be passed to the next function
	 * in the pipeline. To exclude a token from entering the index the function
	 * should return undefined, the rest of the pipeline will not be called with
	 * this token.
	 *
	 * For serialisation of pipelines to work, all functions used in an instance of
	 * a pipeline should be registered with lunr.Pipeline. Registered functions can
	 * then be loaded. If trying to load a serialised pipeline that uses functions
	 * that are not registered an error will be thrown.
	 *
	 * If not planning on serialising the pipeline then registering pipeline functions
	 * is not necessary.
	 *
	 * @constructor
	 */
	lunr.Pipeline = function () {
	  this._stack = []
	}

	lunr.Pipeline.registeredFunctions = Object.create(null)

	/**
	 * A pipeline function maps lunr.Token to lunr.Token. A lunr.Token contains the token
	 * string as well as all known metadata. A pipeline function can mutate the token string
	 * or mutate (or add) metadata for a given token.
	 *
	 * A pipeline function can indicate that the passed token should be discarded by returning
	 * null. This token will not be passed to any downstream pipeline functions and will not be
	 * added to the index.
	 *
	 * Multiple tokens can be returned by returning an array of tokens. Each token will be passed
	 * to any downstream pipeline functions and all will returned tokens will be added to the index.
	 *
	 * Any number of pipeline functions may be chained together using a lunr.Pipeline.
	 *
	 * @interface lunr.PipelineFunction
	 * @param {lunr.Token} token - A token from the document being processed.
	 * @param {number} i - The index of this token in the complete list of tokens for this document/field.
	 * @param {lunr.Token[]} tokens - All tokens for this document/field.
	 * @returns {(?lunr.Token|lunr.Token[])}
	 */

	/**
	 * Register a function with the pipeline.
	 *
	 * Functions that are used in the pipeline should be registered if the pipeline
	 * needs to be serialised, or a serialised pipeline needs to be loaded.
	 *
	 * Registering a function does not add it to a pipeline, functions must still be
	 * added to instances of the pipeline for them to be used when running a pipeline.
	 *
	 * @param {lunr.PipelineFunction} fn - The function to check for.
	 * @param {String} label - The label to register this function with
	 */
	lunr.Pipeline.registerFunction = function (fn, label) {
	  if (label in this.registeredFunctions) {
	    lunr.utils.warn('Overwriting existing registered function: ' + label)
	  }

	  fn.label = label
	  lunr.Pipeline.registeredFunctions[fn.label] = fn
	}

	/**
	 * Warns if the function is not registered as a Pipeline function.
	 *
	 * @param {lunr.PipelineFunction} fn - The function to check for.
	 * @private
	 */
	lunr.Pipeline.warnIfFunctionNotRegistered = function (fn) {
	  var isRegistered = fn.label && (fn.label in this.registeredFunctions)

	  if (!isRegistered) {
	    lunr.utils.warn('Function is not registered with pipeline. This may cause problems when serialising the index.\n', fn)
	  }
	}

	/**
	 * Loads a previously serialised pipeline.
	 *
	 * All functions to be loaded must already be registered with lunr.Pipeline.
	 * If any function from the serialised data has not been registered then an
	 * error will be thrown.
	 *
	 * @param {Object} serialised - The serialised pipeline to load.
	 * @returns {lunr.Pipeline}
	 */
	lunr.Pipeline.load = function (serialised) {
	  var pipeline = new lunr.Pipeline

	  serialised.forEach(function (fnName) {
	    var fn = lunr.Pipeline.registeredFunctions[fnName]

	    if (fn) {
	      pipeline.add(fn)
	    } else {
	      throw new Error('Cannot load unregistered function: ' + fnName)
	    }
	  })

	  return pipeline
	}

	/**
	 * Adds new functions to the end of the pipeline.
	 *
	 * Logs a warning if the function has not been registered.
	 *
	 * @param {lunr.PipelineFunction[]} functions - Any number of functions to add to the pipeline.
	 */
	lunr.Pipeline.prototype.add = function () {
	  var fns = Array.prototype.slice.call(arguments)

	  fns.forEach(function (fn) {
	    lunr.Pipeline.warnIfFunctionNotRegistered(fn)
	    this._stack.push(fn)
	  }, this)
	}

	/**
	 * Adds a single function after a function that already exists in the
	 * pipeline.
	 *
	 * Logs a warning if the function has not been registered.
	 *
	 * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.
	 * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.
	 */
	lunr.Pipeline.prototype.after = function (existingFn, newFn) {
	  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)

	  var pos = this._stack.indexOf(existingFn)
	  if (pos == -1) {
	    throw new Error('Cannot find existingFn')
	  }

	  pos = pos + 1
	  this._stack.splice(pos, 0, newFn)
	}

	/**
	 * Adds a single function before a function that already exists in the
	 * pipeline.
	 *
	 * Logs a warning if the function has not been registered.
	 *
	 * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.
	 * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.
	 */
	lunr.Pipeline.prototype.before = function (existingFn, newFn) {
	  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)

	  var pos = this._stack.indexOf(existingFn)
	  if (pos == -1) {
	    throw new Error('Cannot find existingFn')
	  }

	  this._stack.splice(pos, 0, newFn)
	}

	/**
	 * Removes a function from the pipeline.
	 *
	 * @param {lunr.PipelineFunction} fn The function to remove from the pipeline.
	 */
	lunr.Pipeline.prototype.remove = function (fn) {
	  var pos = this._stack.indexOf(fn)
	  if (pos == -1) {
	    return
	  }

	  this._stack.splice(pos, 1)
	}

	/**
	 * Runs the current list of functions that make up the pipeline against the
	 * passed tokens.
	 *
	 * @param {Array} tokens The tokens to run through the pipeline.
	 * @returns {Array}
	 */
	lunr.Pipeline.prototype.run = function (tokens) {
	  var stackLength = this._stack.length

	  for (var i = 0; i < stackLength; i++) {
	    var fn = this._stack[i]
	    var memo = []

	    for (var j = 0; j < tokens.length; j++) {
	      var result = fn(tokens[j], j, tokens)

	      if (result === void 0 || result === '') continue

	      if (result instanceof Array) {
	        for (var k = 0; k < result.length; k++) {
	          memo.push(result[k])
	        }
	      } else {
	        memo.push(result)
	      }
	    }

	    tokens = memo
	  }

	  return tokens
	}

	/**
	 * Convenience method for passing a string through a pipeline and getting
	 * strings out. This method takes care of wrapping the passed string in a
	 * token and mapping the resulting tokens back to strings.
	 *
	 * @param {string} str - The string to pass through the pipeline.
	 * @param {?object} metadata - Optional metadata to associate with the token
	 * passed to the pipeline.
	 * @returns {string[]}
	 */
	lunr.Pipeline.prototype.runString = function (str, metadata) {
	  var token = new lunr.Token (str, metadata)

	  return this.run([token]).map(function (t) {
	    return t.toString()
	  })
	}

	/**
	 * Resets the pipeline by removing any existing processors.
	 *
	 */
	lunr.Pipeline.prototype.reset = function () {
	  this._stack = []
	}

	/**
	 * Returns a representation of the pipeline ready for serialisation.
	 *
	 * Logs a warning if the function has not been registered.
	 *
	 * @returns {Array}
	 */
	lunr.Pipeline.prototype.toJSON = function () {
	  return this._stack.map(function (fn) {
	    lunr.Pipeline.warnIfFunctionNotRegistered(fn)

	    return fn.label
	  })
	}
	/*!
	 * lunr.Vector
	 * Copyright (C) 2018 Oliver Nightingale
	 */

	/**
	 * A vector is used to construct the vector space of documents and queries. These
	 * vectors support operations to determine the similarity between two documents or
	 * a document and a query.
	 *
	 * Normally no parameters are required for initializing a vector, but in the case of
	 * loading a previously dumped vector the raw elements can be provided to the constructor.
	 *
	 * For performance reasons vectors are implemented with a flat array, where an elements
	 * index is immediately followed by its value. E.g. [index, value, index, value]. This
	 * allows the underlying array to be as sparse as possible and still offer decent
	 * performance when being used for vector calculations.
	 *
	 * @constructor
	 * @param {Number[]} [elements] - The flat list of element index and element value pairs.
	 */
	lunr.Vector = function (elements) {
	  this._magnitude = 0
	  this.elements = elements || []
	}


	/**
	 * Calculates the position within the vector to insert a given index.
	 *
	 * This is used internally by insert and upsert. If there are duplicate indexes then
	 * the position is returned as if the value for that index were to be updated, but it
	 * is the callers responsibility to check whether there is a duplicate at that index
	 *
	 * @param {Number} insertIdx - The index at which the element should be inserted.
	 * @returns {Number}
	 */
	lunr.Vector.prototype.positionForIndex = function (index) {
	  // For an empty vector the tuple can be inserted at the beginning
	  if (this.elements.length == 0) {
	    return 0
	  }

	  var start = 0,
	      end = this.elements.length / 2,
	      sliceLength = end - start,
	      pivotPoint = Math.floor(sliceLength / 2),
	      pivotIndex = this.elements[pivotPoint * 2]

	  while (sliceLength > 1) {
	    if (pivotIndex < index) {
	      start = pivotPoint
	    }

	    if (pivotIndex > index) {
	      end = pivotPoint
	    }

	    if (pivotIndex == index) {
	      break
	    }

	    sliceLength = end - start
	    pivotPoint = start + Math.floor(sliceLength / 2)
	    pivotIndex = this.elements[pivotPoint * 2]
	  }

	  if (pivotIndex == index) {
	    return pivotPoint * 2
	  }

	  if (pivotIndex > index) {
	    return pivotPoint * 2
	  }

	  if (pivotIndex < index) {
	    return (pivotPoint + 1) * 2
	  }
	}

	/**
	 * Inserts an element at an index within the vector.
	 *
	 * Does not allow duplicates, will throw an error if there is already an entry
	 * for this index.
	 *
	 * @param {Number} insertIdx - The index at which the element should be inserted.
	 * @param {Number} val - The value to be inserted into the vector.
	 */
	lunr.Vector.prototype.insert = function (insertIdx, val) {
	  this.upsert(insertIdx, val, function () {
	    throw "duplicate index"
	  })
	}

	/**
	 * Inserts or updates an existing index within the vector.
	 *
	 * @param {Number} insertIdx - The index at which the element should be inserted.
	 * @param {Number} val - The value to be inserted into the vector.
	 * @param {function} fn - A function that is called for updates, the existing value and the
	 * requested value are passed as arguments
	 */
	lunr.Vector.prototype.upsert = function (insertIdx, val, fn) {
	  this._magnitude = 0
	  var position = this.positionForIndex(insertIdx)

	  if (this.elements[position] == insertIdx) {
	    this.elements[position + 1] = fn(this.elements[position + 1], val)
	  } else {
	    this.elements.splice(position, 0, insertIdx, val)
	  }
	}

	/**
	 * Calculates the magnitude of this vector.
	 *
	 * @returns {Number}
	 */
	lunr.Vector.prototype.magnitude = function () {
	  if (this._magnitude) return this._magnitude

	  var sumOfSquares = 0,
	      elementsLength = this.elements.length

	  for (var i = 1; i < elementsLength; i += 2) {
	    var val = this.elements[i]
	    sumOfSquares += val * val
	  }

	  return this._magnitude = Math.sqrt(sumOfSquares)
	}

	/**
	 * Calculates the dot product of this vector and another vector.
	 *
	 * @param {lunr.Vector} otherVector - The vector to compute the dot product with.
	 * @returns {Number}
	 */
	lunr.Vector.prototype.dot = function (otherVector) {
	  var dotProduct = 0,
	      a = this.elements, b = otherVector.elements,
	      aLen = a.length, bLen = b.length,
	      aVal = 0, bVal = 0,
	      i = 0, j = 0

	  while (i < aLen && j < bLen) {
	    aVal = a[i], bVal = b[j]
	    if (aVal < bVal) {
	      i += 2
	    } else if (aVal > bVal) {
	      j += 2
	    } else if (aVal == bVal) {
	      dotProduct += a[i + 1] * b[j + 1]
	      i += 2
	      j += 2
	    }
	  }

	  return dotProduct
	}

	/**
	 * Calculates the similarity between this vector and another vector.
	 *
	 * @param {lunr.Vector} otherVector - The other vector to calculate the
	 * similarity with.
	 * @returns {Number}
	 */
	lunr.Vector.prototype.similarity = function (otherVector) {
	  return this.dot(otherVector) / this.magnitude() || 0
	}

	/**
	 * Converts the vector to an array of the elements within the vector.
	 *
	 * @returns {Number[]}
	 */
	lunr.Vector.prototype.toArray = function () {
	  var output = new Array (this.elements.length / 2)

	  for (var i = 1, j = 0; i < this.elements.length; i += 2, j++) {
	    output[j] = this.elements[i]
	  }

	  return output
	}

	/**
	 * A JSON serializable representation of the vector.
	 *
	 * @returns {Number[]}
	 */
	lunr.Vector.prototype.toJSON = function () {
	  return this.elements
	}
	/* eslint-disable */
	/*!
	 * lunr.stemmer
	 * Copyright (C) 2018 Oliver Nightingale
	 * Includes code from - http://tartarus.org/~martin/PorterStemmer/js.txt
	 */

	/**
	 * lunr.stemmer is an english language stemmer, this is a JavaScript
	 * implementation of the PorterStemmer taken from http://tartarus.org/~martin
	 *
	 * @static
	 * @implements {lunr.PipelineFunction}
	 * @param {lunr.Token} token - The string to stem
	 * @returns {lunr.Token}
	 * @see {@link lunr.Pipeline}
	 * @function
	 */
	lunr.stemmer = (function(){
	  var step2list = {
	      "ational" : "ate",
	      "tional" : "tion",
	      "enci" : "ence",
	      "anci" : "ance",
	      "izer" : "ize",
	      "bli" : "ble",
	      "alli" : "al",
	      "entli" : "ent",
	      "eli" : "e",
	      "ousli" : "ous",
	      "ization" : "ize",
	      "ation" : "ate",
	      "ator" : "ate",
	      "alism" : "al",
	      "iveness" : "ive",
	      "fulness" : "ful",
	      "ousness" : "ous",
	      "aliti" : "al",
	      "iviti" : "ive",
	      "biliti" : "ble",
	      "logi" : "log"
	    },

	    step3list = {
	      "icate" : "ic",
	      "ative" : "",
	      "alize" : "al",
	      "iciti" : "ic",
	      "ical" : "ic",
	      "ful" : "",
	      "ness" : ""
	    },

	    c = "[^aeiou]",          // consonant
	    v = "[aeiouy]",          // vowel
	    C = c + "[^aeiouy]*",    // consonant sequence
	    V = v + "[aeiou]*",      // vowel sequence

	    mgr0 = "^(" + C + ")?" + V + C,               // [C]VC... is m>0
	    meq1 = "^(" + C + ")?" + V + C + "(" + V + ")?$",  // [C]VC[V] is m=1
	    mgr1 = "^(" + C + ")?" + V + C + V + C,       // [C]VCVC... is m>1
	    s_v = "^(" + C + ")?" + v;                   // vowel in stem

	  var re_mgr0 = new RegExp(mgr0);
	  var re_mgr1 = new RegExp(mgr1);
	  var re_meq1 = new RegExp(meq1);
	  var re_s_v = new RegExp(s_v);

	  var re_1a = /^(.+?)(ss|i)es$/;
	  var re2_1a = /^(.+?)([^s])s$/;
	  var re_1b = /^(.+?)eed$/;
	  var re2_1b = /^(.+?)(ed|ing)$/;
	  var re_1b_2 = /.$/;
	  var re2_1b_2 = /(at|bl|iz)$/;
	  var re3_1b_2 = new RegExp("([^aeiouylsz])\\1$");
	  var re4_1b_2 = new RegExp("^" + C + v + "[^aeiouwxy]$");

	  var re_1c = /^(.+?[^aeiou])y$/;
	  var re_2 = /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/;

	  var re_3 = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;

	  var re_4 = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/;
	  var re2_4 = /^(.+?)(s|t)(ion)$/;

	  var re_5 = /^(.+?)e$/;
	  var re_5_1 = /ll$/;
	  var re3_5 = new RegExp("^" + C + v + "[^aeiouwxy]$");

	  var porterStemmer = function porterStemmer(w) {
	    var stem,
	      suffix,
	      firstch,
	      re,
	      re2,
	      re3,
	      re4;

	    if (w.length < 3) { return w; }

	    firstch = w.substr(0,1);
	    if (firstch == "y") {
	      w = firstch.toUpperCase() + w.substr(1);
	    }

	    // Step 1a
	    re = re_1a
	    re2 = re2_1a;

	    if (re.test(w)) { w = w.replace(re,"$1$2"); }
	    else if (re2.test(w)) { w = w.replace(re2,"$1$2"); }

	    // Step 1b
	    re = re_1b;
	    re2 = re2_1b;
	    if (re.test(w)) {
	      var fp = re.exec(w);
	      re = re_mgr0;
	      if (re.test(fp[1])) {
	        re = re_1b_2;
	        w = w.replace(re,"");
	      }
	    } else if (re2.test(w)) {
	      var fp = re2.exec(w);
	      stem = fp[1];
	      re2 = re_s_v;
	      if (re2.test(stem)) {
	        w = stem;
	        re2 = re2_1b_2;
	        re3 = re3_1b_2;
	        re4 = re4_1b_2;
	        if (re2.test(w)) { w = w + "e"; }
	        else if (re3.test(w)) { re = re_1b_2; w = w.replace(re,""); }
	        else if (re4.test(w)) { w = w + "e"; }
	      }
	    }

	    // Step 1c - replace suffix y or Y by i if preceded by a non-vowel which is not the first letter of the word (so cry -> cri, by -> by, say -> say)
	    re = re_1c;
	    if (re.test(w)) {
	      var fp = re.exec(w);
	      stem = fp[1];
	      w = stem + "i";
	    }

	    // Step 2
	    re = re_2;
	    if (re.test(w)) {
	      var fp = re.exec(w);
	      stem = fp[1];
	      suffix = fp[2];
	      re = re_mgr0;
	      if (re.test(stem)) {
	        w = stem + step2list[suffix];
	      }
	    }

	    // Step 3
	    re = re_3;
	    if (re.test(w)) {
	      var fp = re.exec(w);
	      stem = fp[1];
	      suffix = fp[2];
	      re = re_mgr0;
	      if (re.test(stem)) {
	        w = stem + step3list[suffix];
	      }
	    }

	    // Step 4
	    re = re_4;
	    re2 = re2_4;
	    if (re.test(w)) {
	      var fp = re.exec(w);
	      stem = fp[1];
	      re = re_mgr1;
	      if (re.test(stem)) {
	        w = stem;
	      }
	    } else if (re2.test(w)) {
	      var fp = re2.exec(w);
	      stem = fp[1] + fp[2];
	      re2 = re_mgr1;
	      if (re2.test(stem)) {
	        w = stem;
	      }
	    }

	    // Step 5
	    re = re_5;
	    if (re.test(w)) {
	      var fp = re.exec(w);
	      stem = fp[1];
	      re = re_mgr1;
	      re2 = re_meq1;
	      re3 = re3_5;
	      if (re.test(stem) || (re2.test(stem) && !(re3.test(stem)))) {
	        w = stem;
	      }
	    }

	    re = re_5_1;
	    re2 = re_mgr1;
	    if (re.test(w) && re2.test(w)) {
	      re = re_1b_2;
	      w = w.replace(re,"");
	    }

	    // and turn initial Y back to y

	    if (firstch == "y") {
	      w = firstch.toLowerCase() + w.substr(1);
	    }

	    return w;
	  };

	  return function (token) {
	    return token.update(porterStemmer);
	  }
	})();

	lunr.Pipeline.registerFunction(lunr.stemmer, 'stemmer')
	/*!
	 * lunr.stopWordFilter
	 * Copyright (C) 2018 Oliver Nightingale
	 */

	/**
	 * lunr.generateStopWordFilter builds a stopWordFilter function from the provided
	 * list of stop words.
	 *
	 * The built in lunr.stopWordFilter is built using this generator and can be used
	 * to generate custom stopWordFilters for applications or non English languages.
	 *
	 * @function
	 * @param {Array} token The token to pass through the filter
	 * @returns {lunr.PipelineFunction}
	 * @see lunr.Pipeline
	 * @see lunr.stopWordFilter
	 */
	lunr.generateStopWordFilter = function (stopWords) {
	  var words = stopWords.reduce(function (memo, stopWord) {
	    memo[stopWord] = stopWord
	    return memo
	  }, {})

	  return function (token) {
	    if (token && words[token.toString()] !== token.toString()) return token
	  }
	}

	/**
	 * lunr.stopWordFilter is an English language stop word list filter, any words
	 * contained in the list will not be passed through the filter.
	 *
	 * This is intended to be used in the Pipeline. If the token does not pass the
	 * filter then undefined will be returned.
	 *
	 * @function
	 * @implements {lunr.PipelineFunction}
	 * @params {lunr.Token} token - A token to check for being a stop word.
	 * @returns {lunr.Token}
	 * @see {@link lunr.Pipeline}
	 */
	lunr.stopWordFilter = lunr.generateStopWordFilter([
	  'a',
	  'able',
	  'about',
	  'across',
	  'after',
	  'all',
	  'almost',
	  'also',
	  'am',
	  'among',
	  'an',
	  'and',
	  'any',
	  'are',
	  'as',
	  'at',
	  'be',
	  'because',
	  'been',
	  'but',
	  'by',
	  'can',
	  'cannot',
	  'could',
	  'dear',
	  'did',
	  'do',
	  'does',
	  'either',
	  'else',
	  'ever',
	  'every',
	  'for',
	  'from',
	  'get',
	  'got',
	  'had',
	  'has',
	  'have',
	  'he',
	  'her',
	  'hers',
	  'him',
	  'his',
	  'how',
	  'however',
	  'i',
	  'if',
	  'in',
	  'into',
	  'is',
	  'it',
	  'its',
	  'just',
	  'least',
	  'let',
	  'like',
	  'likely',
	  'may',
	  'me',
	  'might',
	  'most',
	  'must',
	  'my',
	  'neither',
	  'no',
	  'nor',
	  'not',
	  'of',
	  'off',
	  'often',
	  'on',
	  'only',
	  'or',
	  'other',
	  'our',
	  'own',
	  'rather',
	  'said',
	  'say',
	  'says',
	  'she',
	  'should',
	  'since',
	  'so',
	  'some',
	  'than',
	  'that',
	  'the',
	  'their',
	  'them',
	  'then',
	  'there',
	  'these',
	  'they',
	  'this',
	  'tis',
	  'to',
	  'too',
	  'twas',
	  'us',
	  'wants',
	  'was',
	  'we',
	  'were',
	  'what',
	  'when',
	  'where',
	  'which',
	  'while',
	  'who',
	  'whom',
	  'why',
	  'will',
	  'with',
	  'would',
	  'yet',
	  'you',
	  'your'
	])

	lunr.Pipeline.registerFunction(lunr.stopWordFilter, 'stopWordFilter')
	/*!
	 * lunr.trimmer
	 * Copyright (C) 2018 Oliver Nightingale
	 */

	/**
	 * lunr.trimmer is a pipeline function for trimming non word
	 * characters from the beginning and end of tokens before they
	 * enter the index.
	 *
	 * This implementation may not work correctly for non latin
	 * characters and should either be removed or adapted for use
	 * with languages with non-latin characters.
	 *
	 * @static
	 * @implements {lunr.PipelineFunction}
	 * @param {lunr.Token} token The token to pass through the filter
	 * @returns {lunr.Token}
	 * @see lunr.Pipeline
	 */
	lunr.trimmer = function (token) {
	  return token.update(function (s) {
	    return s.replace(/^\W+/, '').replace(/\W+$/, '')
	  })
	}

	lunr.Pipeline.registerFunction(lunr.trimmer, 'trimmer')
	/*!
	 * lunr.TokenSet
	 * Copyright (C) 2018 Oliver Nightingale
	 */

	/**
	 * A token set is used to store the unique list of all tokens
	 * within an index. Token sets are also used to represent an
	 * incoming query to the index, this query token set and index
	 * token set are then intersected to find which tokens to look
	 * up in the inverted index.
	 *
	 * A token set can hold multiple tokens, as in the case of the
	 * index token set, or it can hold a single token as in the
	 * case of a simple query token set.
	 *
	 * Additionally token sets are used to perform wildcard matching.
	 * Leading, contained and trailing wildcards are supported, and
	 * from this edit distance matching can also be provided.
	 *
	 * Token sets are implemented as a minimal finite state automata,
	 * where both common prefixes and suffixes are shared between tokens.
	 * This helps to reduce the space used for storing the token set.
	 *
	 * @constructor
	 */
	lunr.TokenSet = function () {
	  this.final = false
	  this.edges = {}
	  this.id = lunr.TokenSet._nextId
	  lunr.TokenSet._nextId += 1
	}

	/**
	 * Keeps track of the next, auto increment, identifier to assign
	 * to a new tokenSet.
	 *
	 * TokenSets require a unique identifier to be correctly minimised.
	 *
	 * @private
	 */
	lunr.TokenSet._nextId = 1

	/**
	 * Creates a TokenSet instance from the given sorted array of words.
	 *
	 * @param {String[]} arr - A sorted array of strings to create the set from.
	 * @returns {lunr.TokenSet}
	 * @throws Will throw an error if the input array is not sorted.
	 */
	lunr.TokenSet.fromArray = function (arr) {
	  var builder = new lunr.TokenSet.Builder

	  for (var i = 0, len = arr.length; i < len; i++) {
	    builder.insert(arr[i])
	  }

	  builder.finish()
	  return builder.root
	}

	/**
	 * Creates a token set from a query clause.
	 *
	 * @private
	 * @param {Object} clause - A single clause from lunr.Query.
	 * @param {string} clause.term - The query clause term.
	 * @param {number} [clause.editDistance] - The optional edit distance for the term.
	 * @returns {lunr.TokenSet}
	 */
	lunr.TokenSet.fromClause = function (clause) {
	  if ('editDistance' in clause) {
	    return lunr.TokenSet.fromFuzzyString(clause.term, clause.editDistance)
	  } else {
	    return lunr.TokenSet.fromString(clause.term)
	  }
	}

	/**
	 * Creates a token set representing a single string with a specified
	 * edit distance.
	 *
	 * Insertions, deletions, substitutions and transpositions are each
	 * treated as an edit distance of 1.
	 *
	 * Increasing the allowed edit distance will have a dramatic impact
	 * on the performance of both creating and intersecting these TokenSets.
	 * It is advised to keep the edit distance less than 3.
	 *
	 * @param {string} str - The string to create the token set from.
	 * @param {number} editDistance - The allowed edit distance to match.
	 * @returns {lunr.Vector}
	 */
	lunr.TokenSet.fromFuzzyString = function (str, editDistance) {
	  var root = new lunr.TokenSet

	  var stack = [{
	    node: root,
	    editsRemaining: editDistance,
	    str: str
	  }]

	  while (stack.length) {
	    var frame = stack.pop()

	    // no edit
	    if (frame.str.length > 0) {
	      var char = frame.str.charAt(0),
	          noEditNode

	      if (char in frame.node.edges) {
	        noEditNode = frame.node.edges[char]
	      } else {
	        noEditNode = new lunr.TokenSet
	        frame.node.edges[char] = noEditNode
	      }

	      if (frame.str.length == 1) {
	        noEditNode.final = true
	      } else {
	        stack.push({
	          node: noEditNode,
	          editsRemaining: frame.editsRemaining,
	          str: frame.str.slice(1)
	        })
	      }
	    }

	    // deletion
	    // can only do a deletion if we have enough edits remaining
	    // and if there are characters left to delete in the string
	    if (frame.editsRemaining > 0 && frame.str.length > 1) {
	      var char = frame.str.charAt(1),
	          deletionNode

	      if (char in frame.node.edges) {
	        deletionNode = frame.node.edges[char]
	      } else {
	        deletionNode = new lunr.TokenSet
	        frame.node.edges[char] = deletionNode
	      }

	      if (frame.str.length <= 2) {
	        deletionNode.final = true
	      } else {
	        stack.push({
	          node: deletionNode,
	          editsRemaining: frame.editsRemaining - 1,
	          str: frame.str.slice(2)
	        })
	      }
	    }

	    // deletion
	    // just removing the last character from the str
	    if (frame.editsRemaining > 0 && frame.str.length == 1) {
	      frame.node.final = true
	    }

	    // substitution
	    // can only do a substitution if we have enough edits remaining
	    // and if there are characters left to substitute
	    if (frame.editsRemaining > 0 && frame.str.length >= 1) {
	      if ("*" in frame.node.edges) {
	        var substitutionNode = frame.node.edges["*"]
	      } else {
	        var substitutionNode = new lunr.TokenSet
	        frame.node.edges["*"] = substitutionNode
	      }

	      if (frame.str.length == 1) {
	        substitutionNode.final = true
	      } else {
	        stack.push({
	          node: substitutionNode,
	          editsRemaining: frame.editsRemaining - 1,
	          str: frame.str.slice(1)
	        })
	      }
	    }

	    // insertion
	    // can only do insertion if there are edits remaining
	    if (frame.editsRemaining > 0) {
	      if ("*" in frame.node.edges) {
	        var insertionNode = frame.node.edges["*"]
	      } else {
	        var insertionNode = new lunr.TokenSet
	        frame.node.edges["*"] = insertionNode
	      }

	      if (frame.str.length == 0) {
	        insertionNode.final = true
	      } else {
	        stack.push({
	          node: insertionNode,
	          editsRemaining: frame.editsRemaining - 1,
	          str: frame.str
	        })
	      }
	    }

	    // transposition
	    // can only do a transposition if there are edits remaining
	    // and there are enough characters to transpose
	    if (frame.editsRemaining > 0 && frame.str.length > 1) {
	      var charA = frame.str.charAt(0),
	          charB = frame.str.charAt(1),
	          transposeNode

	      if (charB in frame.node.edges) {
	        transposeNode = frame.node.edges[charB]
	      } else {
	        transposeNode = new lunr.TokenSet
	        frame.node.edges[charB] = transposeNode
	      }

	      if (frame.str.length == 1) {
	        transposeNode.final = true
	      } else {
	        stack.push({
	          node: transposeNode,
	          editsRemaining: frame.editsRemaining - 1,
	          str: charA + frame.str.slice(2)
	        })
	      }
	    }
	  }

	  return root
	}

	/**
	 * Creates a TokenSet from a string.
	 *
	 * The string may contain one or more wildcard characters (*)
	 * that will allow wildcard matching when intersecting with
	 * another TokenSet.
	 *
	 * @param {string} str - The string to create a TokenSet from.
	 * @returns {lunr.TokenSet}
	 */
	lunr.TokenSet.fromString = function (str) {
	  var node = new lunr.TokenSet,
	      root = node,
	      wildcardFound = false

	  /*
	   * Iterates through all characters within the passed string
	   * appending a node for each character.
	   *
	   * As soon as a wildcard character is found then a self
	   * referencing edge is introduced to continually match
	   * any number of any characters.
	   */
	  for (var i = 0, len = str.length; i < len; i++) {
	    var char = str[i],
	        final = (i == len - 1)

	    if (char == "*") {
	      wildcardFound = true
	      node.edges[char] = node
	      node.final = final

	    } else {
	      var next = new lunr.TokenSet
	      next.final = final

	      node.edges[char] = next
	      node = next

	      // TODO: is this needed anymore?
	      if (wildcardFound) {
	        node.edges["*"] = root
	      }
	    }
	  }

	  return root
	}

	/**
	 * Converts this TokenSet into an array of strings
	 * contained within the TokenSet.
	 *
	 * @returns {string[]}
	 */
	lunr.TokenSet.prototype.toArray = function () {
	  var words = []

	  var stack = [{
	    prefix: "",
	    node: this
	  }]

	  while (stack.length) {
	    var frame = stack.pop(),
	        edges = Object.keys(frame.node.edges),
	        len = edges.length

	    if (frame.node.final) {
	      words.push(frame.prefix)
	    }

	    for (var i = 0; i < len; i++) {
	      var edge = edges[i]

	      stack.push({
	        prefix: frame.prefix.concat(edge),
	        node: frame.node.edges[edge]
	      })
	    }
	  }

	  return words
	}

	/**
	 * Generates a string representation of a TokenSet.
	 *
	 * This is intended to allow TokenSets to be used as keys
	 * in objects, largely to aid the construction and minimisation
	 * of a TokenSet. As such it is not designed to be a human
	 * friendly representation of the TokenSet.
	 *
	 * @returns {string}
	 */
	lunr.TokenSet.prototype.toString = function () {
	  // NOTE: Using Object.keys here as this.edges is very likely
	  // to enter 'hash-mode' with many keys being added
	  //
	  // avoiding a for-in loop here as it leads to the function
	  // being de-optimised (at least in V8). From some simple
	  // benchmarks the performance is comparable, but allowing
	  // V8 to optimize may mean easy performance wins in the future.

	  if (this._str) {
	    return this._str
	  }

	  var str = this.final ? '1' : '0',
	      labels = Object.keys(this.edges).sort(),
	      len = labels.length

	  for (var i = 0; i < len; i++) {
	    var label = labels[i],
	        node = this.edges[label]

	    str = str + label + node.id
	  }

	  return str
	}

	/**
	 * Returns a new TokenSet that is the intersection of
	 * this TokenSet and the passed TokenSet.
	 *
	 * This intersection will take into account any wildcards
	 * contained within the TokenSet.
	 *
	 * @param {lunr.TokenSet} b - An other TokenSet to intersect with.
	 * @returns {lunr.TokenSet}
	 */
	lunr.TokenSet.prototype.intersect = function (b) {
	  var output = new lunr.TokenSet,
	      frame = undefined

	  var stack = [{
	    qNode: b,
	    output: output,
	    node: this
	  }]

	  while (stack.length) {
	    frame = stack.pop()

	    // NOTE: As with the #toString method, we are using
	    // Object.keys and a for loop instead of a for-in loop
	    // as both of these objects enter 'hash' mode, causing
	    // the function to be de-optimised in V8
	    var qEdges = Object.keys(frame.qNode.edges),
	        qLen = qEdges.length,
	        nEdges = Object.keys(frame.node.edges),
	        nLen = nEdges.length

	    for (var q = 0; q < qLen; q++) {
	      var qEdge = qEdges[q]

	      for (var n = 0; n < nLen; n++) {
	        var nEdge = nEdges[n]

	        if (nEdge == qEdge || qEdge == '*') {
	          var node = frame.node.edges[nEdge],
	              qNode = frame.qNode.edges[qEdge],
	              final = node.final && qNode.final,
	              next = undefined

	          if (nEdge in frame.output.edges) {
	            // an edge already exists for this character
	            // no need to create a new node, just set the finality
	            // bit unless this node is already final
	            next = frame.output.edges[nEdge]
	            next.final = next.final || final

	          } else {
	            // no edge exists yet, must create one
	            // set the finality bit and insert it
	            // into the output
	            next = new lunr.TokenSet
	            next.final = final
	            frame.output.edges[nEdge] = next
	          }

	          stack.push({
	            qNode: qNode,
	            output: next,
	            node: node
	          })
	        }
	      }
	    }
	  }

	  return output
	}
	lunr.TokenSet.Builder = function () {
	  this.previousWord = ""
	  this.root = new lunr.TokenSet
	  this.uncheckedNodes = []
	  this.minimizedNodes = {}
	}

	lunr.TokenSet.Builder.prototype.insert = function (word) {
	  var node,
	      commonPrefix = 0

	  if (word < this.previousWord) {
	    throw new Error ("Out of order word insertion")
	  }

	  for (var i = 0; i < word.length && i < this.previousWord.length; i++) {
	    if (word[i] != this.previousWord[i]) break
	    commonPrefix++
	  }

	  this.minimize(commonPrefix)

	  if (this.uncheckedNodes.length == 0) {
	    node = this.root
	  } else {
	    node = this.uncheckedNodes[this.uncheckedNodes.length - 1].child
	  }

	  for (var i = commonPrefix; i < word.length; i++) {
	    var nextNode = new lunr.TokenSet,
	        char = word[i]

	    node.edges[char] = nextNode

	    this.uncheckedNodes.push({
	      parent: node,
	      char: char,
	      child: nextNode
	    })

	    node = nextNode
	  }

	  node.final = true
	  this.previousWord = word
	}

	lunr.TokenSet.Builder.prototype.finish = function () {
	  this.minimize(0)
	}

	lunr.TokenSet.Builder.prototype.minimize = function (downTo) {
	  for (var i = this.uncheckedNodes.length - 1; i >= downTo; i--) {
	    var node = this.uncheckedNodes[i],
	        childKey = node.child.toString()

	    if (childKey in this.minimizedNodes) {
	      node.parent.edges[node.char] = this.minimizedNodes[childKey]
	    } else {
	      // Cache the key for this node since
	      // we know it can't change anymore
	      node.child._str = childKey

	      this.minimizedNodes[childKey] = node.child
	    }

	    this.uncheckedNodes.pop()
	  }
	}
	/*!
	 * lunr.Index
	 * Copyright (C) 2018 Oliver Nightingale
	 */

	/**
	 * An index contains the built index of all documents and provides a query interface
	 * to the index.
	 *
	 * Usually instances of lunr.Index will not be created using this constructor, instead
	 * lunr.Builder should be used to construct new indexes, or lunr.Index.load should be
	 * used to load previously built and serialized indexes.
	 *
	 * @constructor
	 * @param {Object} attrs - The attributes of the built search index.
	 * @param {Object} attrs.invertedIndex - An index of term/field to document reference.
	 * @param {Object<string, lunr.Vector>} attrs.fieldVectors - Field vectors
	 * @param {lunr.TokenSet} attrs.tokenSet - An set of all corpus tokens.
	 * @param {string[]} attrs.fields - The names of indexed document fields.
	 * @param {lunr.Pipeline} attrs.pipeline - The pipeline to use for search terms.
	 */
	lunr.Index = function (attrs) {
	  this.invertedIndex = attrs.invertedIndex
	  this.fieldVectors = attrs.fieldVectors
	  this.tokenSet = attrs.tokenSet
	  this.fields = attrs.fields
	  this.pipeline = attrs.pipeline
	}

	/**
	 * A result contains details of a document matching a search query.
	 * @typedef {Object} lunr.Index~Result
	 * @property {string} ref - The reference of the document this result represents.
	 * @property {number} score - A number between 0 and 1 representing how similar this document is to the query.
	 * @property {lunr.MatchData} matchData - Contains metadata about this match including which term(s) caused the match.
	 */

	/**
	 * Although lunr provides the ability to create queries using lunr.Query, it also provides a simple
	 * query language which itself is parsed into an instance of lunr.Query.
	 *
	 * For programmatically building queries it is advised to directly use lunr.Query, the query language
	 * is best used for human entered text rather than program generated text.
	 *
	 * At its simplest queries can just be a single term, e.g. `hello`, multiple terms are also supported
	 * and will be combined with OR, e.g `hello world` will match documents that contain either 'hello'
	 * or 'world', though those that contain both will rank higher in the results.
	 *
	 * Wildcards can be included in terms to match one or more unspecified characters, these wildcards can
	 * be inserted anywhere within the term, and more than one wildcard can exist in a single term. Adding
	 * wildcards will increase the number of documents that will be found but can also have a negative
	 * impact on query performance, especially with wildcards at the beginning of a term.
	 *
	 * Terms can be restricted to specific fields, e.g. `title:hello`, only documents with the term
	 * hello in the title field will match this query. Using a field not present in the index will lead
	 * to an error being thrown.
	 *
	 * Modifiers can also be added to terms, lunr supports edit distance and boost modifiers on terms. A term
	 * boost will make documents matching that term score higher, e.g. `foo^5`. Edit distance is also supported
	 * to provide fuzzy matching, e.g. 'hello~2' will match documents with hello with an edit distance of 2.
	 * Avoid large values for edit distance to improve query performance.
	 *
	 * Each term also supports a presence modifier. By default a term's presence in document is optional, however
	 * this can be changed to either required or prohibited. For a term's presence to be required in a document the
	 * term should be prefixed with a '+', e.g. `+foo bar` is a search for documents that must contain 'foo' and
	 * optionally contain 'bar'. Conversely a leading '-' sets the terms presence to prohibited, i.e. it must not
	 * appear in a document, e.g. `-foo bar` is a search for documents that do not contain 'foo' but may contain 'bar'.
	 *
	 * To escape special characters the backslash character '\' can be used, this allows searches to include
	 * characters that would normally be considered modifiers, e.g. `foo\~2` will search for a term "foo~2" instead
	 * of attempting to apply a boost of 2 to the search term "foo".
	 *
	 * @typedef {string} lunr.Index~QueryString
	 * @example <caption>Simple single term query</caption>
	 * hello
	 * @example <caption>Multiple term query</caption>
	 * hello world
	 * @example <caption>term scoped to a field</caption>
	 * title:hello
	 * @example <caption>term with a boost of 10</caption>
	 * hello^10
	 * @example <caption>term with an edit distance of 2</caption>
	 * hello~2
	 * @example <caption>terms with presence modifiers</caption>
	 * -foo +bar baz
	 */

	/**
	 * Performs a search against the index using lunr query syntax.
	 *
	 * Results will be returned sorted by their score, the most relevant results
	 * will be returned first.  For details on how the score is calculated, please see
	 * the {@link https://lunrjs.com/guides/searching.html#scoring|guide}.
	 *
	 * For more programmatic querying use lunr.Index#query.
	 *
	 * @param {lunr.Index~QueryString} queryString - A string containing a lunr query.
	 * @throws {lunr.QueryParseError} If the passed query string cannot be parsed.
	 * @returns {lunr.Index~Result[]}
	 */
	lunr.Index.prototype.search = function (queryString) {
	  return this.query(function (query) {
	    var parser = new lunr.QueryParser(queryString, query)
	    parser.parse()
	  })
	}

	/**
	 * A query builder callback provides a query object to be used to express
	 * the query to perform on the index.
	 *
	 * @callback lunr.Index~queryBuilder
	 * @param {lunr.Query} query - The query object to build up.
	 * @this lunr.Query
	 */

	/**
	 * Performs a query against the index using the yielded lunr.Query object.
	 *
	 * If performing programmatic queries against the index, this method is preferred
	 * over lunr.Index#search so as to avoid the additional query parsing overhead.
	 *
	 * A query object is yielded to the supplied function which should be used to
	 * express the query to be run against the index.
	 *
	 * Note that although this function takes a callback parameter it is _not_ an
	 * asynchronous operation, the callback is just yielded a query object to be
	 * customized.
	 *
	 * @param {lunr.Index~queryBuilder} fn - A function that is used to build the query.
	 * @returns {lunr.Index~Result[]}
	 */
	lunr.Index.prototype.query = function (fn) {
	  // for each query clause
	  // * process terms
	  // * expand terms from token set
	  // * find matching documents and metadata
	  // * get document vectors
	  // * score documents

	  var query = new lunr.Query(this.fields),
	      matchingFields = Object.create(null),
	      queryVectors = Object.create(null),
	      termFieldCache = Object.create(null),
	      requiredMatches = Object.create(null),
	      prohibitedMatches = Object.create(null)

	  /*
	   * To support field level boosts a query vector is created per
	   * field. An empty vector is eagerly created to support negated
	   * queries.
	   */
	  for (var i = 0; i < this.fields.length; i++) {
	    queryVectors[this.fields[i]] = new lunr.Vector
	  }

	  fn.call(query, query)

	  for (var i = 0; i < query.clauses.length; i++) {
	    /*
	     * Unless the pipeline has been disabled for this term, which is
	     * the case for terms with wildcards, we need to pass the clause
	     * term through the search pipeline. A pipeline returns an array
	     * of processed terms. Pipeline functions may expand the passed
	     * term, which means we may end up performing multiple index lookups
	     * for a single query term.
	     */
	    var clause = query.clauses[i],
	        terms = null,
	        clauseMatches = lunr.Set.complete

	    if (clause.usePipeline) {
	      terms = this.pipeline.runString(clause.term, {
	        fields: clause.fields
	      })
	    } else {
	      terms = [clause.term]
	    }

	    for (var m = 0; m < terms.length; m++) {
	      var term = terms[m]

	      /*
	       * Each term returned from the pipeline needs to use the same query
	       * clause object, e.g. the same boost and or edit distance. The
	       * simplest way to do this is to re-use the clause object but mutate
	       * its term property.
	       */
	      clause.term = term

	      /*
	       * From the term in the clause we create a token set which will then
	       * be used to intersect the indexes token set to get a list of terms
	       * to lookup in the inverted index
	       */
	      var termTokenSet = lunr.TokenSet.fromClause(clause),
	          expandedTerms = this.tokenSet.intersect(termTokenSet).toArray()

	      /*
	       * If a term marked as required does not exist in the tokenSet it is
	       * impossible for the search to return any matches. We set all the field
	       * scoped required matches set to empty and stop examining any further
	       * clauses.
	       */
	      if (expandedTerms.length === 0 && clause.presence === lunr.Query.presence.REQUIRED) {
	        for (var k = 0; k < clause.fields.length; k++) {
	          var field = clause.fields[k]
	          requiredMatches[field] = lunr.Set.empty
	        }

	        break
	      }

	      for (var j = 0; j < expandedTerms.length; j++) {
	        /*
	         * For each term get the posting and termIndex, this is required for
	         * building the query vector.
	         */
	        var expandedTerm = expandedTerms[j],
	            posting = this.invertedIndex[expandedTerm],
	            termIndex = posting._index

	        for (var k = 0; k < clause.fields.length; k++) {
	          /*
	           * For each field that this query term is scoped by (by default
	           * all fields are in scope) we need to get all the document refs
	           * that have this term in that field.
	           *
	           * The posting is the entry in the invertedIndex for the matching
	           * term from above.
	           */
	          var field = clause.fields[k],
	              fieldPosting = posting[field],
	              matchingDocumentRefs = Object.keys(fieldPosting),
	              termField = expandedTerm + "/" + field,
	              matchingDocumentsSet = new lunr.Set(matchingDocumentRefs)

	          /*
	           * if the presence of this term is required ensure that the matching
	           * documents are added to the set of required matches for this clause.
	           *
	           */
	          if (clause.presence == lunr.Query.presence.REQUIRED) {
	            clauseMatches = clauseMatches.union(matchingDocumentsSet)

	            if (requiredMatches[field] === undefined) {
	              requiredMatches[field] = lunr.Set.complete
	            }
	          }

	          /*
	           * if the presence of this term is prohibited ensure that the matching
	           * documents are added to the set of prohibited matches for this field,
	           * creating that set if it does not yet exist.
	           */
	          if (clause.presence == lunr.Query.presence.PROHIBITED) {
	            if (prohibitedMatches[field] === undefined) {
	              prohibitedMatches[field] = lunr.Set.empty
	            }

	            prohibitedMatches[field] = prohibitedMatches[field].union(matchingDocumentsSet)

	            /*
	             * Prohibited matches should not be part of the query vector used for
	             * similarity scoring and no metadata should be extracted so we continue
	             * to the next field
	             */
	            continue
	          }

	          /*
	           * The query field vector is populated using the termIndex found for
	           * the term and a unit value with the appropriate boost applied.
	           * Using upsert because there could already be an entry in the vector
	           * for the term we are working with. In that case we just add the scores
	           * together.
	           */
	          queryVectors[field].upsert(termIndex, clause.boost, function (a, b) { return a + b })

	          /**
	           * If we've already seen this term, field combo then we've already collected
	           * the matching documents and metadata, no need to go through all that again
	           */
	          if (termFieldCache[termField]) {
	            continue
	          }

	          for (var l = 0; l < matchingDocumentRefs.length; l++) {
	            /*
	             * All metadata for this term/field/document triple
	             * are then extracted and collected into an instance
	             * of lunr.MatchData ready to be returned in the query
	             * results
	             */
	            var matchingDocumentRef = matchingDocumentRefs[l],
	                matchingFieldRef = new lunr.FieldRef (matchingDocumentRef, field),
	                metadata = fieldPosting[matchingDocumentRef],
	                fieldMatch

	            if ((fieldMatch = matchingFields[matchingFieldRef]) === undefined) {
	              matchingFields[matchingFieldRef] = new lunr.MatchData (expandedTerm, field, metadata)
	            } else {
	              fieldMatch.add(expandedTerm, field, metadata)
	            }

	          }

	          termFieldCache[termField] = true
	        }
	      }
	    }

	    /**
	     * If the presence was required we need to update the requiredMatches field sets.
	     * We do this after all fields for the term have collected their matches because
	     * the clause terms presence is required in _any_ of the fields not _all_ of the
	     * fields.
	     */
	    if (clause.presence === lunr.Query.presence.REQUIRED) {
	      for (var k = 0; k < clause.fields.length; k++) {
	        var field = clause.fields[k]
	        requiredMatches[field] = requiredMatches[field].intersect(clauseMatches)
	      }
	    }
	  }

	  /**
	   * Need to combine the field scoped required and prohibited
	   * matching documents into a global set of required and prohibited
	   * matches
	   */
	  var allRequiredMatches = lunr.Set.complete,
	      allProhibitedMatches = lunr.Set.empty

	  for (var i = 0; i < this.fields.length; i++) {
	    var field = this.fields[i]

	    if (requiredMatches[field]) {
	      allRequiredMatches = allRequiredMatches.intersect(requiredMatches[field])
	    }

	    if (prohibitedMatches[field]) {
	      allProhibitedMatches = allProhibitedMatches.union(prohibitedMatches[field])
	    }
	  }

	  var matchingFieldRefs = Object.keys(matchingFields),
	      results = [],
	      matches = Object.create(null)

	  /*
	   * If the query is negated (contains only prohibited terms)
	   * we need to get _all_ fieldRefs currently existing in the
	   * index. This is only done when we know that the query is
	   * entirely prohibited terms to avoid any cost of getting all
	   * fieldRefs unnecessarily.
	   *
	   * Additionally, blank MatchData must be created to correctly
	   * populate the results.
	   */
	  if (query.isNegated()) {
	    matchingFieldRefs = Object.keys(this.fieldVectors)

	    for (var i = 0; i < matchingFieldRefs.length; i++) {
	      var matchingFieldRef = matchingFieldRefs[i]
	      var fieldRef = lunr.FieldRef.fromString(matchingFieldRef)
	      matchingFields[matchingFieldRef] = new lunr.MatchData
	    }
	  }

	  for (var i = 0; i < matchingFieldRefs.length; i++) {
	    /*
	     * Currently we have document fields that match the query, but we
	     * need to return documents. The matchData and scores are combined
	     * from multiple fields belonging to the same document.
	     *
	     * Scores are calculated by field, using the query vectors created
	     * above, and combined into a final document score using addition.
	     */
	    var fieldRef = lunr.FieldRef.fromString(matchingFieldRefs[i]),
	        docRef = fieldRef.docRef

	    if (!allRequiredMatches.contains(docRef)) {
	      continue
	    }

	    if (allProhibitedMatches.contains(docRef)) {
	      continue
	    }

	    var fieldVector = this.fieldVectors[fieldRef],
	        score = queryVectors[fieldRef.fieldName].similarity(fieldVector),
	        docMatch

	    if ((docMatch = matches[docRef]) !== undefined) {
	      docMatch.score += score
	      docMatch.matchData.combine(matchingFields[fieldRef])
	    } else {
	      var match = {
	        ref: docRef,
	        score: score,
	        matchData: matchingFields[fieldRef]
	      }
	      matches[docRef] = match
	      results.push(match)
	    }
	  }

	  /*
	   * Sort the results objects by score, highest first.
	   */
	  return results.sort(function (a, b) {
	    return b.score - a.score
	  })
	}

	/**
	 * Prepares the index for JSON serialization.
	 *
	 * The schema for this JSON blob will be described in a
	 * separate JSON schema file.
	 *
	 * @returns {Object}
	 */
	lunr.Index.prototype.toJSON = function () {
	  var invertedIndex = Object.keys(this.invertedIndex)
	    .sort()
	    .map(function (term) {
	      return [term, this.invertedIndex[term]]
	    }, this)

	  var fieldVectors = Object.keys(this.fieldVectors)
	    .map(function (ref) {
	      return [ref, this.fieldVectors[ref].toJSON()]
	    }, this)

	  return {
	    version: lunr.version,
	    fields: this.fields,
	    fieldVectors: fieldVectors,
	    invertedIndex: invertedIndex,
	    pipeline: this.pipeline.toJSON()
	  }
	}

	/**
	 * Loads a previously serialized lunr.Index
	 *
	 * @param {Object} serializedIndex - A previously serialized lunr.Index
	 * @returns {lunr.Index}
	 */
	lunr.Index.load = function (serializedIndex) {
	  var attrs = {},
	      fieldVectors = {},
	      serializedVectors = serializedIndex.fieldVectors,
	      invertedIndex = {},
	      serializedInvertedIndex = serializedIndex.invertedIndex,
	      tokenSetBuilder = new lunr.TokenSet.Builder,
	      pipeline = lunr.Pipeline.load(serializedIndex.pipeline)

	  if (serializedIndex.version != lunr.version) {
	    lunr.utils.warn("Version mismatch when loading serialised index. Current version of lunr '" + lunr.version + "' does not match serialized index '" + serializedIndex.version + "'")
	  }

	  for (var i = 0; i < serializedVectors.length; i++) {
	    var tuple = serializedVectors[i],
	        ref = tuple[0],
	        elements = tuple[1]

	    fieldVectors[ref] = new lunr.Vector(elements)
	  }

	  for (var i = 0; i < serializedInvertedIndex.length; i++) {
	    var tuple = serializedInvertedIndex[i],
	        term = tuple[0],
	        posting = tuple[1]

	    tokenSetBuilder.insert(term)
	    invertedIndex[term] = posting
	  }

	  tokenSetBuilder.finish()

	  attrs.fields = serializedIndex.fields

	  attrs.fieldVectors = fieldVectors
	  attrs.invertedIndex = invertedIndex
	  attrs.tokenSet = tokenSetBuilder.root
	  attrs.pipeline = pipeline

	  return new lunr.Index(attrs)
	}
	/*!
	 * lunr.Builder
	 * Copyright (C) 2018 Oliver Nightingale
	 */

	/**
	 * lunr.Builder performs indexing on a set of documents and
	 * returns instances of lunr.Index ready for querying.
	 *
	 * All configuration of the index is done via the builder, the
	 * fields to index, the document reference, the text processing
	 * pipeline and document scoring parameters are all set on the
	 * builder before indexing.
	 *
	 * @constructor
	 * @property {string} _ref - Internal reference to the document reference field.
	 * @property {string[]} _fields - Internal reference to the document fields to index.
	 * @property {object} invertedIndex - The inverted index maps terms to document fields.
	 * @property {object} documentTermFrequencies - Keeps track of document term frequencies.
	 * @property {object} documentLengths - Keeps track of the length of documents added to the index.
	 * @property {lunr.tokenizer} tokenizer - Function for splitting strings into tokens for indexing.
	 * @property {lunr.Pipeline} pipeline - The pipeline performs text processing on tokens before indexing.
	 * @property {lunr.Pipeline} searchPipeline - A pipeline for processing search terms before querying the index.
	 * @property {number} documentCount - Keeps track of the total number of documents indexed.
	 * @property {number} _b - A parameter to control field length normalization, setting this to 0 disabled normalization, 1 fully normalizes field lengths, the default value is 0.75.
	 * @property {number} _k1 - A parameter to control how quickly an increase in term frequency results in term frequency saturation, the default value is 1.2.
	 * @property {number} termIndex - A counter incremented for each unique term, used to identify a terms position in the vector space.
	 * @property {array} metadataWhitelist - A list of metadata keys that have been whitelisted for entry in the index.
	 */
	lunr.Builder = function () {
	  this._ref = "id"
	  this._fields = Object.create(null)
	  this._documents = Object.create(null)
	  this.invertedIndex = Object.create(null)
	  this.fieldTermFrequencies = {}
	  this.fieldLengths = {}
	  this.tokenizer = lunr.tokenizer
	  this.pipeline = new lunr.Pipeline
	  this.searchPipeline = new lunr.Pipeline
	  this.documentCount = 0
	  this._b = 0.75
	  this._k1 = 1.2
	  this.termIndex = 0
	  this.metadataWhitelist = []
	}

	/**
	 * Sets the document field used as the document reference. Every document must have this field.
	 * The type of this field in the document should be a string, if it is not a string it will be
	 * coerced into a string by calling toString.
	 *
	 * The default ref is 'id'.
	 *
	 * The ref should _not_ be changed during indexing, it should be set before any documents are
	 * added to the index. Changing it during indexing can lead to inconsistent results.
	 *
	 * @param {string} ref - The name of the reference field in the document.
	 */
	lunr.Builder.prototype.ref = function (ref) {
	  this._ref = ref
	}

	/**
	 * A function that is used to extract a field from a document.
	 *
	 * Lunr expects a field to be at the top level of a document, if however the field
	 * is deeply nested within a document an extractor function can be used to extract
	 * the right field for indexing.
	 *
	 * @callback fieldExtractor
	 * @param {object} doc - The document being added to the index.
	 * @returns {?(string|object|object[])} obj - The object that will be indexed for this field.
	 * @example <caption>Extracting a nested field</caption>
	 * function (doc) { return doc.nested.field }
	 */

	/**
	 * Adds a field to the list of document fields that will be indexed. Every document being
	 * indexed should have this field. Null values for this field in indexed documents will
	 * not cause errors but will limit the chance of that document being retrieved by searches.
	 *
	 * All fields should be added before adding documents to the index. Adding fields after
	 * a document has been indexed will have no effect on already indexed documents.
	 *
	 * Fields can be boosted at build time. This allows terms within that field to have more
	 * importance when ranking search results. Use a field boost to specify that matches within
	 * one field are more important than other fields.
	 *
	 * @param {string} fieldName - The name of a field to index in all documents.
	 * @param {object} attributes - Optional attributes associated with this field.
	 * @param {number} [attributes.boost=1] - Boost applied to all terms within this field.
	 * @param {fieldExtractor} [attributes.extractor] - Function to extract a field from a document.
	 * @throws {RangeError} fieldName cannot contain unsupported characters '/'
	 */
	lunr.Builder.prototype.field = function (fieldName, attributes) {
	  if (/\//.test(fieldName)) {
	    throw new RangeError ("Field '" + fieldName + "' contains illegal character '/'")
	  }

	  this._fields[fieldName] = attributes || {}
	}

	/**
	 * A parameter to tune the amount of field length normalisation that is applied when
	 * calculating relevance scores. A value of 0 will completely disable any normalisation
	 * and a value of 1 will fully normalise field lengths. The default is 0.75. Values of b
	 * will be clamped to the range 0 - 1.
	 *
	 * @param {number} number - The value to set for this tuning parameter.
	 */
	lunr.Builder.prototype.b = function (number) {
	  if (number < 0) {
	    this._b = 0
	  } else if (number > 1) {
	    this._b = 1
	  } else {
	    this._b = number
	  }
	}

	/**
	 * A parameter that controls the speed at which a rise in term frequency results in term
	 * frequency saturation. The default value is 1.2. Setting this to a higher value will give
	 * slower saturation levels, a lower value will result in quicker saturation.
	 *
	 * @param {number} number - The value to set for this tuning parameter.
	 */
	lunr.Builder.prototype.k1 = function (number) {
	  this._k1 = number
	}

	/**
	 * Adds a document to the index.
	 *
	 * Before adding fields to the index the index should have been fully setup, with the document
	 * ref and all fields to index already having been specified.
	 *
	 * The document must have a field name as specified by the ref (by default this is 'id') and
	 * it should have all fields defined for indexing, though null or undefined values will not
	 * cause errors.
	 *
	 * Entire documents can be boosted at build time. Applying a boost to a document indicates that
	 * this document should rank higher in search results than other documents.
	 *
	 * @param {object} doc - The document to add to the index.
	 * @param {object} attributes - Optional attributes associated with this document.
	 * @param {number} [attributes.boost=1] - Boost applied to all terms within this document.
	 */
	lunr.Builder.prototype.add = function (doc, attributes) {
	  var docRef = doc[this._ref],
	      fields = Object.keys(this._fields)

	  this._documents[docRef] = attributes || {}
	  this.documentCount += 1

	  for (var i = 0; i < fields.length; i++) {
	    var fieldName = fields[i],
	        extractor = this._fields[fieldName].extractor,
	        field = extractor ? extractor(doc) : doc[fieldName],
	        tokens = this.tokenizer(field, {
	          fields: [fieldName]
	        }),
	        terms = this.pipeline.run(tokens),
	        fieldRef = new lunr.FieldRef (docRef, fieldName),
	        fieldTerms = Object.create(null)

	    this.fieldTermFrequencies[fieldRef] = fieldTerms
	    this.fieldLengths[fieldRef] = 0

	    // store the length of this field for this document
	    this.fieldLengths[fieldRef] += terms.length

	    // calculate term frequencies for this field
	    for (var j = 0; j < terms.length; j++) {
	      var term = terms[j]

	      if (fieldTerms[term] == undefined) {
	        fieldTerms[term] = 0
	      }

	      fieldTerms[term] += 1

	      // add to inverted index
	      // create an initial posting if one doesn't exist
	      if (this.invertedIndex[term] == undefined) {
	        var posting = Object.create(null)
	        posting["_index"] = this.termIndex
	        this.termIndex += 1

	        for (var k = 0; k < fields.length; k++) {
	          posting[fields[k]] = Object.create(null)
	        }

	        this.invertedIndex[term] = posting
	      }

	      // add an entry for this term/fieldName/docRef to the invertedIndex
	      if (this.invertedIndex[term][fieldName][docRef] == undefined) {
	        this.invertedIndex[term][fieldName][docRef] = Object.create(null)
	      }

	      // store all whitelisted metadata about this token in the
	      // inverted index
	      for (var l = 0; l < this.metadataWhitelist.length; l++) {
	        var metadataKey = this.metadataWhitelist[l],
	            metadata = term.metadata[metadataKey]

	        if (this.invertedIndex[term][fieldName][docRef][metadataKey] == undefined) {
	          this.invertedIndex[term][fieldName][docRef][metadataKey] = []
	        }

	        this.invertedIndex[term][fieldName][docRef][metadataKey].push(metadata)
	      }
	    }

	  }
	}

	/**
	 * Calculates the average document length for this index
	 *
	 * @private
	 */
	lunr.Builder.prototype.calculateAverageFieldLengths = function () {

	  var fieldRefs = Object.keys(this.fieldLengths),
	      numberOfFields = fieldRefs.length,
	      accumulator = {},
	      documentsWithField = {}

	  for (var i = 0; i < numberOfFields; i++) {
	    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),
	        field = fieldRef.fieldName

	    documentsWithField[field] || (documentsWithField[field] = 0)
	    documentsWithField[field] += 1

	    accumulator[field] || (accumulator[field] = 0)
	    accumulator[field] += this.fieldLengths[fieldRef]
	  }

	  var fields = Object.keys(this._fields)

	  for (var i = 0; i < fields.length; i++) {
	    var fieldName = fields[i]
	    accumulator[fieldName] = accumulator[fieldName] / documentsWithField[fieldName]
	  }

	  this.averageFieldLength = accumulator
	}

	/**
	 * Builds a vector space model of every document using lunr.Vector
	 *
	 * @private
	 */
	lunr.Builder.prototype.createFieldVectors = function () {
	  var fieldVectors = {},
	      fieldRefs = Object.keys(this.fieldTermFrequencies),
	      fieldRefsLength = fieldRefs.length,
	      termIdfCache = Object.create(null)

	  for (var i = 0; i < fieldRefsLength; i++) {
	    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),
	        fieldName = fieldRef.fieldName,
	        fieldLength = this.fieldLengths[fieldRef],
	        fieldVector = new lunr.Vector,
	        termFrequencies = this.fieldTermFrequencies[fieldRef],
	        terms = Object.keys(termFrequencies),
	        termsLength = terms.length


	    var fieldBoost = this._fields[fieldName].boost || 1,
	        docBoost = this._documents[fieldRef.docRef].boost || 1

	    for (var j = 0; j < termsLength; j++) {
	      var term = terms[j],
	          tf = termFrequencies[term],
	          termIndex = this.invertedIndex[term]._index,
	          idf, score, scoreWithPrecision

	      if (termIdfCache[term] === undefined) {
	        idf = lunr.idf(this.invertedIndex[term], this.documentCount)
	        termIdfCache[term] = idf
	      } else {
	        idf = termIdfCache[term]
	      }

	      score = idf * ((this._k1 + 1) * tf) / (this._k1 * (1 - this._b + this._b * (fieldLength / this.averageFieldLength[fieldName])) + tf)
	      score *= fieldBoost
	      score *= docBoost
	      scoreWithPrecision = Math.round(score * 1000) / 1000
	      // Converts 1.23456789 to 1.234.
	      // Reducing the precision so that the vectors take up less
	      // space when serialised. Doing it now so that they behave
	      // the same before and after serialisation. Also, this is
	      // the fastest approach to reducing a number's precision in
	      // JavaScript.

	      fieldVector.insert(termIndex, scoreWithPrecision)
	    }

	    fieldVectors[fieldRef] = fieldVector
	  }

	  this.fieldVectors = fieldVectors
	}

	/**
	 * Creates a token set of all tokens in the index using lunr.TokenSet
	 *
	 * @private
	 */
	lunr.Builder.prototype.createTokenSet = function () {
	  this.tokenSet = lunr.TokenSet.fromArray(
	    Object.keys(this.invertedIndex).sort()
	  )
	}

	/**
	 * Builds the index, creating an instance of lunr.Index.
	 *
	 * This completes the indexing process and should only be called
	 * once all documents have been added to the index.
	 *
	 * @returns {lunr.Index}
	 */
	lunr.Builder.prototype.build = function () {
	  this.calculateAverageFieldLengths()
	  this.createFieldVectors()
	  this.createTokenSet()

	  return new lunr.Index({
	    invertedIndex: this.invertedIndex,
	    fieldVectors: this.fieldVectors,
	    tokenSet: this.tokenSet,
	    fields: Object.keys(this._fields),
	    pipeline: this.searchPipeline
	  })
	}

	/**
	 * Applies a plugin to the index builder.
	 *
	 * A plugin is a function that is called with the index builder as its context.
	 * Plugins can be used to customise or extend the behaviour of the index
	 * in some way. A plugin is just a function, that encapsulated the custom
	 * behaviour that should be applied when building the index.
	 *
	 * The plugin function will be called with the index builder as its argument, additional
	 * arguments can also be passed when calling use. The function will be called
	 * with the index builder as its context.
	 *
	 * @param {Function} plugin The plugin to apply.
	 */
	lunr.Builder.prototype.use = function (fn) {
	  var args = Array.prototype.slice.call(arguments, 1)
	  args.unshift(this)
	  fn.apply(this, args)
	}
	/**
	 * Contains and collects metadata about a matching document.
	 * A single instance of lunr.MatchData is returned as part of every
	 * lunr.Index~Result.
	 *
	 * @constructor
	 * @param {string} term - The term this match data is associated with
	 * @param {string} field - The field in which the term was found
	 * @param {object} metadata - The metadata recorded about this term in this field
	 * @property {object} metadata - A cloned collection of metadata associated with this document.
	 * @see {@link lunr.Index~Result}
	 */
	lunr.MatchData = function (term, field, metadata) {
	  var clonedMetadata = Object.create(null),
	      metadataKeys = Object.keys(metadata || {})

	  // Cloning the metadata to prevent the original
	  // being mutated during match data combination.
	  // Metadata is kept in an array within the inverted
	  // index so cloning the data can be done with
	  // Array#slice
	  for (var i = 0; i < metadataKeys.length; i++) {
	    var key = metadataKeys[i]
	    clonedMetadata[key] = metadata[key].slice()
	  }

	  this.metadata = Object.create(null)

	  if (term !== undefined) {
	    this.metadata[term] = Object.create(null)
	    this.metadata[term][field] = clonedMetadata
	  }
	}

	/**
	 * An instance of lunr.MatchData will be created for every term that matches a
	 * document. However only one instance is required in a lunr.Index~Result. This
	 * method combines metadata from another instance of lunr.MatchData with this
	 * objects metadata.
	 *
	 * @param {lunr.MatchData} otherMatchData - Another instance of match data to merge with this one.
	 * @see {@link lunr.Index~Result}
	 */
	lunr.MatchData.prototype.combine = function (otherMatchData) {
	  var terms = Object.keys(otherMatchData.metadata)

	  for (var i = 0; i < terms.length; i++) {
	    var term = terms[i],
	        fields = Object.keys(otherMatchData.metadata[term])

	    if (this.metadata[term] == undefined) {
	      this.metadata[term] = Object.create(null)
	    }

	    for (var j = 0; j < fields.length; j++) {
	      var field = fields[j],
	          keys = Object.keys(otherMatchData.metadata[term][field])

	      if (this.metadata[term][field] == undefined) {
	        this.metadata[term][field] = Object.create(null)
	      }

	      for (var k = 0; k < keys.length; k++) {
	        var key = keys[k]

	        if (this.metadata[term][field][key] == undefined) {
	          this.metadata[term][field][key] = otherMatchData.metadata[term][field][key]
	        } else {
	          this.metadata[term][field][key] = this.metadata[term][field][key].concat(otherMatchData.metadata[term][field][key])
	        }

	      }
	    }
	  }
	}

	/**
	 * Add metadata for a term/field pair to this instance of match data.
	 *
	 * @param {string} term - The term this match data is associated with
	 * @param {string} field - The field in which the term was found
	 * @param {object} metadata - The metadata recorded about this term in this field
	 */
	lunr.MatchData.prototype.add = function (term, field, metadata) {
	  if (!(term in this.metadata)) {
	    this.metadata[term] = Object.create(null)
	    this.metadata[term][field] = metadata
	    return
	  }

	  if (!(field in this.metadata[term])) {
	    this.metadata[term][field] = metadata
	    return
	  }

	  var metadataKeys = Object.keys(metadata)

	  for (var i = 0; i < metadataKeys.length; i++) {
	    var key = metadataKeys[i]

	    if (key in this.metadata[term][field]) {
	      this.metadata[term][field][key] = this.metadata[term][field][key].concat(metadata[key])
	    } else {
	      this.metadata[term][field][key] = metadata[key]
	    }
	  }
	}
	/**
	 * A lunr.Query provides a programmatic way of defining queries to be performed
	 * against a {@link lunr.Index}.
	 *
	 * Prefer constructing a lunr.Query using the {@link lunr.Index#query} method
	 * so the query object is pre-initialized with the right index fields.
	 *
	 * @constructor
	 * @property {lunr.Query~Clause[]} clauses - An array of query clauses.
	 * @property {string[]} allFields - An array of all available fields in a lunr.Index.
	 */
	lunr.Query = function (allFields) {
	  this.clauses = []
	  this.allFields = allFields
	}

	/**
	 * Constants for indicating what kind of automatic wildcard insertion will be used when constructing a query clause.
	 *
	 * This allows wildcards to be added to the beginning and end of a term without having to manually do any string
	 * concatenation.
	 *
	 * The wildcard constants can be bitwise combined to select both leading and trailing wildcards.
	 *
	 * @constant
	 * @default
	 * @property {number} wildcard.NONE - The term will have no wildcards inserted, this is the default behaviour
	 * @property {number} wildcard.LEADING - Prepend the term with a wildcard, unless a leading wildcard already exists
	 * @property {number} wildcard.TRAILING - Append a wildcard to the term, unless a trailing wildcard already exists
	 * @see lunr.Query~Clause
	 * @see lunr.Query#clause
	 * @see lunr.Query#term
	 * @example <caption>query term with trailing wildcard</caption>
	 * query.term('foo', { wildcard: lunr.Query.wildcard.TRAILING })
	 * @example <caption>query term with leading and trailing wildcard</caption>
	 * query.term('foo', {
	 *   wildcard: lunr.Query.wildcard.LEADING | lunr.Query.wildcard.TRAILING
	 * })
	 */

	lunr.Query.wildcard = new String ("*")
	lunr.Query.wildcard.NONE = 0
	lunr.Query.wildcard.LEADING = 1
	lunr.Query.wildcard.TRAILING = 2

	/**
	 * Constants for indicating what kind of presence a term must have in matching documents.
	 *
	 * @constant
	 * @enum {number}
	 * @see lunr.Query~Clause
	 * @see lunr.Query#clause
	 * @see lunr.Query#term
	 * @example <caption>query term with required presence</caption>
	 * query.term('foo', { presence: lunr.Query.presence.REQUIRED })
	 */
	lunr.Query.presence = {
	  /**
	   * Term's presence in a document is optional, this is the default value.
	   */
	  OPTIONAL: 1,

	  /**
	   * Term's presence in a document is required, documents that do not contain
	   * this term will not be returned.
	   */
	  REQUIRED: 2,

	  /**
	   * Term's presence in a document is prohibited, documents that do contain
	   * this term will not be returned.
	   */
	  PROHIBITED: 3
	}

	/**
	 * A single clause in a {@link lunr.Query} contains a term and details on how to
	 * match that term against a {@link lunr.Index}.
	 *
	 * @typedef {Object} lunr.Query~Clause
	 * @property {string[]} fields - The fields in an index this clause should be matched against.
	 * @property {number} [boost=1] - Any boost that should be applied when matching this clause.
	 * @property {number} [editDistance] - Whether the term should have fuzzy matching applied, and how fuzzy the match should be.
	 * @property {boolean} [usePipeline] - Whether the term should be passed through the search pipeline.
	 * @property {number} [wildcard=lunr.Query.wildcard.NONE] - Whether the term should have wildcards appended or prepended.
	 * @property {number} [presence=lunr.Query.presence.OPTIONAL] - The terms presence in any matching documents.
	 */

	/**
	 * Adds a {@link lunr.Query~Clause} to this query.
	 *
	 * Unless the clause contains the fields to be matched all fields will be matched. In addition
	 * a default boost of 1 is applied to the clause.
	 *
	 * @param {lunr.Query~Clause} clause - The clause to add to this query.
	 * @see lunr.Query~Clause
	 * @returns {lunr.Query}
	 */
	lunr.Query.prototype.clause = function (clause) {
	  if (!('fields' in clause)) {
	    clause.fields = this.allFields
	  }

	  if (!('boost' in clause)) {
	    clause.boost = 1
	  }

	  if (!('usePipeline' in clause)) {
	    clause.usePipeline = true
	  }

	  if (!('wildcard' in clause)) {
	    clause.wildcard = lunr.Query.wildcard.NONE
	  }

	  if ((clause.wildcard & lunr.Query.wildcard.LEADING) && (clause.term.charAt(0) != lunr.Query.wildcard)) {
	    clause.term = "*" + clause.term
	  }

	  if ((clause.wildcard & lunr.Query.wildcard.TRAILING) && (clause.term.slice(-1) != lunr.Query.wildcard)) {
	    clause.term = "" + clause.term + "*"
	  }

	  if (!('presence' in clause)) {
	    clause.presence = lunr.Query.presence.OPTIONAL
	  }

	  this.clauses.push(clause)

	  return this
	}

	/**
	 * A negated query is one in which every clause has a presence of
	 * prohibited. These queries require some special processing to return
	 * the expected results.
	 *
	 * @returns boolean
	 */
	lunr.Query.prototype.isNegated = function () {
	  for (var i = 0; i < this.clauses.length; i++) {
	    if (this.clauses[i].presence != lunr.Query.presence.PROHIBITED) {
	      return false
	    }
	  }

	  return true
	}

	/**
	 * Adds a term to the current query, under the covers this will create a {@link lunr.Query~Clause}
	 * to the list of clauses that make up this query.
	 *
	 * The term is used as is, i.e. no tokenization will be performed by this method. Instead conversion
	 * to a token or token-like string should be done before calling this method.
	 *
	 * The term will be converted to a string by calling `toString`. Multiple terms can be passed as an
	 * array, each term in the array will share the same options.
	 *
	 * @param {object|object[]} term - The term(s) to add to the query.
	 * @param {object} [options] - Any additional properties to add to the query clause.
	 * @returns {lunr.Query}
	 * @see lunr.Query#clause
	 * @see lunr.Query~Clause
	 * @example <caption>adding a single term to a query</caption>
	 * query.term("foo")
	 * @example <caption>adding a single term to a query and specifying search fields, term boost and automatic trailing wildcard</caption>
	 * query.term("foo", {
	 *   fields: ["title"],
	 *   boost: 10,
	 *   wildcard: lunr.Query.wildcard.TRAILING
	 * })
	 * @example <caption>using lunr.tokenizer to convert a string to tokens before using them as terms</caption>
	 * query.term(lunr.tokenizer("foo bar"))
	 */
	lunr.Query.prototype.term = function (term, options) {
	  if (Array.isArray(term)) {
	    term.forEach(function (t) { this.term(t, lunr.utils.clone(options)) }, this)
	    return this
	  }

	  var clause = options || {}
	  clause.term = term.toString()

	  this.clause(clause)

	  return this
	}
	lunr.QueryParseError = function (message, start, end) {
	  this.name = "QueryParseError"
	  this.message = message
	  this.start = start
	  this.end = end
	}

	lunr.QueryParseError.prototype = new Error
	lunr.QueryLexer = function (str) {
	  this.lexemes = []
	  this.str = str
	  this.length = str.length
	  this.pos = 0
	  this.start = 0
	  this.escapeCharPositions = []
	}

	lunr.QueryLexer.prototype.run = function () {
	  var state = lunr.QueryLexer.lexText

	  while (state) {
	    state = state(this)
	  }
	}

	lunr.QueryLexer.prototype.sliceString = function () {
	  var subSlices = [],
	      sliceStart = this.start,
	      sliceEnd = this.pos

	  for (var i = 0; i < this.escapeCharPositions.length; i++) {
	    sliceEnd = this.escapeCharPositions[i]
	    subSlices.push(this.str.slice(sliceStart, sliceEnd))
	    sliceStart = sliceEnd + 1
	  }

	  subSlices.push(this.str.slice(sliceStart, this.pos))
	  this.escapeCharPositions.length = 0

	  return subSlices.join('')
	}

	lunr.QueryLexer.prototype.emit = function (type) {
	  this.lexemes.push({
	    type: type,
	    str: this.sliceString(),
	    start: this.start,
	    end: this.pos
	  })

	  this.start = this.pos
	}

	lunr.QueryLexer.prototype.escapeCharacter = function () {
	  this.escapeCharPositions.push(this.pos - 1)
	  this.pos += 1
	}

	lunr.QueryLexer.prototype.next = function () {
	  if (this.pos >= this.length) {
	    return lunr.QueryLexer.EOS
	  }

	  var char = this.str.charAt(this.pos)
	  this.pos += 1
	  return char
	}

	lunr.QueryLexer.prototype.width = function () {
	  return this.pos - this.start
	}

	lunr.QueryLexer.prototype.ignore = function () {
	  if (this.start == this.pos) {
	    this.pos += 1
	  }

	  this.start = this.pos
	}

	lunr.QueryLexer.prototype.backup = function () {
	  this.pos -= 1
	}

	lunr.QueryLexer.prototype.acceptDigitRun = function () {
	  var char, charCode

	  do {
	    char = this.next()
	    charCode = char.charCodeAt(0)
	  } while (charCode > 47 && charCode < 58)

	  if (char != lunr.QueryLexer.EOS) {
	    this.backup()
	  }
	}

	lunr.QueryLexer.prototype.more = function () {
	  return this.pos < this.length
	}

	lunr.QueryLexer.EOS = 'EOS'
	lunr.QueryLexer.FIELD = 'FIELD'
	lunr.QueryLexer.TERM = 'TERM'
	lunr.QueryLexer.EDIT_DISTANCE = 'EDIT_DISTANCE'
	lunr.QueryLexer.BOOST = 'BOOST'
	lunr.QueryLexer.PRESENCE = 'PRESENCE'

	lunr.QueryLexer.lexField = function (lexer) {
	  lexer.backup()
	  lexer.emit(lunr.QueryLexer.FIELD)
	  lexer.ignore()
	  return lunr.QueryLexer.lexText
	}

	lunr.QueryLexer.lexTerm = function (lexer) {
	  if (lexer.width() > 1) {
	    lexer.backup()
	    lexer.emit(lunr.QueryLexer.TERM)
	  }

	  lexer.ignore()

	  if (lexer.more()) {
	    return lunr.QueryLexer.lexText
	  }
	}

	lunr.QueryLexer.lexEditDistance = function (lexer) {
	  lexer.ignore()
	  lexer.acceptDigitRun()
	  lexer.emit(lunr.QueryLexer.EDIT_DISTANCE)
	  return lunr.QueryLexer.lexText
	}

	lunr.QueryLexer.lexBoost = function (lexer) {
	  lexer.ignore()
	  lexer.acceptDigitRun()
	  lexer.emit(lunr.QueryLexer.BOOST)
	  return lunr.QueryLexer.lexText
	}

	lunr.QueryLexer.lexEOS = function (lexer) {
	  if (lexer.width() > 0) {
	    lexer.emit(lunr.QueryLexer.TERM)
	  }
	}

	// This matches the separator used when tokenising fields
	// within a document. These should match otherwise it is
	// not possible to search for some tokens within a document.
	//
	// It is possible for the user to change the separator on the
	// tokenizer so it _might_ clash with any other of the special
	// characters already used within the search string, e.g. :.
	//
	// This means that it is possible to change the separator in
	// such a way that makes some words unsearchable using a search
	// string.
	lunr.QueryLexer.termSeparator = lunr.tokenizer.separator

	lunr.QueryLexer.lexText = function (lexer) {
	  while (true) {
	    var char = lexer.next()

	    if (char == lunr.QueryLexer.EOS) {
	      return lunr.QueryLexer.lexEOS
	    }

	    // Escape character is '\'
	    if (char.charCodeAt(0) == 92) {
	      lexer.escapeCharacter()
	      continue
	    }

	    if (char == ":") {
	      return lunr.QueryLexer.lexField
	    }

	    if (char == "~") {
	      lexer.backup()
	      if (lexer.width() > 0) {
	        lexer.emit(lunr.QueryLexer.TERM)
	      }
	      return lunr.QueryLexer.lexEditDistance
	    }

	    if (char == "^") {
	      lexer.backup()
	      if (lexer.width() > 0) {
	        lexer.emit(lunr.QueryLexer.TERM)
	      }
	      return lunr.QueryLexer.lexBoost
	    }

	    // "+" indicates term presence is required
	    // checking for length to ensure that only
	    // leading "+" are considered
	    if (char == "+" && lexer.width() === 1) {
	      lexer.emit(lunr.QueryLexer.PRESENCE)
	      return lunr.QueryLexer.lexText
	    }

	    // "-" indicates term presence is prohibited
	    // checking for length to ensure that only
	    // leading "-" are considered
	    if (char == "-" && lexer.width() === 1) {
	      lexer.emit(lunr.QueryLexer.PRESENCE)
	      return lunr.QueryLexer.lexText
	    }

	    if (char.match(lunr.QueryLexer.termSeparator)) {
	      return lunr.QueryLexer.lexTerm
	    }
	  }
	}

	lunr.QueryParser = function (str, query) {
	  this.lexer = new lunr.QueryLexer (str)
	  this.query = query
	  this.currentClause = {}
	  this.lexemeIdx = 0
	}

	lunr.QueryParser.prototype.parse = function () {
	  this.lexer.run()
	  this.lexemes = this.lexer.lexemes

	  var state = lunr.QueryParser.parseClause

	  while (state) {
	    state = state(this)
	  }

	  return this.query
	}

	lunr.QueryParser.prototype.peekLexeme = function () {
	  return this.lexemes[this.lexemeIdx]
	}

	lunr.QueryParser.prototype.consumeLexeme = function () {
	  var lexeme = this.peekLexeme()
	  this.lexemeIdx += 1
	  return lexeme
	}

	lunr.QueryParser.prototype.nextClause = function () {
	  var completedClause = this.currentClause
	  this.query.clause(completedClause)
	  this.currentClause = {}
	}

	lunr.QueryParser.parseClause = function (parser) {
	  var lexeme = parser.peekLexeme()

	  if (lexeme == undefined) {
	    return
	  }

	  switch (lexeme.type) {
	    case lunr.QueryLexer.PRESENCE:
	      return lunr.QueryParser.parsePresence
	    case lunr.QueryLexer.FIELD:
	      return lunr.QueryParser.parseField
	    case lunr.QueryLexer.TERM:
	      return lunr.QueryParser.parseTerm
	    default:
	      var errorMessage = "expected either a field or a term, found " + lexeme.type

	      if (lexeme.str.length >= 1) {
	        errorMessage += " with value '" + lexeme.str + "'"
	      }

	      throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)
	  }
	}

	lunr.QueryParser.parsePresence = function (parser) {
	  var lexeme = parser.consumeLexeme()

	  if (lexeme == undefined) {
	    return
	  }

	  switch (lexeme.str) {
	    case "-":
	      parser.currentClause.presence = lunr.Query.presence.PROHIBITED
	      break
	    case "+":
	      parser.currentClause.presence = lunr.Query.presence.REQUIRED
	      break
	    default:
	      var errorMessage = "unrecognised presence operator'" + lexeme.str + "'"
	      throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)
	  }

	  var nextLexeme = parser.peekLexeme()

	  if (nextLexeme == undefined) {
	    var errorMessage = "expecting term or field, found nothing"
	    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)
	  }

	  switch (nextLexeme.type) {
	    case lunr.QueryLexer.FIELD:
	      return lunr.QueryParser.parseField
	    case lunr.QueryLexer.TERM:
	      return lunr.QueryParser.parseTerm
	    default:
	      var errorMessage = "expecting term or field, found '" + nextLexeme.type + "'"
	      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)
	  }
	}

	lunr.QueryParser.parseField = function (parser) {
	  var lexeme = parser.consumeLexeme()

	  if (lexeme == undefined) {
	    return
	  }

	  if (parser.query.allFields.indexOf(lexeme.str) == -1) {
	    var possibleFields = parser.query.allFields.map(function (f) { return "'" + f + "'" }).join(', '),
	        errorMessage = "unrecognised field '" + lexeme.str + "', possible fields: " + possibleFields

	    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)
	  }

	  parser.currentClause.fields = [lexeme.str]

	  var nextLexeme = parser.peekLexeme()

	  if (nextLexeme == undefined) {
	    var errorMessage = "expecting term, found nothing"
	    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)
	  }

	  switch (nextLexeme.type) {
	    case lunr.QueryLexer.TERM:
	      return lunr.QueryParser.parseTerm
	    default:
	      var errorMessage = "expecting term, found '" + nextLexeme.type + "'"
	      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)
	  }
	}

	lunr.QueryParser.parseTerm = function (parser) {
	  var lexeme = parser.consumeLexeme()

	  if (lexeme == undefined) {
	    return
	  }

	  parser.currentClause.term = lexeme.str.toLowerCase()

	  if (lexeme.str.indexOf("*") != -1) {
	    parser.currentClause.usePipeline = false
	  }

	  var nextLexeme = parser.peekLexeme()

	  if (nextLexeme == undefined) {
	    parser.nextClause()
	    return
	  }

	  switch (nextLexeme.type) {
	    case lunr.QueryLexer.TERM:
	      parser.nextClause()
	      return lunr.QueryParser.parseTerm
	    case lunr.QueryLexer.FIELD:
	      parser.nextClause()
	      return lunr.QueryParser.parseField
	    case lunr.QueryLexer.EDIT_DISTANCE:
	      return lunr.QueryParser.parseEditDistance
	    case lunr.QueryLexer.BOOST:
	      return lunr.QueryParser.parseBoost
	    case lunr.QueryLexer.PRESENCE:
	      parser.nextClause()
	      return lunr.QueryParser.parsePresence
	    default:
	      var errorMessage = "Unexpected lexeme type '" + nextLexeme.type + "'"
	      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)
	  }
	}

	lunr.QueryParser.parseEditDistance = function (parser) {
	  var lexeme = parser.consumeLexeme()

	  if (lexeme == undefined) {
	    return
	  }

	  var editDistance = parseInt(lexeme.str, 10)

	  if (isNaN(editDistance)) {
	    var errorMessage = "edit distance must be numeric"
	    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)
	  }

	  parser.currentClause.editDistance = editDistance

	  var nextLexeme = parser.peekLexeme()

	  if (nextLexeme == undefined) {
	    parser.nextClause()
	    return
	  }

	  switch (nextLexeme.type) {
	    case lunr.QueryLexer.TERM:
	      parser.nextClause()
	      return lunr.QueryParser.parseTerm
	    case lunr.QueryLexer.FIELD:
	      parser.nextClause()
	      return lunr.QueryParser.parseField
	    case lunr.QueryLexer.EDIT_DISTANCE:
	      return lunr.QueryParser.parseEditDistance
	    case lunr.QueryLexer.BOOST:
	      return lunr.QueryParser.parseBoost
	    default:
	      var errorMessage = "Unexpected lexeme type '" + nextLexeme.type + "'"
	      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)
	  }
	}

	lunr.QueryParser.parseBoost = function (parser) {
	  var lexeme = parser.consumeLexeme()

	  if (lexeme == undefined) {
	    return
	  }

	  var boost = parseInt(lexeme.str, 10)

	  if (isNaN(boost)) {
	    var errorMessage = "boost must be numeric"
	    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)
	  }

	  parser.currentClause.boost = boost

	  var nextLexeme = parser.peekLexeme()

	  if (nextLexeme == undefined) {
	    parser.nextClause()
	    return
	  }

	  switch (nextLexeme.type) {
	    case lunr.QueryLexer.TERM:
	      parser.nextClause()
	      return lunr.QueryParser.parseTerm
	    case lunr.QueryLexer.FIELD:
	      parser.nextClause()
	      return lunr.QueryParser.parseField
	    case lunr.QueryLexer.EDIT_DISTANCE:
	      return lunr.QueryParser.parseEditDistance
	    case lunr.QueryLexer.BOOST:
	      return lunr.QueryParser.parseBoost
	    default:
	      var errorMessage = "Unexpected lexeme type '" + nextLexeme.type + "'"
	      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)
	  }
	}

	  /**
	   * export the module via AMD, CommonJS or as a browser global
	   * Export code from https://github.com/umdjs/umd/blob/master/returnExports.js
	   */
	  ;(function (root, factory) {
	    if (true) {
	      // AMD. Register as an anonymous module.
	      !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))
	    } else if (typeof exports === 'object') {
	      /**
	       * Node. Does not work with strict CommonJS, but
	       * only CommonJS-like enviroments that support module.exports,
	       * like Node.
	       */
	      module.exports = factory()
	    } else {
	      // Browser globals (root is window)
	      root.lunr = factory()
	    }
	  }(this, function () {
	    /**
	     * Just return a value to define the module export.
	     * This example returns an object, but the module
	     * can return a function as the exported value.
	     */
	    return lunr
	  }))
	})();


/***/ },
/* 4 */
/***/ function(module, exports) {

	/**
	 * Represents the location of a match within a
	 * larger string. Extracted from a lunr.Index~Result.
	 *
	 * @typedef {number[]} MatchLocation
	 * @property {number} 0 - Starting index of the match
	 * @property {number} 1 - Length of the match
	 */

	/**
	 * Highlights text within a dom element.
	 *
	 * Specifically this is designed to work with the output
	 * positions of terms returned from a lunr search.
	 *
	 * @param {HTMLElement} element - the element that contains text to highlight.
	 * @param {MatchLocation[]} matches - the list of matches to highlight.
	 */
	module.exports = function (element, matches) {

	  var nodeFilter = {
	    acceptNode: function (node) {
	      if (/^[\t\n\r ]*$/.test(node.nodeValue)) {
	        return NodeFilter.FILTER_SKIP
	      }
	      return NodeFilter.FILTER_ACCEPT
	    }
	  }

	  var index = 0,
	      matches = matches.sort(function (a, b) { return a[0] - b[0] }).slice(),
	      previousMatch = [-1, -1]
	      match = matches.shift(),
	      walker = document.createTreeWalker(
	        element,
	        NodeFilter.SHOW_TEXT,
	        nodeFilter,
	        false
	      )

	  while (node = walker.nextNode()) {
	    if (match == undefined) break
	    if (match[0] == previousMatch[0]) continue

	    var text = node.textContent,
	        nodeEndIndex = index + node.length;

	    if (match[0] < nodeEndIndex) {
	      var range = document.createRange(),
	          tag = document.createElement('mark'),
	          rangeStart = match[0] - index,
	          rangeEnd = rangeStart + match[1];

	      tag.dataset.rangeStart = rangeStart
	      tag.dataset.rangeEnd = rangeEnd

	      range.setStart(node, rangeStart)
	      range.setEnd(node, rangeEnd)
	      range.surroundContents(tag)

	      index = match[0] + match[1]

	      // the next node will now actually be the text we just wrapped, so
	      // we need to skip it
	      walker.nextNode()
	      previousMatch = match
	      match = matches.shift()
	    } else {
	      index = nodeEndIndex
	    }
	  }
	}


/***/ }
/******/ ]);